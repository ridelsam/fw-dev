
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011d0  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001378  08001378  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001378  08001378  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08001378  08001378  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001378  08001378  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001378  08001378  00011378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800137c  0800137c  0001137c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08001380  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020034  2**0
                  CONTENTS
 10 .bss          00000048  20000034  20000034  00020034  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000007c  2000007c  00020034  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001c7e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000065d  00000000  00000000  00021ce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000210  00000000  00000000  00022340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001c8  00000000  00000000  00022550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002cf3  00000000  00000000  00022718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000024e0  00000000  00000000  0002540b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000b25a  00000000  00000000  000278eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00032b45  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000007a0  00000000  00000000  00032b98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000034 	.word	0x20000034
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001360 	.word	0x08001360

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000038 	.word	0x20000038
 80001e4:	08001360 	.word	0x08001360

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <I2C1_GPIOInits>:
 * PB6-> SCL
 * PB7 -> SDA
 */

void I2C1_GPIOInits(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 80001fe:	4b0e      	ldr	r3, [pc, #56]	; (8000238 <I2C1_GPIOInits+0x40>)
 8000200:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000202:	2302      	movs	r3, #2
 8000204:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000206:	2301      	movs	r3, #1
 8000208:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800020a:	2301      	movs	r3, #1
 800020c:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 800020e:	2304      	movs	r3, #4
 8000210:	737b      	strb	r3, [r7, #13]
	I2CPins. GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000212:	2302      	movs	r3, #2
 8000214:	72bb      	strb	r3, [r7, #10]

	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000216:	2306      	movs	r3, #6
 8000218:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	4618      	mov	r0, r3
 800021e:	f000 f9d5 	bl	80005cc <GPIO_Init>


	//sda
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8000222:	2307      	movs	r3, #7
 8000224:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f000 f9cf 	bl	80005cc <GPIO_Init>


}
 800022e:	bf00      	nop
 8000230:	3710      	adds	r7, #16
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	40020400 	.word	0x40020400

0800023c <I2C1_Inits>:

void I2C1_Inits(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8000240:	4b09      	ldr	r3, [pc, #36]	; (8000268 <I2C1_Inits+0x2c>)
 8000242:	4a0a      	ldr	r2, [pc, #40]	; (800026c <I2C1_Inits+0x30>)
 8000244:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000246:	4b08      	ldr	r3, [pc, #32]	; (8000268 <I2C1_Inits+0x2c>)
 8000248:	2201      	movs	r2, #1
 800024a:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 800024c:	4b06      	ldr	r3, [pc, #24]	; (8000268 <I2C1_Inits+0x2c>)
 800024e:	2269      	movs	r2, #105	; 0x69
 8000250:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000252:	4b05      	ldr	r3, [pc, #20]	; (8000268 <I2C1_Inits+0x2c>)
 8000254:	2200      	movs	r2, #0
 8000256:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000258:	4b03      	ldr	r3, [pc, #12]	; (8000268 <I2C1_Inits+0x2c>)
 800025a:	4a05      	ldr	r2, [pc, #20]	; (8000270 <I2C1_Inits+0x34>)
 800025c:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 800025e:	4802      	ldr	r0, [pc, #8]	; (8000268 <I2C1_Inits+0x2c>)
 8000260:	f000 fca2 	bl	8000ba8 <I2C_Init>

}
 8000264:	bf00      	nop
 8000266:	bd80      	pop	{r7, pc}
 8000268:	20000050 	.word	0x20000050
 800026c:	40005400 	.word	0x40005400
 8000270:	000186a0 	.word	0x000186a0

08000274 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 800027a:	4b09      	ldr	r3, [pc, #36]	; (80002a0 <GPIO_ButtonInit+0x2c>)
 800027c:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 800027e:	2300      	movs	r3, #0
 8000280:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000282:	2300      	movs	r3, #0
 8000284:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000286:	2302      	movs	r3, #2
 8000288:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800028a:	2300      	movs	r3, #0
 800028c:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	4618      	mov	r0, r3
 8000292:	f000 f99b 	bl	80005cc <GPIO_Init>

}
 8000296:	bf00      	nop
 8000298:	3710      	adds	r7, #16
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	40020000 	.word	0x40020000

080002a4 <main>:


int main(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0


	GPIO_ButtonInit();
 80002a8:	f7ff ffe4 	bl	8000274 <GPIO_ButtonInit>

	//i2c pin inits
	I2C1_GPIOInits();
 80002ac:	f7ff ffa4 	bl	80001f8 <I2C1_GPIOInits>

	//i2c peripheral configuration
	I2C1_Inits();
 80002b0:	f7ff ffc4 	bl	800023c <I2C1_Inits>

	//I2C IRQ configurations
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_EV,ENABLE);
 80002b4:	2101      	movs	r1, #1
 80002b6:	201f      	movs	r0, #31
 80002b8:	f000 fd44 	bl	8000d44 <I2C_IRQInterruptConfig>
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_ER,ENABLE);
 80002bc:	2101      	movs	r1, #1
 80002be:	2020      	movs	r0, #32
 80002c0:	f000 fd40 	bl	8000d44 <I2C_IRQInterruptConfig>

	I2C_SlaveEnableDisableCallbackEvents(I2C1,ENABLE);
 80002c4:	2101      	movs	r1, #1
 80002c6:	4806      	ldr	r0, [pc, #24]	; (80002e0 <main+0x3c>)
 80002c8:	f000 ff91 	bl	80011ee <I2C_SlaveEnableDisableCallbackEvents>
	


	//enable the i2c peripheral
	I2C_PeripheralControl(I2C1,ENABLE);
 80002cc:	2101      	movs	r1, #1
 80002ce:	4804      	ldr	r0, [pc, #16]	; (80002e0 <main+0x3c>)
 80002d0:	f000 fbf5 	bl	8000abe <I2C_PeripheralControl>

	//ack bit is made 1 after PE=1
	I2C_ManageAcking(I2C1,I2C_ACK_ENABLE);
 80002d4:	2101      	movs	r1, #1
 80002d6:	4802      	ldr	r0, [pc, #8]	; (80002e0 <main+0x3c>)
 80002d8:	f000 fd18 	bl	8000d0c <I2C_ManageAcking>

	while(1);
 80002dc:	e7fe      	b.n	80002dc <main+0x38>
 80002de:	bf00      	nop
 80002e0:	40005400 	.word	0x40005400

080002e4 <I2C1_EV_IRQHandler>:

}


void I2C1_EV_IRQHandler (void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	I2C_EV_IRQHandling(&I2C1Handle);
 80002e8:	4802      	ldr	r0, [pc, #8]	; (80002f4 <I2C1_EV_IRQHandler+0x10>)
 80002ea:	f000 fdb1 	bl	8000e50 <I2C_EV_IRQHandling>
}
 80002ee:	bf00      	nop
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	20000050 	.word	0x20000050

080002f8 <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler (void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	I2C_ER_IRQHandling(&I2C1Handle);
 80002fc:	4802      	ldr	r0, [pc, #8]	; (8000308 <I2C1_ER_IRQHandler+0x10>)
 80002fe:	f000 fed4 	bl	80010aa <I2C_ER_IRQHandling>
}
 8000302:	bf00      	nop
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	20000050 	.word	0x20000050

0800030c <I2C_ApplicationEventCallback>:




void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle,uint8_t AppEv)
{
 800030c:	b590      	push	{r4, r7, lr}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	460b      	mov	r3, r1
 8000316:	70fb      	strb	r3, [r7, #3]

	static uint8_t commandCode = 0;
	static  uint8_t Cnt = 0;

	if(AppEv == I2C_EV_DATA_REQ)
 8000318:	78fb      	ldrb	r3, [r7, #3]
 800031a:	2b08      	cmp	r3, #8
 800031c:	d123      	bne.n	8000366 <I2C_ApplicationEventCallback+0x5a>
	{
		//Master wants some data. slave has to send it
		if(commandCode == 0x51)
 800031e:	4b1f      	ldr	r3, [pc, #124]	; (800039c <I2C_ApplicationEventCallback+0x90>)
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	2b51      	cmp	r3, #81	; 0x51
 8000324:	d10b      	bne.n	800033e <I2C_ApplicationEventCallback+0x32>
		{
			//send the length information to the master
			I2C_SlaveSendData(pI2CHandle->pI2Cx,strlen((char*)Tx_buf));
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	681c      	ldr	r4, [r3, #0]
 800032a:	481d      	ldr	r0, [pc, #116]	; (80003a0 <I2C_ApplicationEventCallback+0x94>)
 800032c:	f7ff ff5c 	bl	80001e8 <strlen>
 8000330:	4603      	mov	r3, r0
 8000332:	b2db      	uxtb	r3, r3
 8000334:	4619      	mov	r1, r3
 8000336:	4620      	mov	r0, r4
 8000338:	f000 ff3d 	bl	80011b6 <I2C_SlaveSendData>
	{
		//This happens only during slave reception .
		//Master has ended the I2C communication with the slave.
	}

}
 800033c:	e029      	b.n	8000392 <I2C_ApplicationEventCallback+0x86>
		}else if (commandCode == 0x52)
 800033e:	4b17      	ldr	r3, [pc, #92]	; (800039c <I2C_ApplicationEventCallback+0x90>)
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	2b52      	cmp	r3, #82	; 0x52
 8000344:	d125      	bne.n	8000392 <I2C_ApplicationEventCallback+0x86>
			I2C_SlaveSendData(pI2CHandle->pI2Cx,Tx_buf[Cnt++]);
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	681a      	ldr	r2, [r3, #0]
 800034a:	4b16      	ldr	r3, [pc, #88]	; (80003a4 <I2C_ApplicationEventCallback+0x98>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	1c59      	adds	r1, r3, #1
 8000350:	b2c8      	uxtb	r0, r1
 8000352:	4914      	ldr	r1, [pc, #80]	; (80003a4 <I2C_ApplicationEventCallback+0x98>)
 8000354:	7008      	strb	r0, [r1, #0]
 8000356:	4619      	mov	r1, r3
 8000358:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <I2C_ApplicationEventCallback+0x94>)
 800035a:	5c5b      	ldrb	r3, [r3, r1]
 800035c:	4619      	mov	r1, r3
 800035e:	4610      	mov	r0, r2
 8000360:	f000 ff29 	bl	80011b6 <I2C_SlaveSendData>
}
 8000364:	e015      	b.n	8000392 <I2C_ApplicationEventCallback+0x86>
	}else if (AppEv == I2C_EV_DATA_RCV)
 8000366:	78fb      	ldrb	r3, [r7, #3]
 8000368:	2b09      	cmp	r3, #9
 800036a:	d109      	bne.n	8000380 <I2C_ApplicationEventCallback+0x74>
		commandCode = I2C_SlaveReceiveData(pI2CHandle->pI2Cx);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4618      	mov	r0, r3
 8000372:	f000 ff2f 	bl	80011d4 <I2C_SlaveReceiveData>
 8000376:	4603      	mov	r3, r0
 8000378:	461a      	mov	r2, r3
 800037a:	4b08      	ldr	r3, [pc, #32]	; (800039c <I2C_ApplicationEventCallback+0x90>)
 800037c:	701a      	strb	r2, [r3, #0]
}
 800037e:	e008      	b.n	8000392 <I2C_ApplicationEventCallback+0x86>
	}else if (AppEv == I2C_ERROR_AF)
 8000380:	78fb      	ldrb	r3, [r7, #3]
 8000382:	2b05      	cmp	r3, #5
 8000384:	d105      	bne.n	8000392 <I2C_ApplicationEventCallback+0x86>
		commandCode = 0xff;
 8000386:	4b05      	ldr	r3, [pc, #20]	; (800039c <I2C_ApplicationEventCallback+0x90>)
 8000388:	22ff      	movs	r2, #255	; 0xff
 800038a:	701a      	strb	r2, [r3, #0]
		Cnt = 0;
 800038c:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <I2C_ApplicationEventCallback+0x98>)
 800038e:	2200      	movs	r2, #0
 8000390:	701a      	strb	r2, [r3, #0]
}
 8000392:	bf00      	nop
 8000394:	370c      	adds	r7, #12
 8000396:	46bd      	mov	sp, r7
 8000398:	bd90      	pop	{r4, r7, pc}
 800039a:	bf00      	nop
 800039c:	20000078 	.word	0x20000078
 80003a0:	20000000 	.word	0x20000000
 80003a4:	20000079 	.word	0x20000079

080003a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003a8:	480d      	ldr	r0, [pc, #52]	; (80003e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003b0:	480c      	ldr	r0, [pc, #48]	; (80003e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80003b2:	490d      	ldr	r1, [pc, #52]	; (80003e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003b4:	4a0d      	ldr	r2, [pc, #52]	; (80003ec <LoopForever+0xe>)
  movs r3, #0
 80003b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003b8:	e002      	b.n	80003c0 <LoopCopyDataInit>

080003ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003be:	3304      	adds	r3, #4

080003c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c4:	d3f9      	bcc.n	80003ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003c6:	4a0a      	ldr	r2, [pc, #40]	; (80003f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003c8:	4c0a      	ldr	r4, [pc, #40]	; (80003f4 <LoopForever+0x16>)
  movs r3, #0
 80003ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003cc:	e001      	b.n	80003d2 <LoopFillZerobss>

080003ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003d0:	3204      	adds	r2, #4

080003d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d4:	d3fb      	bcc.n	80003ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003d6:	f000 ff9f 	bl	8001318 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003da:	f7ff ff63 	bl	80002a4 <main>

080003de <LoopForever>:

LoopForever:
    b LoopForever
 80003de:	e7fe      	b.n	80003de <LoopForever>
  ldr   r0, =_estack
 80003e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e8:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 80003ec:	08001380 	.word	0x08001380
  ldr r2, =_sbss
 80003f0:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 80003f4:	2000007c 	.word	0x2000007c

080003f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003f8:	e7fe      	b.n	80003f8 <ADC_IRQHandler>
	...

080003fc <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
 8000404:	460b      	mov	r3, r1
 8000406:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000408:	78fb      	ldrb	r3, [r7, #3]
 800040a:	2b01      	cmp	r3, #1
 800040c:	d162      	bne.n	80004d4 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4a64      	ldr	r2, [pc, #400]	; (80005a4 <GPIO_PeriClockControl+0x1a8>)
 8000412:	4293      	cmp	r3, r2
 8000414:	d106      	bne.n	8000424 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000416:	4b64      	ldr	r3, [pc, #400]	; (80005a8 <GPIO_PeriClockControl+0x1ac>)
 8000418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041a:	4a63      	ldr	r2, [pc, #396]	; (80005a8 <GPIO_PeriClockControl+0x1ac>)
 800041c:	f043 0301 	orr.w	r3, r3, #1
 8000420:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOI_PCLK_DI();
		}
	}

}
 8000422:	e0b9      	b.n	8000598 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	4a61      	ldr	r2, [pc, #388]	; (80005ac <GPIO_PeriClockControl+0x1b0>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d106      	bne.n	800043a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800042c:	4b5e      	ldr	r3, [pc, #376]	; (80005a8 <GPIO_PeriClockControl+0x1ac>)
 800042e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000430:	4a5d      	ldr	r2, [pc, #372]	; (80005a8 <GPIO_PeriClockControl+0x1ac>)
 8000432:	f043 0302 	orr.w	r3, r3, #2
 8000436:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000438:	e0ae      	b.n	8000598 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4a5c      	ldr	r2, [pc, #368]	; (80005b0 <GPIO_PeriClockControl+0x1b4>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d106      	bne.n	8000450 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000442:	4b59      	ldr	r3, [pc, #356]	; (80005a8 <GPIO_PeriClockControl+0x1ac>)
 8000444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000446:	4a58      	ldr	r2, [pc, #352]	; (80005a8 <GPIO_PeriClockControl+0x1ac>)
 8000448:	f043 0304 	orr.w	r3, r3, #4
 800044c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800044e:	e0a3      	b.n	8000598 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	4a58      	ldr	r2, [pc, #352]	; (80005b4 <GPIO_PeriClockControl+0x1b8>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d106      	bne.n	8000466 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000458:	4b53      	ldr	r3, [pc, #332]	; (80005a8 <GPIO_PeriClockControl+0x1ac>)
 800045a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800045c:	4a52      	ldr	r2, [pc, #328]	; (80005a8 <GPIO_PeriClockControl+0x1ac>)
 800045e:	f043 0308 	orr.w	r3, r3, #8
 8000462:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000464:	e098      	b.n	8000598 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4a53      	ldr	r2, [pc, #332]	; (80005b8 <GPIO_PeriClockControl+0x1bc>)
 800046a:	4293      	cmp	r3, r2
 800046c:	d106      	bne.n	800047c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800046e:	4b4e      	ldr	r3, [pc, #312]	; (80005a8 <GPIO_PeriClockControl+0x1ac>)
 8000470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000472:	4a4d      	ldr	r2, [pc, #308]	; (80005a8 <GPIO_PeriClockControl+0x1ac>)
 8000474:	f043 0310 	orr.w	r3, r3, #16
 8000478:	6313      	str	r3, [r2, #48]	; 0x30
}
 800047a:	e08d      	b.n	8000598 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	4a4f      	ldr	r2, [pc, #316]	; (80005bc <GPIO_PeriClockControl+0x1c0>)
 8000480:	4293      	cmp	r3, r2
 8000482:	d106      	bne.n	8000492 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000484:	4b48      	ldr	r3, [pc, #288]	; (80005a8 <GPIO_PeriClockControl+0x1ac>)
 8000486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000488:	4a47      	ldr	r2, [pc, #284]	; (80005a8 <GPIO_PeriClockControl+0x1ac>)
 800048a:	f043 0320 	orr.w	r3, r3, #32
 800048e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000490:	e082      	b.n	8000598 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4a4a      	ldr	r2, [pc, #296]	; (80005c0 <GPIO_PeriClockControl+0x1c4>)
 8000496:	4293      	cmp	r3, r2
 8000498:	d106      	bne.n	80004a8 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800049a:	4b43      	ldr	r3, [pc, #268]	; (80005a8 <GPIO_PeriClockControl+0x1ac>)
 800049c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800049e:	4a42      	ldr	r2, [pc, #264]	; (80005a8 <GPIO_PeriClockControl+0x1ac>)
 80004a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004a4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a6:	e077      	b.n	8000598 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	4a46      	ldr	r2, [pc, #280]	; (80005c4 <GPIO_PeriClockControl+0x1c8>)
 80004ac:	4293      	cmp	r3, r2
 80004ae:	d106      	bne.n	80004be <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80004b0:	4b3d      	ldr	r3, [pc, #244]	; (80005a8 <GPIO_PeriClockControl+0x1ac>)
 80004b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b4:	4a3c      	ldr	r2, [pc, #240]	; (80005a8 <GPIO_PeriClockControl+0x1ac>)
 80004b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004ba:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004bc:	e06c      	b.n	8000598 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4a41      	ldr	r2, [pc, #260]	; (80005c8 <GPIO_PeriClockControl+0x1cc>)
 80004c2:	4293      	cmp	r3, r2
 80004c4:	d168      	bne.n	8000598 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80004c6:	4b38      	ldr	r3, [pc, #224]	; (80005a8 <GPIO_PeriClockControl+0x1ac>)
 80004c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ca:	4a37      	ldr	r2, [pc, #220]	; (80005a8 <GPIO_PeriClockControl+0x1ac>)
 80004cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004d2:	e061      	b.n	8000598 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4a33      	ldr	r2, [pc, #204]	; (80005a4 <GPIO_PeriClockControl+0x1a8>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d106      	bne.n	80004ea <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 80004dc:	4b32      	ldr	r3, [pc, #200]	; (80005a8 <GPIO_PeriClockControl+0x1ac>)
 80004de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e0:	4a31      	ldr	r2, [pc, #196]	; (80005a8 <GPIO_PeriClockControl+0x1ac>)
 80004e2:	f023 0301 	bic.w	r3, r3, #1
 80004e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004e8:	e056      	b.n	8000598 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4a2f      	ldr	r2, [pc, #188]	; (80005ac <GPIO_PeriClockControl+0x1b0>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d106      	bne.n	8000500 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 80004f2:	4b2d      	ldr	r3, [pc, #180]	; (80005a8 <GPIO_PeriClockControl+0x1ac>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	4a2c      	ldr	r2, [pc, #176]	; (80005a8 <GPIO_PeriClockControl+0x1ac>)
 80004f8:	f023 0302 	bic.w	r3, r3, #2
 80004fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004fe:	e04b      	b.n	8000598 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	4a2b      	ldr	r2, [pc, #172]	; (80005b0 <GPIO_PeriClockControl+0x1b4>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d106      	bne.n	8000516 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000508:	4b27      	ldr	r3, [pc, #156]	; (80005a8 <GPIO_PeriClockControl+0x1ac>)
 800050a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050c:	4a26      	ldr	r2, [pc, #152]	; (80005a8 <GPIO_PeriClockControl+0x1ac>)
 800050e:	f023 0304 	bic.w	r3, r3, #4
 8000512:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000514:	e040      	b.n	8000598 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4a26      	ldr	r2, [pc, #152]	; (80005b4 <GPIO_PeriClockControl+0x1b8>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d106      	bne.n	800052c <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 800051e:	4b22      	ldr	r3, [pc, #136]	; (80005a8 <GPIO_PeriClockControl+0x1ac>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a21      	ldr	r2, [pc, #132]	; (80005a8 <GPIO_PeriClockControl+0x1ac>)
 8000524:	f023 0308 	bic.w	r3, r3, #8
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
}
 800052a:	e035      	b.n	8000598 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	4a22      	ldr	r2, [pc, #136]	; (80005b8 <GPIO_PeriClockControl+0x1bc>)
 8000530:	4293      	cmp	r3, r2
 8000532:	d106      	bne.n	8000542 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000534:	4b1c      	ldr	r3, [pc, #112]	; (80005a8 <GPIO_PeriClockControl+0x1ac>)
 8000536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000538:	4a1b      	ldr	r2, [pc, #108]	; (80005a8 <GPIO_PeriClockControl+0x1ac>)
 800053a:	f023 0310 	bic.w	r3, r3, #16
 800053e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000540:	e02a      	b.n	8000598 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4a1d      	ldr	r2, [pc, #116]	; (80005bc <GPIO_PeriClockControl+0x1c0>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d106      	bne.n	8000558 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 800054a:	4b17      	ldr	r3, [pc, #92]	; (80005a8 <GPIO_PeriClockControl+0x1ac>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	4a16      	ldr	r2, [pc, #88]	; (80005a8 <GPIO_PeriClockControl+0x1ac>)
 8000550:	f023 0320 	bic.w	r3, r3, #32
 8000554:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000556:	e01f      	b.n	8000598 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	4a19      	ldr	r2, [pc, #100]	; (80005c0 <GPIO_PeriClockControl+0x1c4>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d106      	bne.n	800056e <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000560:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <GPIO_PeriClockControl+0x1ac>)
 8000562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000564:	4a10      	ldr	r2, [pc, #64]	; (80005a8 <GPIO_PeriClockControl+0x1ac>)
 8000566:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800056a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800056c:	e014      	b.n	8000598 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4a14      	ldr	r2, [pc, #80]	; (80005c4 <GPIO_PeriClockControl+0x1c8>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d106      	bne.n	8000584 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000576:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <GPIO_PeriClockControl+0x1ac>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a0b      	ldr	r2, [pc, #44]	; (80005a8 <GPIO_PeriClockControl+0x1ac>)
 800057c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000582:	e009      	b.n	8000598 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4a10      	ldr	r2, [pc, #64]	; (80005c8 <GPIO_PeriClockControl+0x1cc>)
 8000588:	4293      	cmp	r3, r2
 800058a:	d105      	bne.n	8000598 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <GPIO_PeriClockControl+0x1ac>)
 800058e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000590:	4a05      	ldr	r2, [pc, #20]	; (80005a8 <GPIO_PeriClockControl+0x1ac>)
 8000592:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000596:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	40020000 	.word	0x40020000
 80005a8:	40023800 	.word	0x40023800
 80005ac:	40020400 	.word	0x40020400
 80005b0:	40020800 	.word	0x40020800
 80005b4:	40020c00 	.word	0x40020c00
 80005b8:	40021000 	.word	0x40021000
 80005bc:	40021400 	.word	0x40021400
 80005c0:	40021800 	.word	0x40021800
 80005c4:	40021c00 	.word	0x40021c00
 80005c8:	40022000 	.word	0x40022000

080005cc <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2101      	movs	r1, #1
 80005de:	4618      	mov	r0, r3
 80005e0:	f7ff ff0c 	bl	80003fc <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	795b      	ldrb	r3, [r3, #5]
 80005e8:	2b03      	cmp	r3, #3
 80005ea:	d820      	bhi.n	800062e <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	795b      	ldrb	r3, [r3, #5]
 80005f0:	461a      	mov	r2, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	791b      	ldrb	r3, [r3, #4]
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	fa02 f303 	lsl.w	r3, r2, r3
 80005fc:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	681a      	ldr	r2, [r3, #0]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	791b      	ldrb	r3, [r3, #4]
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	2103      	movs	r1, #3
 800060c:	fa01 f303 	lsl.w	r3, r1, r3
 8000610:	43db      	mvns	r3, r3
 8000612:	4619      	mov	r1, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	400a      	ands	r2, r1
 800061a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	6819      	ldr	r1, [r3, #0]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	697a      	ldr	r2, [r7, #20]
 8000628:	430a      	orrs	r2, r1
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	e0cb      	b.n	80007c6 <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	795b      	ldrb	r3, [r3, #5]
 8000632:	2b04      	cmp	r3, #4
 8000634:	d117      	bne.n	8000666 <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000636:	4b4b      	ldr	r3, [pc, #300]	; (8000764 <GPIO_Init+0x198>)
 8000638:	68db      	ldr	r3, [r3, #12]
 800063a:	687a      	ldr	r2, [r7, #4]
 800063c:	7912      	ldrb	r2, [r2, #4]
 800063e:	4611      	mov	r1, r2
 8000640:	2201      	movs	r2, #1
 8000642:	408a      	lsls	r2, r1
 8000644:	4611      	mov	r1, r2
 8000646:	4a47      	ldr	r2, [pc, #284]	; (8000764 <GPIO_Init+0x198>)
 8000648:	430b      	orrs	r3, r1
 800064a:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800064c:	4b45      	ldr	r3, [pc, #276]	; (8000764 <GPIO_Init+0x198>)
 800064e:	689b      	ldr	r3, [r3, #8]
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	7912      	ldrb	r2, [r2, #4]
 8000654:	4611      	mov	r1, r2
 8000656:	2201      	movs	r2, #1
 8000658:	408a      	lsls	r2, r1
 800065a:	43d2      	mvns	r2, r2
 800065c:	4611      	mov	r1, r2
 800065e:	4a41      	ldr	r2, [pc, #260]	; (8000764 <GPIO_Init+0x198>)
 8000660:	400b      	ands	r3, r1
 8000662:	6093      	str	r3, [r2, #8]
 8000664:	e035      	b.n	80006d2 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	795b      	ldrb	r3, [r3, #5]
 800066a:	2b05      	cmp	r3, #5
 800066c:	d117      	bne.n	800069e <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800066e:	4b3d      	ldr	r3, [pc, #244]	; (8000764 <GPIO_Init+0x198>)
 8000670:	689b      	ldr	r3, [r3, #8]
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	7912      	ldrb	r2, [r2, #4]
 8000676:	4611      	mov	r1, r2
 8000678:	2201      	movs	r2, #1
 800067a:	408a      	lsls	r2, r1
 800067c:	4611      	mov	r1, r2
 800067e:	4a39      	ldr	r2, [pc, #228]	; (8000764 <GPIO_Init+0x198>)
 8000680:	430b      	orrs	r3, r1
 8000682:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000684:	4b37      	ldr	r3, [pc, #220]	; (8000764 <GPIO_Init+0x198>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	687a      	ldr	r2, [r7, #4]
 800068a:	7912      	ldrb	r2, [r2, #4]
 800068c:	4611      	mov	r1, r2
 800068e:	2201      	movs	r2, #1
 8000690:	408a      	lsls	r2, r1
 8000692:	43d2      	mvns	r2, r2
 8000694:	4611      	mov	r1, r2
 8000696:	4a33      	ldr	r2, [pc, #204]	; (8000764 <GPIO_Init+0x198>)
 8000698:	400b      	ands	r3, r1
 800069a:	60d3      	str	r3, [r2, #12]
 800069c:	e019      	b.n	80006d2 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	795b      	ldrb	r3, [r3, #5]
 80006a2:	2b06      	cmp	r3, #6
 80006a4:	d115      	bne.n	80006d2 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006a6:	4b2f      	ldr	r3, [pc, #188]	; (8000764 <GPIO_Init+0x198>)
 80006a8:	689b      	ldr	r3, [r3, #8]
 80006aa:	687a      	ldr	r2, [r7, #4]
 80006ac:	7912      	ldrb	r2, [r2, #4]
 80006ae:	4611      	mov	r1, r2
 80006b0:	2201      	movs	r2, #1
 80006b2:	408a      	lsls	r2, r1
 80006b4:	4611      	mov	r1, r2
 80006b6:	4a2b      	ldr	r2, [pc, #172]	; (8000764 <GPIO_Init+0x198>)
 80006b8:	430b      	orrs	r3, r1
 80006ba:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006bc:	4b29      	ldr	r3, [pc, #164]	; (8000764 <GPIO_Init+0x198>)
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	7912      	ldrb	r2, [r2, #4]
 80006c4:	4611      	mov	r1, r2
 80006c6:	2201      	movs	r2, #1
 80006c8:	408a      	lsls	r2, r1
 80006ca:	4611      	mov	r1, r2
 80006cc:	4a25      	ldr	r2, [pc, #148]	; (8000764 <GPIO_Init+0x198>)
 80006ce:	430b      	orrs	r3, r1
 80006d0:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	791b      	ldrb	r3, [r3, #4]
 80006d6:	089b      	lsrs	r3, r3, #2
 80006d8:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	791b      	ldrb	r3, [r3, #4]
 80006de:	f003 0303 	and.w	r3, r3, #3
 80006e2:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a1f      	ldr	r2, [pc, #124]	; (8000768 <GPIO_Init+0x19c>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d04e      	beq.n	800078c <GPIO_Init+0x1c0>
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a1e      	ldr	r2, [pc, #120]	; (800076c <GPIO_Init+0x1a0>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d032      	beq.n	800075e <GPIO_Init+0x192>
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a1c      	ldr	r2, [pc, #112]	; (8000770 <GPIO_Init+0x1a4>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d02b      	beq.n	800075a <GPIO_Init+0x18e>
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a1b      	ldr	r2, [pc, #108]	; (8000774 <GPIO_Init+0x1a8>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d024      	beq.n	8000756 <GPIO_Init+0x18a>
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a19      	ldr	r2, [pc, #100]	; (8000778 <GPIO_Init+0x1ac>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d01d      	beq.n	8000752 <GPIO_Init+0x186>
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a18      	ldr	r2, [pc, #96]	; (800077c <GPIO_Init+0x1b0>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d016      	beq.n	800074e <GPIO_Init+0x182>
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a16      	ldr	r2, [pc, #88]	; (8000780 <GPIO_Init+0x1b4>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d00f      	beq.n	800074a <GPIO_Init+0x17e>
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a15      	ldr	r2, [pc, #84]	; (8000784 <GPIO_Init+0x1b8>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d008      	beq.n	8000746 <GPIO_Init+0x17a>
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a13      	ldr	r2, [pc, #76]	; (8000788 <GPIO_Init+0x1bc>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d101      	bne.n	8000742 <GPIO_Init+0x176>
 800073e:	2308      	movs	r3, #8
 8000740:	e025      	b.n	800078e <GPIO_Init+0x1c2>
 8000742:	2300      	movs	r3, #0
 8000744:	e023      	b.n	800078e <GPIO_Init+0x1c2>
 8000746:	2307      	movs	r3, #7
 8000748:	e021      	b.n	800078e <GPIO_Init+0x1c2>
 800074a:	2306      	movs	r3, #6
 800074c:	e01f      	b.n	800078e <GPIO_Init+0x1c2>
 800074e:	2305      	movs	r3, #5
 8000750:	e01d      	b.n	800078e <GPIO_Init+0x1c2>
 8000752:	2304      	movs	r3, #4
 8000754:	e01b      	b.n	800078e <GPIO_Init+0x1c2>
 8000756:	2303      	movs	r3, #3
 8000758:	e019      	b.n	800078e <GPIO_Init+0x1c2>
 800075a:	2302      	movs	r3, #2
 800075c:	e017      	b.n	800078e <GPIO_Init+0x1c2>
 800075e:	2301      	movs	r3, #1
 8000760:	e015      	b.n	800078e <GPIO_Init+0x1c2>
 8000762:	bf00      	nop
 8000764:	40013c00 	.word	0x40013c00
 8000768:	40020000 	.word	0x40020000
 800076c:	40020400 	.word	0x40020400
 8000770:	40020800 	.word	0x40020800
 8000774:	40020c00 	.word	0x40020c00
 8000778:	40021000 	.word	0x40021000
 800077c:	40021400 	.word	0x40021400
 8000780:	40021800 	.word	0x40021800
 8000784:	40021c00 	.word	0x40021c00
 8000788:	40022000 	.word	0x40022000
 800078c:	2300      	movs	r3, #0
 800078e:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000790:	4b59      	ldr	r3, [pc, #356]	; (80008f8 <GPIO_Init+0x32c>)
 8000792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000794:	4a58      	ldr	r2, [pc, #352]	; (80008f8 <GPIO_Init+0x32c>)
 8000796:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800079a:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 800079c:	7c7a      	ldrb	r2, [r7, #17]
 800079e:	7cbb      	ldrb	r3, [r7, #18]
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	fa02 f103 	lsl.w	r1, r2, r3
 80007a6:	4a55      	ldr	r2, [pc, #340]	; (80008fc <GPIO_Init+0x330>)
 80007a8:	7cfb      	ldrb	r3, [r7, #19]
 80007aa:	3302      	adds	r3, #2
 80007ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80007b0:	4b53      	ldr	r3, [pc, #332]	; (8000900 <GPIO_Init+0x334>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	7912      	ldrb	r2, [r2, #4]
 80007b8:	4611      	mov	r1, r2
 80007ba:	2201      	movs	r2, #1
 80007bc:	408a      	lsls	r2, r1
 80007be:	4611      	mov	r1, r2
 80007c0:	4a4f      	ldr	r2, [pc, #316]	; (8000900 <GPIO_Init+0x334>)
 80007c2:	430b      	orrs	r3, r1
 80007c4:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	799b      	ldrb	r3, [r3, #6]
 80007ca:	461a      	mov	r2, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	791b      	ldrb	r3, [r3, #4]
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	fa02 f303 	lsl.w	r3, r2, r3
 80007d6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	689a      	ldr	r2, [r3, #8]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	791b      	ldrb	r3, [r3, #4]
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	2103      	movs	r1, #3
 80007e6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ea:	43db      	mvns	r3, r3
 80007ec:	4619      	mov	r1, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	400a      	ands	r2, r1
 80007f4:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	6899      	ldr	r1, [r3, #8]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	697a      	ldr	r2, [r7, #20]
 8000802:	430a      	orrs	r2, r1
 8000804:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	79db      	ldrb	r3, [r3, #7]
 800080a:	461a      	mov	r2, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	791b      	ldrb	r3, [r3, #4]
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	fa02 f303 	lsl.w	r3, r2, r3
 8000816:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	68da      	ldr	r2, [r3, #12]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	791b      	ldrb	r3, [r3, #4]
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	2103      	movs	r1, #3
 8000826:	fa01 f303 	lsl.w	r3, r1, r3
 800082a:	43db      	mvns	r3, r3
 800082c:	4619      	mov	r1, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	400a      	ands	r2, r1
 8000834:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	68d9      	ldr	r1, [r3, #12]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	697a      	ldr	r2, [r7, #20]
 8000842:	430a      	orrs	r2, r1
 8000844:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	7a1b      	ldrb	r3, [r3, #8]
 800084a:	461a      	mov	r2, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	791b      	ldrb	r3, [r3, #4]
 8000850:	fa02 f303 	lsl.w	r3, r2, r3
 8000854:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	685a      	ldr	r2, [r3, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	791b      	ldrb	r3, [r3, #4]
 8000860:	4619      	mov	r1, r3
 8000862:	2301      	movs	r3, #1
 8000864:	408b      	lsls	r3, r1
 8000866:	43db      	mvns	r3, r3
 8000868:	4619      	mov	r1, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	400a      	ands	r2, r1
 8000870:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	6859      	ldr	r1, [r3, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	697a      	ldr	r2, [r7, #20]
 800087e:	430a      	orrs	r2, r1
 8000880:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	795b      	ldrb	r3, [r3, #5]
 8000886:	2b02      	cmp	r3, #2
 8000888:	d131      	bne.n	80008ee <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	791b      	ldrb	r3, [r3, #4]
 800088e:	08db      	lsrs	r3, r3, #3
 8000890:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	791b      	ldrb	r3, [r3, #4]
 8000896:	f003 0307 	and.w	r3, r3, #7
 800089a:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	7c3a      	ldrb	r2, [r7, #16]
 80008a2:	3208      	adds	r2, #8
 80008a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	220f      	movs	r2, #15
 80008ae:	fa02 f303 	lsl.w	r3, r2, r3
 80008b2:	43db      	mvns	r3, r3
 80008b4:	4618      	mov	r0, r3
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	7c3a      	ldrb	r2, [r7, #16]
 80008bc:	4001      	ands	r1, r0
 80008be:	3208      	adds	r2, #8
 80008c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	7c3a      	ldrb	r2, [r7, #16]
 80008ca:	3208      	adds	r2, #8
 80008cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	7a5b      	ldrb	r3, [r3, #9]
 80008d4:	461a      	mov	r2, r3
 80008d6:	7bfb      	ldrb	r3, [r7, #15]
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	4618      	mov	r0, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	7c3a      	ldrb	r2, [r7, #16]
 80008e6:	4301      	orrs	r1, r0
 80008e8:	3208      	adds	r2, #8
 80008ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 80008ee:	bf00      	nop
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40013800 	.word	0x40013800
 8000900:	40013c00 	.word	0x40013c00

08000904 <I2C_GenerateStopCondition>:
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
}


void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	601a      	str	r2, [r3, #0]
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <I2C_ExecuteAddressPhaseWrite>:



static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	460b      	mov	r3, r1
 800092e:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000930:	78fb      	ldrb	r3, [r7, #3]
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 8000936:	78fb      	ldrb	r3, [r7, #3]
 8000938:	f023 0301 	bic.w	r3, r3, #1
 800093c:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 800093e:	78fa      	ldrb	r2, [r7, #3]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	611a      	str	r2, [r3, #16]
}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <I2C_ExecuteAddressPhaseRead>:

static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	460b      	mov	r3, r1
 800095a:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 800095c:	78fb      	ldrb	r3, [r7, #3]
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; //SlaveAddr is Slave address + r/nw bit=1
 8000962:	78fb      	ldrb	r3, [r7, #3]
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 800096a:	78fa      	ldrb	r2, [r7, #3]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	611a      	str	r2, [r3, #16]
}
 8000970:	bf00      	nop
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <I2C_ClearADDRFlag>:



static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle )
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	2b00      	cmp	r3, #0
 8000990:	d01f      	beq.n	80009d2 <I2C_ClearADDRFlag+0x56>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	7f1b      	ldrb	r3, [r3, #28]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d112      	bne.n	80009c0 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize  == 1)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6a1b      	ldr	r3, [r3, #32]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d11f      	bne.n	80009e2 <I2C_ClearADDRFlag+0x66>
			{
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f000 f9af 	bl	8000d0c <I2C_ManageAcking>

				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	695b      	ldr	r3, [r3, #20]
 80009b4:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}


}
 80009be:	e010      	b.n	80009e2 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	60fb      	str	r3, [r7, #12]
}
 80009d0:	e007      	b.n	80009e2 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	695b      	ldr	r3, [r3, #20]
 80009d8:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	60fb      	str	r3, [r7, #12]
}
 80009e2:	bf00      	nop
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <I2C_MasterHandleTXEInterrupt>:

static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle )
{
 80009ea:	b480      	push	{r7}
 80009ec:	b083      	sub	sp, #12
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]

	if(pI2CHandle->TxLen > 0)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d00f      	beq.n	8000a1a <I2C_MasterHandleTXEInterrupt+0x30>
	{
		//1. load the data in to DR
		pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	68db      	ldr	r3, [r3, #12]
 80009fe:	781a      	ldrb	r2, [r3, #0]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	611a      	str	r2, [r3, #16]

		//2. decrement the TxLen
		pI2CHandle->TxLen--;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	695b      	ldr	r3, [r3, #20]
 8000a0a:	1e5a      	subs	r2, r3, #1
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	615a      	str	r2, [r3, #20]

		//3. Increment the buffer address
		pI2CHandle->pTxBuffer++;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	1c5a      	adds	r2, r3, #1
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	60da      	str	r2, [r3, #12]

	}

}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <I2C_MasterHandleRXNEInterrupt>:

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle )
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b082      	sub	sp, #8
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
	//We have to do the data reception
	if(pI2CHandle->RxSize == 1)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6a1b      	ldr	r3, [r3, #32]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d10b      	bne.n	8000a4e <I2C_MasterHandleRXNEInterrupt+0x28>
	{
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	691a      	ldr	r2, [r3, #16]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	691b      	ldr	r3, [r3, #16]
 8000a40:	b2d2      	uxtb	r2, r2
 8000a42:	701a      	strb	r2, [r3, #0]
		pI2CHandle->RxLen--;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	1e5a      	subs	r2, r3, #1
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	619a      	str	r2, [r3, #24]

	}


	if(pI2CHandle->RxSize > 1)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6a1b      	ldr	r3, [r3, #32]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d91a      	bls.n	8000a8c <I2C_MasterHandleRXNEInterrupt+0x66>
	{
		if(pI2CHandle->RxLen == 2)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	2b02      	cmp	r3, #2
 8000a5c:	d105      	bne.n	8000a6a <I2C_MasterHandleRXNEInterrupt+0x44>
		{
			//clear the ack bit
			I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2100      	movs	r1, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f000 f951 	bl	8000d0c <I2C_ManageAcking>
		}

			//read DR
			*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	691a      	ldr	r2, [r3, #16]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	691b      	ldr	r3, [r3, #16]
 8000a74:	b2d2      	uxtb	r2, r2
 8000a76:	701a      	strb	r2, [r3, #0]
			pI2CHandle->pRxBuffer++;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	691b      	ldr	r3, [r3, #16]
 8000a7c:	1c5a      	adds	r2, r3, #1
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	611a      	str	r2, [r3, #16]
			pI2CHandle->RxLen--;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	699b      	ldr	r3, [r3, #24]
 8000a86:	1e5a      	subs	r2, r3, #1
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	619a      	str	r2, [r3, #24]
	}

	if(pI2CHandle->RxLen == 0 )
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d110      	bne.n	8000ab6 <I2C_MasterHandleRXNEInterrupt+0x90>
	{
		//close the I2C data reception and notify the application

		//1. generate the stop condition
		if(pI2CHandle->Sr == I2C_DISABLE_SR)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d104      	bne.n	8000aa8 <I2C_MasterHandleRXNEInterrupt+0x82>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff ff2e 	bl	8000904 <I2C_GenerateStopCondition>

		//2 . Close the I2C rx
		I2C_CloseReceiveData(pI2CHandle);
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f000 faad 	bl	8001008 <I2C_CloseReceiveData>

		//3. Notify the application
		I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_RX_CMPLT);
 8000aae:	2101      	movs	r1, #1
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f7ff fc2b 	bl	800030c <I2C_ApplicationEventCallback>
	}
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <I2C_PeripheralControl>:
 *
 * @Note              -

 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b083      	sub	sp, #12
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
 8000ac6:	460b      	mov	r3, r1
 8000ac8:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000aca:	78fb      	ldrb	r3, [r7, #3]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d106      	bne.n	8000ade <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f043 0201 	orr.w	r2, r3, #1
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << 0);
	}

}
 8000adc:	e005      	b.n	8000aea <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f023 0201 	bic.w	r2, r3, #1
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	601a      	str	r2, [r3, #0]
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
	...

08000af8 <I2C_PeriClockControl>:
 *
 * @Note              -

 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	460b      	mov	r3, r1
 8000b02:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000b04:	78fb      	ldrb	r3, [r7, #3]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d120      	bne.n	8000b4c <I2C_PeriClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4a22      	ldr	r2, [pc, #136]	; (8000b98 <I2C_PeriClockControl+0xa0>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d106      	bne.n	8000b20 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8000b12:	4b22      	ldr	r3, [pc, #136]	; (8000b9c <I2C_PeriClockControl+0xa4>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	4a21      	ldr	r2, [pc, #132]	; (8000b9c <I2C_PeriClockControl+0xa4>)
 8000b18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b1c:	6413      	str	r3, [r2, #64]	; 0x40
        {
            I2C3_PCLK_DI();
        }
	}

}
 8000b1e:	e035      	b.n	8000b8c <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C2)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a1f      	ldr	r2, [pc, #124]	; (8000ba0 <I2C_PeriClockControl+0xa8>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d106      	bne.n	8000b36 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000b28:	4b1c      	ldr	r3, [pc, #112]	; (8000b9c <I2C_PeriClockControl+0xa4>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2c:	4a1b      	ldr	r2, [pc, #108]	; (8000b9c <I2C_PeriClockControl+0xa4>)
 8000b2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b32:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b34:	e02a      	b.n	8000b8c <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C3)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4a1a      	ldr	r2, [pc, #104]	; (8000ba4 <I2C_PeriClockControl+0xac>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d126      	bne.n	8000b8c <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8000b3e:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <I2C_PeriClockControl+0xa4>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	4a16      	ldr	r2, [pc, #88]	; (8000b9c <I2C_PeriClockControl+0xa4>)
 8000b44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b48:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b4a:	e01f      	b.n	8000b8c <I2C_PeriClockControl+0x94>
        if(pI2Cx == I2C1)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <I2C_PeriClockControl+0xa0>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d106      	bne.n	8000b62 <I2C_PeriClockControl+0x6a>
            I2C1_PCLK_DI();
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <I2C_PeriClockControl+0xa4>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b58:	4a10      	ldr	r2, [pc, #64]	; (8000b9c <I2C_PeriClockControl+0xa4>)
 8000b5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000b5e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b60:	e014      	b.n	8000b8c <I2C_PeriClockControl+0x94>
        }else if (pI2Cx == I2C2)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a0e      	ldr	r2, [pc, #56]	; (8000ba0 <I2C_PeriClockControl+0xa8>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d106      	bne.n	8000b78 <I2C_PeriClockControl+0x80>
            I2C2_PCLK_DI();
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <I2C_PeriClockControl+0xa4>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	4a0b      	ldr	r2, [pc, #44]	; (8000b9c <I2C_PeriClockControl+0xa4>)
 8000b70:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000b74:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b76:	e009      	b.n	8000b8c <I2C_PeriClockControl+0x94>
        }else if (pI2Cx == I2C3)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <I2C_PeriClockControl+0xac>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d105      	bne.n	8000b8c <I2C_PeriClockControl+0x94>
            I2C3_PCLK_DI();
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <I2C_PeriClockControl+0xa4>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	4a05      	ldr	r2, [pc, #20]	; (8000b9c <I2C_PeriClockControl+0xa4>)
 8000b86:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000b8a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	40005400 	.word	0x40005400
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40005800 	.word	0x40005800
 8000ba4:	40005c00 	.word	0x40005c00

08000ba8 <I2C_Init>:
 *
 * @Note              -

 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2101      	movs	r1, #1
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff ff9c 	bl	8000af8 <I2C_PeriClockControl>

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	7a5b      	ldrb	r3, [r3, #9]
 8000bc4:	029b      	lsls	r3, r3, #10
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	68fa      	ldr	r2, [r7, #12]
 8000bd4:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U ;
 8000bda:	f000 fb3d 	bl	8001258 <RCC_GetPCLK1Value>
 8000bde:	4603      	mov	r3, r0
 8000be0:	4a47      	ldr	r2, [pc, #284]	; (8000d00 <I2C_Init+0x158>)
 8000be2:	fba2 2303 	umull	r2, r3, r2, r3
 8000be6:	0c9b      	lsrs	r3, r3, #18
 8000be8:	68fa      	ldr	r2, [r7, #12]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000bf8:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	7a1b      	ldrb	r3, [r3, #8]
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	461a      	mov	r2, r3
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c12:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	68fa      	ldr	r2, [r7, #12]
 8000c1a:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	4a36      	ldr	r2, [pc, #216]	; (8000d04 <I2C_Init+0x15c>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d80f      	bhi.n	8000c4e <I2C_Init+0xa6>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000c2e:	f000 fb13 	bl	8001258 <RCC_GetPCLK1Value>
 8000c32:	4602      	mov	r2, r0
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3e:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000c40:	897b      	ldrh	r3, [r7, #10]
 8000c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	e02d      	b.n	8000caa <I2C_Init+0x102>
	}else
	{
		//mode is fast mode
		tempreg |= ( 1 << 15);
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c54:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	7a9b      	ldrb	r3, [r3, #10]
 8000c5a:	039b      	lsls	r3, r3, #14
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	7a9b      	ldrb	r3, [r3, #10]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d10b      	bne.n	8000c84 <I2C_Init+0xdc>
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000c6c:	f000 faf4 	bl	8001258 <RCC_GetPCLK1Value>
 8000c70:	4601      	mov	r1, r0
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	685a      	ldr	r2, [r3, #4]
 8000c76:	4613      	mov	r3, r2
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	4413      	add	r3, r2
 8000c7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c80:	817b      	strh	r3, [r7, #10]
 8000c82:	e00c      	b.n	8000c9e <I2C_Init+0xf6>
		}else
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000c84:	f000 fae8 	bl	8001258 <RCC_GetPCLK1Value>
 8000c88:	4601      	mov	r1, r0
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	685a      	ldr	r2, [r3, #4]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	4413      	add	r3, r2
 8000c94:	009a      	lsls	r2, r3, #2
 8000c96:	4413      	add	r3, r2
 8000c98:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c9c:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000c9e:	897b      	ldrh	r3, [r7, #10]
 8000ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ca4:	68fa      	ldr	r2, [r7, #12]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	4a13      	ldr	r2, [pc, #76]	; (8000d04 <I2C_Init+0x15c>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d809      	bhi.n	8000cd0 <I2C_Init+0x128>
	{
		//mode is standard mode

		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 8000cbc:	f000 facc 	bl	8001258 <RCC_GetPCLK1Value>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	4a0f      	ldr	r2, [pc, #60]	; (8000d00 <I2C_Init+0x158>)
 8000cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc8:	0c9b      	lsrs	r3, r3, #18
 8000cca:	3301      	adds	r3, #1
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	e00d      	b.n	8000cec <I2C_Init+0x144>

	}else
	{
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 8000cd0:	f000 fac2 	bl	8001258 <RCC_GetPCLK1Value>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000cda:	fb02 f303 	mul.w	r3, r2, r3
 8000cde:	0a5b      	lsrs	r3, r3, #9
 8000ce0:	4a09      	ldr	r2, [pc, #36]	; (8000d08 <I2C_Init+0x160>)
 8000ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce6:	09db      	lsrs	r3, r3, #7
 8000ce8:	3301      	adds	r3, #1
 8000cea:	60fb      	str	r3, [r7, #12]

	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	68fa      	ldr	r2, [r7, #12]
 8000cf2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000cf6:	621a      	str	r2, [r3, #32]

}
 8000cf8:	bf00      	nop
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	431bde83 	.word	0x431bde83
 8000d04:	000186a0 	.word	0x000186a0
 8000d08:	00044b83 	.word	0x00044b83

08000d0c <I2C_ManageAcking>:

}


void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	460b      	mov	r3, r1
 8000d16:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 8000d18:	78fb      	ldrb	r3, [r7, #3]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d106      	bne.n	8000d2c <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 8000d2a:	e005      	b.n	8000d38 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	601a      	str	r2, [r3, #0]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <I2C_IRQInterruptConfig>:
 *
 * @Note              -

 */
void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	460a      	mov	r2, r1
 8000d4e:	71fb      	strb	r3, [r7, #7]
 8000d50:	4613      	mov	r3, r2
 8000d52:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE)
 8000d54:	79bb      	ldrb	r3, [r7, #6]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d133      	bne.n	8000dc2 <I2C_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	2b1f      	cmp	r3, #31
 8000d5e:	d80a      	bhi.n	8000d76 <I2C_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 8000d60:	4b35      	ldr	r3, [pc, #212]	; (8000e38 <I2C_IRQInterruptConfig+0xf4>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	79fa      	ldrb	r2, [r7, #7]
 8000d66:	2101      	movs	r1, #1
 8000d68:	fa01 f202 	lsl.w	r2, r1, r2
 8000d6c:	4611      	mov	r1, r2
 8000d6e:	4a32      	ldr	r2, [pc, #200]	; (8000e38 <I2C_IRQInterruptConfig+0xf4>)
 8000d70:	430b      	orrs	r3, r1
 8000d72:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
 8000d74:	e059      	b.n	8000e2a <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	2b1f      	cmp	r3, #31
 8000d7a:	d90f      	bls.n	8000d9c <I2C_IRQInterruptConfig+0x58>
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	2b3f      	cmp	r3, #63	; 0x3f
 8000d80:	d80c      	bhi.n	8000d9c <I2C_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8000d82:	4b2e      	ldr	r3, [pc, #184]	; (8000e3c <I2C_IRQInterruptConfig+0xf8>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	79fa      	ldrb	r2, [r7, #7]
 8000d88:	f002 021f 	and.w	r2, r2, #31
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d92:	4611      	mov	r1, r2
 8000d94:	4a29      	ldr	r2, [pc, #164]	; (8000e3c <I2C_IRQInterruptConfig+0xf8>)
 8000d96:	430b      	orrs	r3, r1
 8000d98:	6013      	str	r3, [r2, #0]
 8000d9a:	e046      	b.n	8000e2a <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	2b3f      	cmp	r3, #63	; 0x3f
 8000da0:	d943      	bls.n	8000e2a <I2C_IRQInterruptConfig+0xe6>
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	2b5f      	cmp	r3, #95	; 0x5f
 8000da6:	d840      	bhi.n	8000e2a <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ISER3 |= ( 1 << (IRQNumber % 64) );
 8000da8:	4b25      	ldr	r3, [pc, #148]	; (8000e40 <I2C_IRQInterruptConfig+0xfc>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	79fa      	ldrb	r2, [r7, #7]
 8000dae:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000db2:	2101      	movs	r1, #1
 8000db4:	fa01 f202 	lsl.w	r2, r1, r2
 8000db8:	4611      	mov	r1, r2
 8000dba:	4a21      	ldr	r2, [pc, #132]	; (8000e40 <I2C_IRQInterruptConfig+0xfc>)
 8000dbc:	430b      	orrs	r3, r1
 8000dbe:	6013      	str	r3, [r2, #0]
}
 8000dc0:	e033      	b.n	8000e2a <I2C_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	2b1f      	cmp	r3, #31
 8000dc6:	d80a      	bhi.n	8000dde <I2C_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8000dc8:	4b1e      	ldr	r3, [pc, #120]	; (8000e44 <I2C_IRQInterruptConfig+0x100>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	79fa      	ldrb	r2, [r7, #7]
 8000dce:	2101      	movs	r1, #1
 8000dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8000dd4:	4611      	mov	r1, r2
 8000dd6:	4a1b      	ldr	r2, [pc, #108]	; (8000e44 <I2C_IRQInterruptConfig+0x100>)
 8000dd8:	430b      	orrs	r3, r1
 8000dda:	6013      	str	r3, [r2, #0]
}
 8000ddc:	e025      	b.n	8000e2a <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	2b1f      	cmp	r3, #31
 8000de2:	d90f      	bls.n	8000e04 <I2C_IRQInterruptConfig+0xc0>
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	2b3f      	cmp	r3, #63	; 0x3f
 8000de8:	d80c      	bhi.n	8000e04 <I2C_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 8000dea:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <I2C_IRQInterruptConfig+0x104>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	79fa      	ldrb	r2, [r7, #7]
 8000df0:	f002 021f 	and.w	r2, r2, #31
 8000df4:	2101      	movs	r1, #1
 8000df6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <I2C_IRQInterruptConfig+0x104>)
 8000dfe:	430b      	orrs	r3, r1
 8000e00:	6013      	str	r3, [r2, #0]
 8000e02:	e012      	b.n	8000e2a <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 6 && IRQNumber < 96 )
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	2b05      	cmp	r3, #5
 8000e08:	d90f      	bls.n	8000e2a <I2C_IRQInterruptConfig+0xe6>
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	2b5f      	cmp	r3, #95	; 0x5f
 8000e0e:	d80c      	bhi.n	8000e2a <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
 8000e10:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <I2C_IRQInterruptConfig+0x108>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	79fa      	ldrb	r2, [r7, #7]
 8000e16:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e20:	4611      	mov	r1, r2
 8000e22:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <I2C_IRQInterruptConfig+0x108>)
 8000e24:	430b      	orrs	r3, r1
 8000e26:	6013      	str	r3, [r2, #0]
}
 8000e28:	e7ff      	b.n	8000e2a <I2C_IRQInterruptConfig+0xe6>
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000e100 	.word	0xe000e100
 8000e3c:	e000e104 	.word	0xe000e104
 8000e40:	e000e10c 	.word	0xe000e10c
 8000e44:	e000e180 	.word	0xe000e180
 8000e48:	e000e184 	.word	0xe000e184
 8000e4c:	e000e18c 	.word	0xe000e18c

08000e50 <I2C_EV_IRQHandling>:

	return busystate;
}

void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	//Interrupt handling for both master and slave mode of a device

	uint32_t temp1, temp2, temp3;

	temp1   = pI2CHandle->pI2Cx->CR2 & ( 1 << I2C_CR2_ITEVTEN) ;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e62:	617b      	str	r3, [r7, #20]
	temp2   = pI2CHandle->pI2Cx->CR2 & ( 1 << I2C_CR2_ITBUFEN) ;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e6e:	613b      	str	r3, [r7, #16]

	temp3  = pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_SB);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	60fb      	str	r3, [r7, #12]
	//1. Handle For interrupt generated by SB event
	//	Note : SB flag is only applicable in Master mode
	if(temp1 && temp3)
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d01b      	beq.n	8000eba <I2C_EV_IRQHandling+0x6a>
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d018      	beq.n	8000eba <I2C_EV_IRQHandling+0x6a>
	{
		//The interrupt is generated because of SB event
		//This block will not be executed in slave mode because for slave SB is always zero
		//In this block lets executed the address phase
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	7f1b      	ldrb	r3, [r3, #28]
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d108      	bne.n	8000ea2 <I2C_EV_IRQHandling+0x52>
		{
			I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,pI2CHandle->DevAddr);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	7f5b      	ldrb	r3, [r3, #29]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4610      	mov	r0, r2
 8000e9c:	f7ff fd42 	bl	8000924 <I2C_ExecuteAddressPhaseWrite>
 8000ea0:	e00b      	b.n	8000eba <I2C_EV_IRQHandling+0x6a>
		}else if (pI2CHandle->TxRxState == I2C_BUSY_IN_RX )
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	7f1b      	ldrb	r3, [r3, #28]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d107      	bne.n	8000eba <I2C_EV_IRQHandling+0x6a>
		{
			I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx,pI2CHandle->DevAddr);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	7f5b      	ldrb	r3, [r3, #29]
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	f7ff fd4b 	bl	8000950 <I2C_ExecuteAddressPhaseRead>
		}
	}

	temp3  = pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_ADDR);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	695b      	ldr	r3, [r3, #20]
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	60fb      	str	r3, [r7, #12]
	//2. Handle For interrupt generated by ADDR event
	//Note : When master mode : Address is sent
	//		 When Slave mode   : Address matched with own address
	if(temp1 && temp3)
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d005      	beq.n	8000ed8 <I2C_EV_IRQHandling+0x88>
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d002      	beq.n	8000ed8 <I2C_EV_IRQHandling+0x88>
	{
		// interrupt is generated because of ADDR event
		I2C_ClearADDRFlag(pI2CHandle);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff fd52 	bl	800097c <I2C_ClearADDRFlag>
	}

	temp3  = pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_BTF);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	f003 0304 	and.w	r3, r3, #4
 8000ee2:	60fb      	str	r3, [r7, #12]
	//3. Handle For interrupt generated by BTF(Byte Transfer Finished) event
	if(temp1 && temp3)
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d022      	beq.n	8000f30 <I2C_EV_IRQHandling+0xe0>
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d01f      	beq.n	8000f30 <I2C_EV_IRQHandling+0xe0>
	{
		//BTF flag is set
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	7f1b      	ldrb	r3, [r3, #28]
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d11b      	bne.n	8000f30 <I2C_EV_IRQHandling+0xe0>
		{
			//make sure that TXE is also set .
			if(pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_TXE) )
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d014      	beq.n	8000f30 <I2C_EV_IRQHandling+0xe0>
			{
				//BTF, TXE = 1
				if(pI2CHandle->TxLen == 0 )
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d110      	bne.n	8000f30 <I2C_EV_IRQHandling+0xe0>
				{
					//1. generate the STOP condition
					if(pI2CHandle->Sr == I2C_DISABLE_SR)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d104      	bne.n	8000f22 <I2C_EV_IRQHandling+0xd2>
						I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fcf1 	bl	8000904 <I2C_GenerateStopCondition>

					//2. reset all the member elements of the handle structure.
					I2C_CloseSendData(pI2CHandle);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f000 f89e 	bl	8001064 <I2C_CloseSendData>

					//3. notify the application about transmission complete
					I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_TX_CMPLT);
 8000f28:	2100      	movs	r1, #0
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff f9ee 	bl	800030c <I2C_ApplicationEventCallback>
		{
			;
		}
	}

	temp3  = pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_STOPF);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	f003 0310 	and.w	r3, r3, #16
 8000f3a:	60fb      	str	r3, [r7, #12]
	//4. Handle For interrupt generated by STOPF event
	// Note : Stop detection flag is applicable only slave mode . For master this flag will never be set
	//The below code block will not be executed by the master since STOPF will not set in master mode
	if(temp1 && temp3)
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d00c      	beq.n	8000f5c <I2C_EV_IRQHandling+0x10c>
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d009      	beq.n	8000f5c <I2C_EV_IRQHandling+0x10c>
	{
		//STOF flag is set
		//Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )

		pI2CHandle->pI2Cx->CR1 |= 0x0000;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	6812      	ldr	r2, [r2, #0]
 8000f52:	601a      	str	r2, [r3, #0]

		//Notify the application that STOP is detected
		I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_STOP);
 8000f54:	2102      	movs	r1, #2
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff f9d8 	bl	800030c <I2C_ApplicationEventCallback>
	}


	temp3  = pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_TXE);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f66:	60fb      	str	r3, [r7, #12]
	//5. Handle For interrupt generated by TXE event
	if(temp1 && temp2 && temp3)
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d01f      	beq.n	8000fae <I2C_EV_IRQHandling+0x15e>
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d01c      	beq.n	8000fae <I2C_EV_IRQHandling+0x15e>
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d019      	beq.n	8000fae <I2C_EV_IRQHandling+0x15e>
	{
		//Check for device mode
		if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	f003 0301 	and.w	r3, r3, #1
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d007      	beq.n	8000f98 <I2C_EV_IRQHandling+0x148>
		{
			//TXE flag is set
			//We have to do the data transmission
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	7f1b      	ldrb	r3, [r3, #28]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d10e      	bne.n	8000fae <I2C_EV_IRQHandling+0x15e>
			{
				I2C_MasterHandleTXEInterrupt(pI2CHandle);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff fd2a 	bl	80009ea <I2C_MasterHandleTXEInterrupt>
 8000f96:	e00a      	b.n	8000fae <I2C_EV_IRQHandling+0x15e>
			}
		}else
		{
			//slave
			//make sure that the slave is really in transmitter mode
		    if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_TRA))
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	f003 0304 	and.w	r3, r3, #4
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <I2C_EV_IRQHandling+0x15e>
		    {
		    	I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_DATA_REQ);
 8000fa6:	2108      	movs	r1, #8
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff f9af 	bl	800030c <I2C_ApplicationEventCallback>
		    }
		}
	}

	temp3  = pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_RXNE);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	695b      	ldr	r3, [r3, #20]
 8000fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fb8:	60fb      	str	r3, [r7, #12]
	//6. Handle For interrupt generated by RXNE event
	if(temp1 && temp2 && temp3)
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d01f      	beq.n	8001000 <I2C_EV_IRQHandling+0x1b0>
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d01c      	beq.n	8001000 <I2C_EV_IRQHandling+0x1b0>
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d019      	beq.n	8001000 <I2C_EV_IRQHandling+0x1b0>
	{
		//check device mode .
		if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d007      	beq.n	8000fea <I2C_EV_IRQHandling+0x19a>
		{
			//The device is master

			//RXNE flag is set
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	7f1b      	ldrb	r3, [r3, #28]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d10e      	bne.n	8001000 <I2C_EV_IRQHandling+0x1b0>
			{
				I2C_MasterHandleRXNEInterrupt(pI2CHandle);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff fd1f 	bl	8000a26 <I2C_MasterHandleRXNEInterrupt>
			{
				I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_DATA_RCV);
			}
		}
	}
}
 8000fe8:	e00a      	b.n	8001000 <I2C_EV_IRQHandling+0x1b0>
			if(!(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_TRA)))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	f003 0304 	and.w	r3, r3, #4
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d103      	bne.n	8001000 <I2C_EV_IRQHandling+0x1b0>
				I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_DATA_RCV);
 8000ff8:	2109      	movs	r1, #9
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff f986 	bl	800030c <I2C_ApplicationEventCallback>
}
 8001000:	bf00      	nop
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <I2C_CloseReceiveData>:


void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	//Implement the code to disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800101e:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITEVFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITEVTEN);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	685a      	ldr	r2, [r3, #4]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800102e:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pRxBuffer = NULL;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
	pI2CHandle->RxLen = 0;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	619a      	str	r2, [r3, #24]
	pI2CHandle->RxSize = 0;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	621a      	str	r2, [r3, #32]

	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	7a5b      	ldrb	r3, [r3, #9]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d105      	bne.n	800105c <I2C_CloseReceiveData+0x54>
	{
		I2C_ManageAcking(pI2CHandle->pI2Cx,ENABLE);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2101      	movs	r1, #1
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fe58 	bl	8000d0c <I2C_ManageAcking>
	}

}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <I2C_CloseSendData>:

void I2C_CloseSendData(I2C_Handle_t *pI2CHandle)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	//Implement the code to disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800107a:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITEVFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITEVTEN);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800108a:	605a      	str	r2, [r3, #4]


	pI2CHandle->TxRxState = I2C_READY;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pTxBuffer = NULL;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	60da      	str	r2, [r3, #12]
	pI2CHandle->TxLen = 0;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	615a      	str	r2, [r3, #20]
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <I2C_ER_IRQHandling>:
						#define I2C_ERROR_TIMEOUT 7

 */

void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b084      	sub	sp, #16
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]

	uint32_t temp1,temp2;

    //Know the status of  ITERREN control bit in the CR2
	temp2 = (pI2CHandle->pI2Cx->CR2) & ( 1 << I2C_CR2_ITERREN);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010bc:	60fb      	str	r3, [r7, #12]


/***********************Check for Bus error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1<< I2C_SR1_BERR);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	695b      	ldr	r3, [r3, #20]
 80010c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c8:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2 )
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d00e      	beq.n	80010ee <I2C_ER_IRQHandling+0x44>
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00b      	beq.n	80010ee <I2C_ER_IRQHandling+0x44>
	{
		//This is Bus error

		//Implement the code to clear the buss error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_BERR);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	695a      	ldr	r2, [r3, #20]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010e4:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
	   I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_BERR);
 80010e6:	2103      	movs	r1, #3
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff f90f 	bl	800030c <I2C_ApplicationEventCallback>
	}

/***********************Check for arbitration lost error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_ARLO );
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	695b      	ldr	r3, [r3, #20]
 80010f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010f8:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d00e      	beq.n	800111e <I2C_ER_IRQHandling+0x74>
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d00b      	beq.n	800111e <I2C_ER_IRQHandling+0x74>
	{
		//This is arbitration lost error

		//Implement the code to clear the arbitration lost error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_ARLO);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	695a      	ldr	r2, [r3, #20]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001114:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_ARLO);
 8001116:	2104      	movs	r1, #4
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff f8f7 	bl	800030c <I2C_ApplicationEventCallback>

	}

/***********************Check for ACK failure  error************************************/

	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_AF);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001128:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d00e      	beq.n	800114e <I2C_ER_IRQHandling+0xa4>
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00b      	beq.n	800114e <I2C_ER_IRQHandling+0xa4>
	{
		//This is ACK failure error

	    //Implement the code to clear the ACK failure error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_AF);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	695a      	ldr	r2, [r3, #20]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001144:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_AF);
 8001146:	2105      	movs	r1, #5
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff f8df 	bl	800030c <I2C_ApplicationEventCallback>
	}

/***********************Check for Overrun/underrun error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_OVR);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001158:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d00e      	beq.n	800117e <I2C_ER_IRQHandling+0xd4>
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d00b      	beq.n	800117e <I2C_ER_IRQHandling+0xd4>
	{
		//This is Overrun/underrun

	    //Implement the code to clear the Overrun/underrun error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_OVR);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	695a      	ldr	r2, [r3, #20]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001174:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_OVR);
 8001176:	2106      	movs	r1, #6
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff f8c7 	bl	800030c <I2C_ApplicationEventCallback>
	}

/***********************Check for Time out error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_TIMEOUT);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	695b      	ldr	r3, [r3, #20]
 8001184:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001188:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d00e      	beq.n	80011ae <I2C_ER_IRQHandling+0x104>
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d00b      	beq.n	80011ae <I2C_ER_IRQHandling+0x104>
	{
		//This is Time out error

	    //Implement the code to clear the Time out error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_TIMEOUT);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	695a      	ldr	r2, [r3, #20]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80011a4:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_TIMEOUT);
 80011a6:	2107      	movs	r1, #7
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff f8af 	bl	800030c <I2C_ApplicationEventCallback>
	}

}
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <I2C_SlaveSendData>:

void I2C_SlaveSendData(I2C_RegDef_t *pI2C,uint8_t data)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
 80011be:	460b      	mov	r3, r1
 80011c0:	70fb      	strb	r3, [r7, #3]
	pI2C->DR = data;
 80011c2:	78fa      	ldrb	r2, [r7, #3]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	611a      	str	r2, [r3, #16]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <I2C_SlaveReceiveData>:

uint8_t I2C_SlaveReceiveData(I2C_RegDef_t *pI2C)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
    return (uint8_t) pI2C->DR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	b2db      	uxtb	r3, r3
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <I2C_SlaveEnableDisableCallbackEvents>:

void I2C_SlaveEnableDisableCallbackEvents(I2C_RegDef_t *pI2Cx,uint8_t EnorDi)
 {
 80011ee:	b480      	push	{r7}
 80011f0:	b083      	sub	sp, #12
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
 80011f6:	460b      	mov	r3, r1
 80011f8:	70fb      	strb	r3, [r7, #3]
	 if(EnorDi == ENABLE)
 80011fa:	78fb      	ldrb	r3, [r7, #3]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d112      	bne.n	8001226 <I2C_SlaveEnableDisableCallbackEvents+0x38>
	 {
			pI2Cx->CR2 |= ( 1 << I2C_CR2_ITEVTEN);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	605a      	str	r2, [r3, #4]
			pI2Cx->CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	605a      	str	r2, [r3, #4]
			pI2Cx->CR2 |= ( 1 << I2C_CR2_ITERREN);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	605a      	str	r2, [r3, #4]
			pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITEVTEN);
			pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
			pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITERREN);
	 }

 8001224:	e011      	b.n	800124a <I2C_SlaveEnableDisableCallbackEvents+0x5c>
			pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITEVTEN);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	605a      	str	r2, [r3, #4]
			pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	605a      	str	r2, [r3, #4]
			pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITERREN);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
	...

08001258 <RCC_GetPCLK1Value>:
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 800125e:	4b25      	ldr	r3, [pc, #148]	; (80012f4 <RCC_GetPCLK1Value+0x9c>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	089b      	lsrs	r3, r3, #2
 8001264:	b2db      	uxtb	r3, r3
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 800126c:	7a7b      	ldrb	r3, [r7, #9]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d102      	bne.n	8001278 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 8001272:	4b21      	ldr	r3, [pc, #132]	; (80012f8 <RCC_GetPCLK1Value+0xa0>)
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	e00b      	b.n	8001290 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 8001278:	7a7b      	ldrb	r3, [r7, #9]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d102      	bne.n	8001284 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 800127e:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <RCC_GetPCLK1Value+0xa4>)
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	e005      	b.n	8001290 <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 8001284:	7a7b      	ldrb	r3, [r7, #9]
 8001286:	2b02      	cmp	r3, #2
 8001288:	d102      	bne.n	8001290 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 800128a:	f000 f83d 	bl	8001308 <RCC_GetPLLOutputClock>
 800128e:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 8001290:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <RCC_GetPCLK1Value+0x9c>)
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	091b      	lsrs	r3, r3, #4
 8001296:	b2db      	uxtb	r3, r3
 8001298:	f003 030f 	and.w	r3, r3, #15
 800129c:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 800129e:	7a3b      	ldrb	r3, [r7, #8]
 80012a0:	2b07      	cmp	r3, #7
 80012a2:	d802      	bhi.n	80012aa <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 80012a4:	2301      	movs	r3, #1
 80012a6:	72fb      	strb	r3, [r7, #11]
 80012a8:	e005      	b.n	80012b6 <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 80012aa:	7a3b      	ldrb	r3, [r7, #8]
 80012ac:	3b08      	subs	r3, #8
 80012ae:	4a14      	ldr	r2, [pc, #80]	; (8001300 <RCC_GetPCLK1Value+0xa8>)
 80012b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012b4:	72fb      	strb	r3, [r7, #11]
	}



	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 80012b6:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <RCC_GetPCLK1Value+0x9c>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	0a9b      	lsrs	r3, r3, #10
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 80012c4:	7a3b      	ldrb	r3, [r7, #8]
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	d802      	bhi.n	80012d0 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 80012ca:	2301      	movs	r3, #1
 80012cc:	72bb      	strb	r3, [r7, #10]
 80012ce:	e004      	b.n	80012da <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 80012d0:	7a3b      	ldrb	r3, [r7, #8]
 80012d2:	3b04      	subs	r3, #4
 80012d4:	4a0b      	ldr	r2, [pc, #44]	; (8001304 <RCC_GetPCLK1Value+0xac>)
 80012d6:	5cd3      	ldrb	r3, [r2, r3]
 80012d8:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 80012da:	7afb      	ldrb	r3, [r7, #11]
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	fbb2 f2f3 	udiv	r2, r2, r3
 80012e2:	7abb      	ldrb	r3, [r7, #10]
 80012e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e8:	607b      	str	r3, [r7, #4]

	return pclk1;
 80012ea:	687b      	ldr	r3, [r7, #4]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40023800 	.word	0x40023800
 80012f8:	00f42400 	.word	0x00f42400
 80012fc:	007a1200 	.word	0x007a1200
 8001300:	20000020 	.word	0x20000020
 8001304:	20000030 	.word	0x20000030

08001308 <RCC_GetPLLOutputClock>:

	return pclk2;
}

uint32_t  RCC_GetPLLOutputClock()
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0

	return 0;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <__libc_init_array>:
 8001318:	b570      	push	{r4, r5, r6, lr}
 800131a:	4d0d      	ldr	r5, [pc, #52]	; (8001350 <__libc_init_array+0x38>)
 800131c:	4c0d      	ldr	r4, [pc, #52]	; (8001354 <__libc_init_array+0x3c>)
 800131e:	1b64      	subs	r4, r4, r5
 8001320:	10a4      	asrs	r4, r4, #2
 8001322:	2600      	movs	r6, #0
 8001324:	42a6      	cmp	r6, r4
 8001326:	d109      	bne.n	800133c <__libc_init_array+0x24>
 8001328:	4d0b      	ldr	r5, [pc, #44]	; (8001358 <__libc_init_array+0x40>)
 800132a:	4c0c      	ldr	r4, [pc, #48]	; (800135c <__libc_init_array+0x44>)
 800132c:	f000 f818 	bl	8001360 <_init>
 8001330:	1b64      	subs	r4, r4, r5
 8001332:	10a4      	asrs	r4, r4, #2
 8001334:	2600      	movs	r6, #0
 8001336:	42a6      	cmp	r6, r4
 8001338:	d105      	bne.n	8001346 <__libc_init_array+0x2e>
 800133a:	bd70      	pop	{r4, r5, r6, pc}
 800133c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001340:	4798      	blx	r3
 8001342:	3601      	adds	r6, #1
 8001344:	e7ee      	b.n	8001324 <__libc_init_array+0xc>
 8001346:	f855 3b04 	ldr.w	r3, [r5], #4
 800134a:	4798      	blx	r3
 800134c:	3601      	adds	r6, #1
 800134e:	e7f2      	b.n	8001336 <__libc_init_array+0x1e>
 8001350:	08001378 	.word	0x08001378
 8001354:	08001378 	.word	0x08001378
 8001358:	08001378 	.word	0x08001378
 800135c:	0800137c 	.word	0x0800137c

08001360 <_init>:
 8001360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001362:	bf00      	nop
 8001364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001366:	bc08      	pop	{r3}
 8001368:	469e      	mov	lr, r3
 800136a:	4770      	bx	lr

0800136c <_fini>:
 800136c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800136e:	bf00      	nop
 8001370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001372:	bc08      	pop	{r3}
 8001374:	469e      	mov	lr, r3
 8001376:	4770      	bx	lr
