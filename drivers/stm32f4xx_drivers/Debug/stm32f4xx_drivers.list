
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020e8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08002298  08002298  00012298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002340  08002340  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002340  08002340  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002340  08002340  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002340  08002340  00012340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002344  08002344  00012344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002348  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          0000024c  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002b0  200002b0  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001fb3  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000761  00000000  00000000  00022047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000278  00000000  00000000  000227a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000220  00000000  00000000  00022a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003643  00000000  00000000  00022c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002875  00000000  00000000  00026283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000bfb5  00000000  00000000  00028af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00034aad  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001128  00000000  00000000  00034b00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002280 	.word	0x08002280

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	08002280 	.word	0x08002280

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <SPI2_GPIOInits>:
 * PB12 --> SPI2_NSS
 * ALT function mode : 5
 */

void SPI2_GPIOInits(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 8000296:	4b14      	ldr	r3, [pc, #80]	; (80002e8 <SPI2_GPIOInits+0x58>)
 8000298:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800029a:	2302      	movs	r3, #2
 800029c:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800029e:	2305      	movs	r3, #5
 80002a0:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80002a2:	2300      	movs	r3, #0
 80002a4:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002a6:	2300      	movs	r3, #0
 80002a8:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002aa:	2302      	movs	r3, #2
 80002ac:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80002ae:	230d      	movs	r3, #13
 80002b0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 facb 	bl	8000850 <GPIO_Init>

	//MOSI
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 80002ba:	230f      	movs	r3, #15
 80002bc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	4618      	mov	r0, r3
 80002c2:	f000 fac5 	bl	8000850 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 80002c6:	230e      	movs	r3, #14
 80002c8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 fabf 	bl	8000850 <GPIO_Init>


	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80002d2:	230c      	movs	r3, #12
 80002d4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 fab9 	bl	8000850 <GPIO_Init>


}
 80002de:	bf00      	nop
 80002e0:	3710      	adds	r7, #16
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40020400 	.word	0x40020400

080002ec <SPI2_Inits>:

void SPI2_Inits(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	SPI2handle.pSPIx = SPI2;
 80002f0:	4b0e      	ldr	r3, [pc, #56]	; (800032c <SPI2_Inits+0x40>)
 80002f2:	4a0f      	ldr	r2, [pc, #60]	; (8000330 <SPI2_Inits+0x44>)
 80002f4:	601a      	str	r2, [r3, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 80002f6:	4b0d      	ldr	r3, [pc, #52]	; (800032c <SPI2_Inits+0x40>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	715a      	strb	r2, [r3, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80002fc:	4b0b      	ldr	r3, [pc, #44]	; (800032c <SPI2_Inits+0x40>)
 80002fe:	2201      	movs	r2, #1
 8000300:	711a      	strb	r2, [r3, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32;
 8000302:	4b0a      	ldr	r3, [pc, #40]	; (800032c <SPI2_Inits+0x40>)
 8000304:	2204      	movs	r2, #4
 8000306:	719a      	strb	r2, [r3, #6]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000308:	4b08      	ldr	r3, [pc, #32]	; (800032c <SPI2_Inits+0x40>)
 800030a:	2200      	movs	r2, #0
 800030c:	71da      	strb	r2, [r3, #7]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800030e:	4b07      	ldr	r3, [pc, #28]	; (800032c <SPI2_Inits+0x40>)
 8000310:	2200      	movs	r2, #0
 8000312:	721a      	strb	r2, [r3, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000314:	4b05      	ldr	r3, [pc, #20]	; (800032c <SPI2_Inits+0x40>)
 8000316:	2200      	movs	r2, #0
 8000318:	725a      	strb	r2, [r3, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //Hardware slave management enabled for NSS pin
 800031a:	4b04      	ldr	r3, [pc, #16]	; (800032c <SPI2_Inits+0x40>)
 800031c:	2200      	movs	r2, #0
 800031e:	729a      	strb	r2, [r3, #10]

	SPI_Init(&SPI2handle);
 8000320:	4802      	ldr	r0, [pc, #8]	; (800032c <SPI2_Inits+0x40>)
 8000322:	f000 fd59 	bl	8000dd8 <SPI_Init>
}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	20000080 	.word	0x20000080
 8000330:	40003800 	.word	0x40003800

08000334 <Slave_GPIO_InterruptPinInit>:


/*This function configures the gpio pin over which SPI peripheral issues data available interrupt */
void Slave_GPIO_InterruptPinInit(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0
	GPIO_Handle_t spiIntPin;
	memset(&spiIntPin,0,sizeof(spiIntPin));
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	220c      	movs	r2, #12
 800033e:	2100      	movs	r1, #0
 8000340:	4618      	mov	r0, r3
 8000342:	f001 f807 	bl	8001354 <memset>

	//this is led gpio configuration
	spiIntPin.pGPIOx = GPIOD;
 8000346:	4b0d      	ldr	r3, [pc, #52]	; (800037c <Slave_GPIO_InterruptPinInit+0x48>)
 8000348:	607b      	str	r3, [r7, #4]
	spiIntPin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 800034a:	2306      	movs	r3, #6
 800034c:	723b      	strb	r3, [r7, #8]
	spiIntPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 800034e:	2304      	movs	r3, #4
 8000350:	727b      	strb	r3, [r7, #9]
	spiIntPin.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8000352:	2300      	movs	r3, #0
 8000354:	72bb      	strb	r3, [r7, #10]
	spiIntPin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000356:	2301      	movs	r3, #1
 8000358:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&spiIntPin);
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	4618      	mov	r0, r3
 800035e:	f000 fa77 	bl	8000850 <GPIO_Init>

	GPIO_IRQPriorityConfig(IRQ_NO_EXTI9_5,NVIC_IRQ_PRI15);
 8000362:	210f      	movs	r1, #15
 8000364:	2017      	movs	r0, #23
 8000366:	f000 fc95 	bl	8000c94 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5,ENABLE);
 800036a:	2101      	movs	r1, #1
 800036c:	2017      	movs	r0, #23
 800036e:	f000 fc0b 	bl	8000b88 <GPIO_IRQInterruptConfig>

}
 8000372:	bf00      	nop
 8000374:	3710      	adds	r7, #16
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	40020c00 	.word	0x40020c00

08000380 <main>:


int main(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0

	uint8_t dummy = 0xff;
 8000386:	23ff      	movs	r3, #255	; 0xff
 8000388:	71fb      	strb	r3, [r7, #7]

	Slave_GPIO_InterruptPinInit();
 800038a:	f7ff ffd3 	bl	8000334 <Slave_GPIO_InterruptPinInit>

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 800038e:	f7ff ff7f 	bl	8000290 <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 8000392:	f7ff ffab 	bl	80002ec <SPI2_Inits>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI2,ENABLE);
 8000396:	2101      	movs	r1, #1
 8000398:	4824      	ldr	r0, [pc, #144]	; (800042c <main+0xac>)
 800039a:	f000 fda8 	bl	8000eee <SPI_SSOEConfig>

	SPI_IRQInterruptConfig(IRQ_NO_SPI2,ENABLE);
 800039e:	2101      	movs	r1, #1
 80003a0:	2024      	movs	r0, #36	; 0x24
 80003a2:	f000 fdc1 	bl	8000f28 <SPI_IRQInterruptConfig>

	while(1){

		rcvStop = 0;
 80003a6:	4b22      	ldr	r3, [pc, #136]	; (8000430 <main+0xb0>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	701a      	strb	r2, [r3, #0]

		while(!dataAvailable); //wait till data available interrupt from transmitter device(slave)
 80003ac:	bf00      	nop
 80003ae:	4b21      	ldr	r3, [pc, #132]	; (8000434 <main+0xb4>)
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d0fa      	beq.n	80003ae <main+0x2e>

		GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5,DISABLE);
 80003b8:	2100      	movs	r1, #0
 80003ba:	2017      	movs	r0, #23
 80003bc:	f000 fbe4 	bl	8000b88 <GPIO_IRQInterruptConfig>

		//enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,ENABLE);
 80003c0:	2101      	movs	r1, #1
 80003c2:	481a      	ldr	r0, [pc, #104]	; (800042c <main+0xac>)
 80003c4:	f000 fd63 	bl	8000e8e <SPI_PeripheralControl>


		while(!rcvStop)
 80003c8:	e012      	b.n	80003f0 <main+0x70>
		{
			/* fetch the data from the SPI peripheral byte by byte in interrupt mode */
			while ( SPI_SendDataIT(&SPI2handle,&dummy,1) == SPI_BUSY_IN_TX);
 80003ca:	bf00      	nop
 80003cc:	1dfb      	adds	r3, r7, #7
 80003ce:	2201      	movs	r2, #1
 80003d0:	4619      	mov	r1, r3
 80003d2:	4819      	ldr	r0, [pc, #100]	; (8000438 <main+0xb8>)
 80003d4:	f000 fe2e 	bl	8001034 <SPI_SendDataIT>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b02      	cmp	r3, #2
 80003dc:	d0f6      	beq.n	80003cc <main+0x4c>
			while ( SPI_ReceiveDataIT(&SPI2handle,&ReadByte,1) == SPI_BUSY_IN_RX );
 80003de:	bf00      	nop
 80003e0:	2201      	movs	r2, #1
 80003e2:	4916      	ldr	r1, [pc, #88]	; (800043c <main+0xbc>)
 80003e4:	4814      	ldr	r0, [pc, #80]	; (8000438 <main+0xb8>)
 80003e6:	f000 fe49 	bl	800107c <SPI_ReceiveDataIT>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b01      	cmp	r3, #1
 80003ee:	d0f7      	beq.n	80003e0 <main+0x60>
		while(!rcvStop)
 80003f0:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <main+0xb0>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	b2db      	uxtb	r3, r3
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d0e7      	beq.n	80003ca <main+0x4a>
		}


		// confirm SPI is not busy
		while( SPI_GetFlagStatus(SPI2,SPI_BUSY_FLAG) );
 80003fa:	bf00      	nop
 80003fc:	2180      	movs	r1, #128	; 0x80
 80003fe:	480b      	ldr	r0, [pc, #44]	; (800042c <main+0xac>)
 8000400:	f000 fd61 	bl	8000ec6 <SPI_GetFlagStatus>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d1f8      	bne.n	80003fc <main+0x7c>

		//Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,DISABLE);
 800040a:	2100      	movs	r1, #0
 800040c:	4807      	ldr	r0, [pc, #28]	; (800042c <main+0xac>)
 800040e:	f000 fd3e 	bl	8000e8e <SPI_PeripheralControl>

		printf("Rcvd data = %s\n",RcvBuff);
 8000412:	490b      	ldr	r1, [pc, #44]	; (8000440 <main+0xc0>)
 8000414:	480b      	ldr	r0, [pc, #44]	; (8000444 <main+0xc4>)
 8000416:	f000 ffa5 	bl	8001364 <iprintf>

		dataAvailable = 0;
 800041a:	4b06      	ldr	r3, [pc, #24]	; (8000434 <main+0xb4>)
 800041c:	2200      	movs	r2, #0
 800041e:	701a      	strb	r2, [r3, #0]

		GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5,ENABLE);
 8000420:	2101      	movs	r1, #1
 8000422:	2017      	movs	r0, #23
 8000424:	f000 fbb0 	bl	8000b88 <GPIO_IRQInterruptConfig>
		rcvStop = 0;
 8000428:	e7bd      	b.n	80003a6 <main+0x26>
 800042a:	bf00      	nop
 800042c:	40003800 	.word	0x40003800
 8000430:	20000295 	.word	0x20000295
 8000434:	20000296 	.word	0x20000296
 8000438:	20000080 	.word	0x20000080
 800043c:	20000294 	.word	0x20000294
 8000440:	200000a0 	.word	0x200000a0
 8000444:	08002298 	.word	0x08002298

08000448 <SPI2_IRQHandler>:

}

/* Runs when a data byte is received from the peripheral over SPI*/
void SPI2_IRQHandler(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0

	SPI_IRQHandling(&SPI2handle);
 800044c:	4802      	ldr	r0, [pc, #8]	; (8000458 <SPI2_IRQHandler+0x10>)
 800044e:	f000 fe39 	bl	80010c4 <SPI_IRQHandling>
}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	20000080 	.word	0x20000080

0800045c <SPI_ApplicationEventCallback>:



void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle,uint8_t AppEv)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	460b      	mov	r3, r1
 8000466:	70fb      	strb	r3, [r7, #3]
	static uint32_t i = 0;
	/* In the RX complete event , copy data in to rcv buffer . '\0' indicates end of message(rcvStop = 1) */
	if(AppEv == SPI_EVENT_RX_CMPLT)
 8000468:	78fb      	ldrb	r3, [r7, #3]
 800046a:	2b02      	cmp	r3, #2
 800046c:	d11f      	bne.n	80004ae <SPI_ApplicationEventCallback+0x52>
	{
				RcvBuff[i++] = ReadByte;
 800046e:	4b13      	ldr	r3, [pc, #76]	; (80004bc <SPI_ApplicationEventCallback+0x60>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	1c5a      	adds	r2, r3, #1
 8000474:	4911      	ldr	r1, [pc, #68]	; (80004bc <SPI_ApplicationEventCallback+0x60>)
 8000476:	600a      	str	r2, [r1, #0]
 8000478:	4a11      	ldr	r2, [pc, #68]	; (80004c0 <SPI_ApplicationEventCallback+0x64>)
 800047a:	7812      	ldrb	r2, [r2, #0]
 800047c:	b2d1      	uxtb	r1, r2
 800047e:	4a11      	ldr	r2, [pc, #68]	; (80004c4 <SPI_ApplicationEventCallback+0x68>)
 8000480:	54d1      	strb	r1, [r2, r3]
				if(ReadByte == '\0' || ( i == MAX_LEN)){
 8000482:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <SPI_ApplicationEventCallback+0x64>)
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	b2db      	uxtb	r3, r3
 8000488:	2b00      	cmp	r3, #0
 800048a:	d004      	beq.n	8000496 <SPI_ApplicationEventCallback+0x3a>
 800048c:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <SPI_ApplicationEventCallback+0x60>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000494:	d10b      	bne.n	80004ae <SPI_ApplicationEventCallback+0x52>
					rcvStop = 1;
 8000496:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <SPI_ApplicationEventCallback+0x6c>)
 8000498:	2201      	movs	r2, #1
 800049a:	701a      	strb	r2, [r3, #0]
					RcvBuff[i-1] = '\0';
 800049c:	4b07      	ldr	r3, [pc, #28]	; (80004bc <SPI_ApplicationEventCallback+0x60>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	3b01      	subs	r3, #1
 80004a2:	4a08      	ldr	r2, [pc, #32]	; (80004c4 <SPI_ApplicationEventCallback+0x68>)
 80004a4:	2100      	movs	r1, #0
 80004a6:	54d1      	strb	r1, [r2, r3]
					i = 0;
 80004a8:	4b04      	ldr	r3, [pc, #16]	; (80004bc <SPI_ApplicationEventCallback+0x60>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
				}
	}

}
 80004ae:	bf00      	nop
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	20000298 	.word	0x20000298
 80004c0:	20000294 	.word	0x20000294
 80004c4:	200000a0 	.word	0x200000a0
 80004c8:	20000295 	.word	0x20000295

080004cc <EXTI9_5_IRQHandler>:

/* Slave data available interrupt handler */
void EXTI9_5_IRQHandler(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_6);
 80004d0:	2006      	movs	r0, #6
 80004d2:	f000 fc09 	bl	8000ce8 <GPIO_IRQHandling>
	dataAvailable = 1;
 80004d6:	4b02      	ldr	r3, [pc, #8]	; (80004e0 <EXTI9_5_IRQHandler+0x14>)
 80004d8:	2201      	movs	r2, #1
 80004da:	701a      	strb	r2, [r3, #0]
}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	20000296 	.word	0x20000296

080004e4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b086      	sub	sp, #24
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	60b9      	str	r1, [r7, #8]
 80004ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004f0:	2300      	movs	r3, #0
 80004f2:	617b      	str	r3, [r7, #20]
 80004f4:	e00a      	b.n	800050c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80004f6:	f3af 8000 	nop.w
 80004fa:	4601      	mov	r1, r0
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	1c5a      	adds	r2, r3, #1
 8000500:	60ba      	str	r2, [r7, #8]
 8000502:	b2ca      	uxtb	r2, r1
 8000504:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000506:	697b      	ldr	r3, [r7, #20]
 8000508:	3301      	adds	r3, #1
 800050a:	617b      	str	r3, [r7, #20]
 800050c:	697a      	ldr	r2, [r7, #20]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	429a      	cmp	r2, r3
 8000512:	dbf0      	blt.n	80004f6 <_read+0x12>
	}

return len;
 8000514:	687b      	ldr	r3, [r7, #4]
}
 8000516:	4618      	mov	r0, r3
 8000518:	3718      	adds	r7, #24
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}

0800051e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800051e:	b580      	push	{r7, lr}
 8000520:	b086      	sub	sp, #24
 8000522:	af00      	add	r7, sp, #0
 8000524:	60f8      	str	r0, [r7, #12]
 8000526:	60b9      	str	r1, [r7, #8]
 8000528:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800052a:	2300      	movs	r3, #0
 800052c:	617b      	str	r3, [r7, #20]
 800052e:	e009      	b.n	8000544 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	1c5a      	adds	r2, r3, #1
 8000534:	60ba      	str	r2, [r7, #8]
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	4618      	mov	r0, r3
 800053a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	3301      	adds	r3, #1
 8000542:	617b      	str	r3, [r7, #20]
 8000544:	697a      	ldr	r2, [r7, #20]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	429a      	cmp	r2, r3
 800054a:	dbf1      	blt.n	8000530 <_write+0x12>
	}
	return len;
 800054c:	687b      	ldr	r3, [r7, #4]
}
 800054e:	4618      	mov	r0, r3
 8000550:	3718      	adds	r7, #24
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}

08000556 <_close>:

int _close(int file)
{
 8000556:	b480      	push	{r7}
 8000558:	b083      	sub	sp, #12
 800055a:	af00      	add	r7, sp, #0
 800055c:	6078      	str	r0, [r7, #4]
	return -1;
 800055e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000562:	4618      	mov	r0, r3
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr

0800056e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800056e:	b480      	push	{r7}
 8000570:	b083      	sub	sp, #12
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
 8000576:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800057e:	605a      	str	r2, [r3, #4]
	return 0;
 8000580:	2300      	movs	r3, #0
}
 8000582:	4618      	mov	r0, r3
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr

0800058e <_isatty>:

int _isatty(int file)
{
 800058e:	b480      	push	{r7}
 8000590:	b083      	sub	sp, #12
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
	return 1;
 8000596:	2301      	movs	r3, #1
}
 8000598:	4618      	mov	r0, r3
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr

080005a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
	return 0;
 80005b0:	2300      	movs	r3, #0
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
	...

080005c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005c8:	4a14      	ldr	r2, [pc, #80]	; (800061c <_sbrk+0x5c>)
 80005ca:	4b15      	ldr	r3, [pc, #84]	; (8000620 <_sbrk+0x60>)
 80005cc:	1ad3      	subs	r3, r2, r3
 80005ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005d4:	4b13      	ldr	r3, [pc, #76]	; (8000624 <_sbrk+0x64>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d102      	bne.n	80005e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <_sbrk+0x64>)
 80005de:	4a12      	ldr	r2, [pc, #72]	; (8000628 <_sbrk+0x68>)
 80005e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005e2:	4b10      	ldr	r3, [pc, #64]	; (8000624 <_sbrk+0x64>)
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4413      	add	r3, r2
 80005ea:	693a      	ldr	r2, [r7, #16]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d207      	bcs.n	8000600 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005f0:	f000 fe86 	bl	8001300 <__errno>
 80005f4:	4603      	mov	r3, r0
 80005f6:	220c      	movs	r2, #12
 80005f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005fa:	f04f 33ff 	mov.w	r3, #4294967295
 80005fe:	e009      	b.n	8000614 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000600:	4b08      	ldr	r3, [pc, #32]	; (8000624 <_sbrk+0x64>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000606:	4b07      	ldr	r3, [pc, #28]	; (8000624 <_sbrk+0x64>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4413      	add	r3, r2
 800060e:	4a05      	ldr	r2, [pc, #20]	; (8000624 <_sbrk+0x64>)
 8000610:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000612:	68fb      	ldr	r3, [r7, #12]
}
 8000614:	4618      	mov	r0, r3
 8000616:	3718      	adds	r7, #24
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20020000 	.word	0x20020000
 8000620:	00000400 	.word	0x00000400
 8000624:	2000029c 	.word	0x2000029c
 8000628:	200002b0 	.word	0x200002b0

0800062c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800062c:	480d      	ldr	r0, [pc, #52]	; (8000664 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800062e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000630:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000634:	480c      	ldr	r0, [pc, #48]	; (8000668 <LoopForever+0x6>)
  ldr r1, =_edata
 8000636:	490d      	ldr	r1, [pc, #52]	; (800066c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000638:	4a0d      	ldr	r2, [pc, #52]	; (8000670 <LoopForever+0xe>)
  movs r3, #0
 800063a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800063c:	e002      	b.n	8000644 <LoopCopyDataInit>

0800063e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800063e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000642:	3304      	adds	r3, #4

08000644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000648:	d3f9      	bcc.n	800063e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800064a:	4a0a      	ldr	r2, [pc, #40]	; (8000674 <LoopForever+0x12>)
  ldr r4, =_ebss
 800064c:	4c0a      	ldr	r4, [pc, #40]	; (8000678 <LoopForever+0x16>)
  movs r3, #0
 800064e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000650:	e001      	b.n	8000656 <LoopFillZerobss>

08000652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000654:	3204      	adds	r2, #4

08000656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000658:	d3fb      	bcc.n	8000652 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800065a:	f000 fe57 	bl	800130c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800065e:	f7ff fe8f 	bl	8000380 <main>

08000662 <LoopForever>:

LoopForever:
    b LoopForever
 8000662:	e7fe      	b.n	8000662 <LoopForever>
  ldr   r0, =_estack
 8000664:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800066c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000670:	08002348 	.word	0x08002348
  ldr r2, =_sbss
 8000674:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000678:	200002b0 	.word	0x200002b0

0800067c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800067c:	e7fe      	b.n	800067c <ADC_IRQHandler>
	...

08000680 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	460b      	mov	r3, r1
 800068a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800068c:	78fb      	ldrb	r3, [r7, #3]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d162      	bne.n	8000758 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4a64      	ldr	r2, [pc, #400]	; (8000828 <GPIO_PeriClockControl+0x1a8>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d106      	bne.n	80006a8 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800069a:	4b64      	ldr	r3, [pc, #400]	; (800082c <GPIO_PeriClockControl+0x1ac>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a63      	ldr	r2, [pc, #396]	; (800082c <GPIO_PeriClockControl+0x1ac>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOI_PCLK_DI();
		}
	}

}
 80006a6:	e0b9      	b.n	800081c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4a61      	ldr	r2, [pc, #388]	; (8000830 <GPIO_PeriClockControl+0x1b0>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d106      	bne.n	80006be <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80006b0:	4b5e      	ldr	r3, [pc, #376]	; (800082c <GPIO_PeriClockControl+0x1ac>)
 80006b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b4:	4a5d      	ldr	r2, [pc, #372]	; (800082c <GPIO_PeriClockControl+0x1ac>)
 80006b6:	f043 0302 	orr.w	r3, r3, #2
 80006ba:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006bc:	e0ae      	b.n	800081c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4a5c      	ldr	r2, [pc, #368]	; (8000834 <GPIO_PeriClockControl+0x1b4>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d106      	bne.n	80006d4 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80006c6:	4b59      	ldr	r3, [pc, #356]	; (800082c <GPIO_PeriClockControl+0x1ac>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a58      	ldr	r2, [pc, #352]	; (800082c <GPIO_PeriClockControl+0x1ac>)
 80006cc:	f043 0304 	orr.w	r3, r3, #4
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006d2:	e0a3      	b.n	800081c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	4a58      	ldr	r2, [pc, #352]	; (8000838 <GPIO_PeriClockControl+0x1b8>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d106      	bne.n	80006ea <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80006dc:	4b53      	ldr	r3, [pc, #332]	; (800082c <GPIO_PeriClockControl+0x1ac>)
 80006de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e0:	4a52      	ldr	r2, [pc, #328]	; (800082c <GPIO_PeriClockControl+0x1ac>)
 80006e2:	f043 0308 	orr.w	r3, r3, #8
 80006e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006e8:	e098      	b.n	800081c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4a53      	ldr	r2, [pc, #332]	; (800083c <GPIO_PeriClockControl+0x1bc>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d106      	bne.n	8000700 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80006f2:	4b4e      	ldr	r3, [pc, #312]	; (800082c <GPIO_PeriClockControl+0x1ac>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a4d      	ldr	r2, [pc, #308]	; (800082c <GPIO_PeriClockControl+0x1ac>)
 80006f8:	f043 0310 	orr.w	r3, r3, #16
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006fe:	e08d      	b.n	800081c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4a4f      	ldr	r2, [pc, #316]	; (8000840 <GPIO_PeriClockControl+0x1c0>)
 8000704:	4293      	cmp	r3, r2
 8000706:	d106      	bne.n	8000716 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000708:	4b48      	ldr	r3, [pc, #288]	; (800082c <GPIO_PeriClockControl+0x1ac>)
 800070a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070c:	4a47      	ldr	r2, [pc, #284]	; (800082c <GPIO_PeriClockControl+0x1ac>)
 800070e:	f043 0320 	orr.w	r3, r3, #32
 8000712:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000714:	e082      	b.n	800081c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4a4a      	ldr	r2, [pc, #296]	; (8000844 <GPIO_PeriClockControl+0x1c4>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d106      	bne.n	800072c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800071e:	4b43      	ldr	r3, [pc, #268]	; (800082c <GPIO_PeriClockControl+0x1ac>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a42      	ldr	r2, [pc, #264]	; (800082c <GPIO_PeriClockControl+0x1ac>)
 8000724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
}
 800072a:	e077      	b.n	800081c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4a46      	ldr	r2, [pc, #280]	; (8000848 <GPIO_PeriClockControl+0x1c8>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d106      	bne.n	8000742 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000734:	4b3d      	ldr	r3, [pc, #244]	; (800082c <GPIO_PeriClockControl+0x1ac>)
 8000736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000738:	4a3c      	ldr	r2, [pc, #240]	; (800082c <GPIO_PeriClockControl+0x1ac>)
 800073a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800073e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000740:	e06c      	b.n	800081c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4a41      	ldr	r2, [pc, #260]	; (800084c <GPIO_PeriClockControl+0x1cc>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d168      	bne.n	800081c <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 800074a:	4b38      	ldr	r3, [pc, #224]	; (800082c <GPIO_PeriClockControl+0x1ac>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a37      	ldr	r2, [pc, #220]	; (800082c <GPIO_PeriClockControl+0x1ac>)
 8000750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000756:	e061      	b.n	800081c <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4a33      	ldr	r2, [pc, #204]	; (8000828 <GPIO_PeriClockControl+0x1a8>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d106      	bne.n	800076e <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000760:	4b32      	ldr	r3, [pc, #200]	; (800082c <GPIO_PeriClockControl+0x1ac>)
 8000762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000764:	4a31      	ldr	r2, [pc, #196]	; (800082c <GPIO_PeriClockControl+0x1ac>)
 8000766:	f023 0301 	bic.w	r3, r3, #1
 800076a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800076c:	e056      	b.n	800081c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4a2f      	ldr	r2, [pc, #188]	; (8000830 <GPIO_PeriClockControl+0x1b0>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d106      	bne.n	8000784 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 8000776:	4b2d      	ldr	r3, [pc, #180]	; (800082c <GPIO_PeriClockControl+0x1ac>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a2c      	ldr	r2, [pc, #176]	; (800082c <GPIO_PeriClockControl+0x1ac>)
 800077c:	f023 0302 	bic.w	r3, r3, #2
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000782:	e04b      	b.n	800081c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4a2b      	ldr	r2, [pc, #172]	; (8000834 <GPIO_PeriClockControl+0x1b4>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d106      	bne.n	800079a <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 800078c:	4b27      	ldr	r3, [pc, #156]	; (800082c <GPIO_PeriClockControl+0x1ac>)
 800078e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000790:	4a26      	ldr	r2, [pc, #152]	; (800082c <GPIO_PeriClockControl+0x1ac>)
 8000792:	f023 0304 	bic.w	r3, r3, #4
 8000796:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000798:	e040      	b.n	800081c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4a26      	ldr	r2, [pc, #152]	; (8000838 <GPIO_PeriClockControl+0x1b8>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d106      	bne.n	80007b0 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 80007a2:	4b22      	ldr	r3, [pc, #136]	; (800082c <GPIO_PeriClockControl+0x1ac>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a21      	ldr	r2, [pc, #132]	; (800082c <GPIO_PeriClockControl+0x1ac>)
 80007a8:	f023 0308 	bic.w	r3, r3, #8
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007ae:	e035      	b.n	800081c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	4a22      	ldr	r2, [pc, #136]	; (800083c <GPIO_PeriClockControl+0x1bc>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d106      	bne.n	80007c6 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 80007b8:	4b1c      	ldr	r3, [pc, #112]	; (800082c <GPIO_PeriClockControl+0x1ac>)
 80007ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007bc:	4a1b      	ldr	r2, [pc, #108]	; (800082c <GPIO_PeriClockControl+0x1ac>)
 80007be:	f023 0310 	bic.w	r3, r3, #16
 80007c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007c4:	e02a      	b.n	800081c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4a1d      	ldr	r2, [pc, #116]	; (8000840 <GPIO_PeriClockControl+0x1c0>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d106      	bne.n	80007dc <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 80007ce:	4b17      	ldr	r3, [pc, #92]	; (800082c <GPIO_PeriClockControl+0x1ac>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a16      	ldr	r2, [pc, #88]	; (800082c <GPIO_PeriClockControl+0x1ac>)
 80007d4:	f023 0320 	bic.w	r3, r3, #32
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007da:	e01f      	b.n	800081c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4a19      	ldr	r2, [pc, #100]	; (8000844 <GPIO_PeriClockControl+0x1c4>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d106      	bne.n	80007f2 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 80007e4:	4b11      	ldr	r3, [pc, #68]	; (800082c <GPIO_PeriClockControl+0x1ac>)
 80007e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e8:	4a10      	ldr	r2, [pc, #64]	; (800082c <GPIO_PeriClockControl+0x1ac>)
 80007ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007f0:	e014      	b.n	800081c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4a14      	ldr	r2, [pc, #80]	; (8000848 <GPIO_PeriClockControl+0x1c8>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d106      	bne.n	8000808 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 80007fa:	4b0c      	ldr	r3, [pc, #48]	; (800082c <GPIO_PeriClockControl+0x1ac>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a0b      	ldr	r2, [pc, #44]	; (800082c <GPIO_PeriClockControl+0x1ac>)
 8000800:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000806:	e009      	b.n	800081c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4a10      	ldr	r2, [pc, #64]	; (800084c <GPIO_PeriClockControl+0x1cc>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d105      	bne.n	800081c <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <GPIO_PeriClockControl+0x1ac>)
 8000812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000814:	4a05      	ldr	r2, [pc, #20]	; (800082c <GPIO_PeriClockControl+0x1ac>)
 8000816:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800081a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800081c:	bf00      	nop
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	40020000 	.word	0x40020000
 800082c:	40023800 	.word	0x40023800
 8000830:	40020400 	.word	0x40020400
 8000834:	40020800 	.word	0x40020800
 8000838:	40020c00 	.word	0x40020c00
 800083c:	40021000 	.word	0x40021000
 8000840:	40021400 	.word	0x40021400
 8000844:	40021800 	.word	0x40021800
 8000848:	40021c00 	.word	0x40021c00
 800084c:	40022000 	.word	0x40022000

08000850 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2101      	movs	r1, #1
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff ff0c 	bl	8000680 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	795b      	ldrb	r3, [r3, #5]
 800086c:	2b03      	cmp	r3, #3
 800086e:	d820      	bhi.n	80008b2 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	795b      	ldrb	r3, [r3, #5]
 8000874:	461a      	mov	r2, r3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	791b      	ldrb	r3, [r3, #4]
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	fa02 f303 	lsl.w	r3, r2, r3
 8000880:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	791b      	ldrb	r3, [r3, #4]
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	2103      	movs	r1, #3
 8000890:	fa01 f303 	lsl.w	r3, r1, r3
 8000894:	43db      	mvns	r3, r3
 8000896:	4619      	mov	r1, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	400a      	ands	r2, r1
 800089e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	6819      	ldr	r1, [r3, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	697a      	ldr	r2, [r7, #20]
 80008ac:	430a      	orrs	r2, r1
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	e0cb      	b.n	8000a4a <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	795b      	ldrb	r3, [r3, #5]
 80008b6:	2b04      	cmp	r3, #4
 80008b8:	d117      	bne.n	80008ea <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008ba:	4b4b      	ldr	r3, [pc, #300]	; (80009e8 <GPIO_Init+0x198>)
 80008bc:	68db      	ldr	r3, [r3, #12]
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	7912      	ldrb	r2, [r2, #4]
 80008c2:	4611      	mov	r1, r2
 80008c4:	2201      	movs	r2, #1
 80008c6:	408a      	lsls	r2, r1
 80008c8:	4611      	mov	r1, r2
 80008ca:	4a47      	ldr	r2, [pc, #284]	; (80009e8 <GPIO_Init+0x198>)
 80008cc:	430b      	orrs	r3, r1
 80008ce:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008d0:	4b45      	ldr	r3, [pc, #276]	; (80009e8 <GPIO_Init+0x198>)
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	687a      	ldr	r2, [r7, #4]
 80008d6:	7912      	ldrb	r2, [r2, #4]
 80008d8:	4611      	mov	r1, r2
 80008da:	2201      	movs	r2, #1
 80008dc:	408a      	lsls	r2, r1
 80008de:	43d2      	mvns	r2, r2
 80008e0:	4611      	mov	r1, r2
 80008e2:	4a41      	ldr	r2, [pc, #260]	; (80009e8 <GPIO_Init+0x198>)
 80008e4:	400b      	ands	r3, r1
 80008e6:	6093      	str	r3, [r2, #8]
 80008e8:	e035      	b.n	8000956 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	795b      	ldrb	r3, [r3, #5]
 80008ee:	2b05      	cmp	r3, #5
 80008f0:	d117      	bne.n	8000922 <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008f2:	4b3d      	ldr	r3, [pc, #244]	; (80009e8 <GPIO_Init+0x198>)
 80008f4:	689b      	ldr	r3, [r3, #8]
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	7912      	ldrb	r2, [r2, #4]
 80008fa:	4611      	mov	r1, r2
 80008fc:	2201      	movs	r2, #1
 80008fe:	408a      	lsls	r2, r1
 8000900:	4611      	mov	r1, r2
 8000902:	4a39      	ldr	r2, [pc, #228]	; (80009e8 <GPIO_Init+0x198>)
 8000904:	430b      	orrs	r3, r1
 8000906:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000908:	4b37      	ldr	r3, [pc, #220]	; (80009e8 <GPIO_Init+0x198>)
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	687a      	ldr	r2, [r7, #4]
 800090e:	7912      	ldrb	r2, [r2, #4]
 8000910:	4611      	mov	r1, r2
 8000912:	2201      	movs	r2, #1
 8000914:	408a      	lsls	r2, r1
 8000916:	43d2      	mvns	r2, r2
 8000918:	4611      	mov	r1, r2
 800091a:	4a33      	ldr	r2, [pc, #204]	; (80009e8 <GPIO_Init+0x198>)
 800091c:	400b      	ands	r3, r1
 800091e:	60d3      	str	r3, [r2, #12]
 8000920:	e019      	b.n	8000956 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	795b      	ldrb	r3, [r3, #5]
 8000926:	2b06      	cmp	r3, #6
 8000928:	d115      	bne.n	8000956 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800092a:	4b2f      	ldr	r3, [pc, #188]	; (80009e8 <GPIO_Init+0x198>)
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	7912      	ldrb	r2, [r2, #4]
 8000932:	4611      	mov	r1, r2
 8000934:	2201      	movs	r2, #1
 8000936:	408a      	lsls	r2, r1
 8000938:	4611      	mov	r1, r2
 800093a:	4a2b      	ldr	r2, [pc, #172]	; (80009e8 <GPIO_Init+0x198>)
 800093c:	430b      	orrs	r3, r1
 800093e:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000940:	4b29      	ldr	r3, [pc, #164]	; (80009e8 <GPIO_Init+0x198>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	7912      	ldrb	r2, [r2, #4]
 8000948:	4611      	mov	r1, r2
 800094a:	2201      	movs	r2, #1
 800094c:	408a      	lsls	r2, r1
 800094e:	4611      	mov	r1, r2
 8000950:	4a25      	ldr	r2, [pc, #148]	; (80009e8 <GPIO_Init+0x198>)
 8000952:	430b      	orrs	r3, r1
 8000954:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	791b      	ldrb	r3, [r3, #4]
 800095a:	089b      	lsrs	r3, r3, #2
 800095c:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	791b      	ldrb	r3, [r3, #4]
 8000962:	f003 0303 	and.w	r3, r3, #3
 8000966:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a1f      	ldr	r2, [pc, #124]	; (80009ec <GPIO_Init+0x19c>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d04e      	beq.n	8000a10 <GPIO_Init+0x1c0>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a1e      	ldr	r2, [pc, #120]	; (80009f0 <GPIO_Init+0x1a0>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d032      	beq.n	80009e2 <GPIO_Init+0x192>
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a1c      	ldr	r2, [pc, #112]	; (80009f4 <GPIO_Init+0x1a4>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d02b      	beq.n	80009de <GPIO_Init+0x18e>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a1b      	ldr	r2, [pc, #108]	; (80009f8 <GPIO_Init+0x1a8>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d024      	beq.n	80009da <GPIO_Init+0x18a>
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a19      	ldr	r2, [pc, #100]	; (80009fc <GPIO_Init+0x1ac>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d01d      	beq.n	80009d6 <GPIO_Init+0x186>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a18      	ldr	r2, [pc, #96]	; (8000a00 <GPIO_Init+0x1b0>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d016      	beq.n	80009d2 <GPIO_Init+0x182>
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a16      	ldr	r2, [pc, #88]	; (8000a04 <GPIO_Init+0x1b4>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d00f      	beq.n	80009ce <GPIO_Init+0x17e>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a15      	ldr	r2, [pc, #84]	; (8000a08 <GPIO_Init+0x1b8>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d008      	beq.n	80009ca <GPIO_Init+0x17a>
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a13      	ldr	r2, [pc, #76]	; (8000a0c <GPIO_Init+0x1bc>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d101      	bne.n	80009c6 <GPIO_Init+0x176>
 80009c2:	2308      	movs	r3, #8
 80009c4:	e025      	b.n	8000a12 <GPIO_Init+0x1c2>
 80009c6:	2300      	movs	r3, #0
 80009c8:	e023      	b.n	8000a12 <GPIO_Init+0x1c2>
 80009ca:	2307      	movs	r3, #7
 80009cc:	e021      	b.n	8000a12 <GPIO_Init+0x1c2>
 80009ce:	2306      	movs	r3, #6
 80009d0:	e01f      	b.n	8000a12 <GPIO_Init+0x1c2>
 80009d2:	2305      	movs	r3, #5
 80009d4:	e01d      	b.n	8000a12 <GPIO_Init+0x1c2>
 80009d6:	2304      	movs	r3, #4
 80009d8:	e01b      	b.n	8000a12 <GPIO_Init+0x1c2>
 80009da:	2303      	movs	r3, #3
 80009dc:	e019      	b.n	8000a12 <GPIO_Init+0x1c2>
 80009de:	2302      	movs	r3, #2
 80009e0:	e017      	b.n	8000a12 <GPIO_Init+0x1c2>
 80009e2:	2301      	movs	r3, #1
 80009e4:	e015      	b.n	8000a12 <GPIO_Init+0x1c2>
 80009e6:	bf00      	nop
 80009e8:	40013c00 	.word	0x40013c00
 80009ec:	40020000 	.word	0x40020000
 80009f0:	40020400 	.word	0x40020400
 80009f4:	40020800 	.word	0x40020800
 80009f8:	40020c00 	.word	0x40020c00
 80009fc:	40021000 	.word	0x40021000
 8000a00:	40021400 	.word	0x40021400
 8000a04:	40021800 	.word	0x40021800
 8000a08:	40021c00 	.word	0x40021c00
 8000a0c:	40022000 	.word	0x40022000
 8000a10:	2300      	movs	r3, #0
 8000a12:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000a14:	4b59      	ldr	r3, [pc, #356]	; (8000b7c <GPIO_Init+0x32c>)
 8000a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a18:	4a58      	ldr	r2, [pc, #352]	; (8000b7c <GPIO_Init+0x32c>)
 8000a1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a1e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000a20:	7c7a      	ldrb	r2, [r7, #17]
 8000a22:	7cbb      	ldrb	r3, [r7, #18]
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	fa02 f103 	lsl.w	r1, r2, r3
 8000a2a:	4a55      	ldr	r2, [pc, #340]	; (8000b80 <GPIO_Init+0x330>)
 8000a2c:	7cfb      	ldrb	r3, [r7, #19]
 8000a2e:	3302      	adds	r3, #2
 8000a30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000a34:	4b53      	ldr	r3, [pc, #332]	; (8000b84 <GPIO_Init+0x334>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	687a      	ldr	r2, [r7, #4]
 8000a3a:	7912      	ldrb	r2, [r2, #4]
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	2201      	movs	r2, #1
 8000a40:	408a      	lsls	r2, r1
 8000a42:	4611      	mov	r1, r2
 8000a44:	4a4f      	ldr	r2, [pc, #316]	; (8000b84 <GPIO_Init+0x334>)
 8000a46:	430b      	orrs	r3, r1
 8000a48:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	799b      	ldrb	r3, [r3, #6]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	791b      	ldrb	r3, [r3, #4]
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	689a      	ldr	r2, [r3, #8]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	791b      	ldrb	r3, [r3, #4]
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	2103      	movs	r1, #3
 8000a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6e:	43db      	mvns	r3, r3
 8000a70:	4619      	mov	r1, r3
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	400a      	ands	r2, r1
 8000a78:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	6899      	ldr	r1, [r3, #8]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	697a      	ldr	r2, [r7, #20]
 8000a86:	430a      	orrs	r2, r1
 8000a88:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	79db      	ldrb	r3, [r3, #7]
 8000a8e:	461a      	mov	r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	791b      	ldrb	r3, [r3, #4]
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	68da      	ldr	r2, [r3, #12]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	791b      	ldrb	r3, [r3, #4]
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	2103      	movs	r1, #3
 8000aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000aae:	43db      	mvns	r3, r3
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	400a      	ands	r2, r1
 8000ab8:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	68d9      	ldr	r1, [r3, #12]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	697a      	ldr	r2, [r7, #20]
 8000ac6:	430a      	orrs	r2, r1
 8000ac8:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	7a1b      	ldrb	r3, [r3, #8]
 8000ace:	461a      	mov	r2, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	791b      	ldrb	r3, [r3, #4]
 8000ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	685a      	ldr	r2, [r3, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	791b      	ldrb	r3, [r3, #4]
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	408b      	lsls	r3, r1
 8000aea:	43db      	mvns	r3, r3
 8000aec:	4619      	mov	r1, r3
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	400a      	ands	r2, r1
 8000af4:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	6859      	ldr	r1, [r3, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	697a      	ldr	r2, [r7, #20]
 8000b02:	430a      	orrs	r2, r1
 8000b04:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	795b      	ldrb	r3, [r3, #5]
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	d131      	bne.n	8000b72 <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	791b      	ldrb	r3, [r3, #4]
 8000b12:	08db      	lsrs	r3, r3, #3
 8000b14:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	791b      	ldrb	r3, [r3, #4]
 8000b1a:	f003 0307 	and.w	r3, r3, #7
 8000b1e:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	7c3a      	ldrb	r2, [r7, #16]
 8000b26:	3208      	adds	r2, #8
 8000b28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	220f      	movs	r2, #15
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43db      	mvns	r3, r3
 8000b38:	4618      	mov	r0, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	7c3a      	ldrb	r2, [r7, #16]
 8000b40:	4001      	ands	r1, r0
 8000b42:	3208      	adds	r2, #8
 8000b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	7c3a      	ldrb	r2, [r7, #16]
 8000b4e:	3208      	adds	r2, #8
 8000b50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	7a5b      	ldrb	r3, [r3, #9]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	4618      	mov	r0, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	7c3a      	ldrb	r2, [r7, #16]
 8000b6a:	4301      	orrs	r1, r0
 8000b6c:	3208      	adds	r2, #8
 8000b6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000b72:	bf00      	nop
 8000b74:	3718      	adds	r7, #24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40013800 	.word	0x40013800
 8000b84:	40013c00 	.word	0x40013c00

08000b88 <GPIO_IRQInterruptConfig>:
 *
 * @Note              -

 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	460a      	mov	r2, r1
 8000b92:	71fb      	strb	r3, [r7, #7]
 8000b94:	4613      	mov	r3, r2
 8000b96:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE)
 8000b98:	79bb      	ldrb	r3, [r7, #6]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d133      	bne.n	8000c06 <GPIO_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	2b1f      	cmp	r3, #31
 8000ba2:	d80a      	bhi.n	8000bba <GPIO_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 8000ba4:	4b35      	ldr	r3, [pc, #212]	; (8000c7c <GPIO_IRQInterruptConfig+0xf4>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	79fa      	ldrb	r2, [r7, #7]
 8000baa:	2101      	movs	r1, #1
 8000bac:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb0:	4611      	mov	r1, r2
 8000bb2:	4a32      	ldr	r2, [pc, #200]	; (8000c7c <GPIO_IRQInterruptConfig+0xf4>)
 8000bb4:	430b      	orrs	r3, r1
 8000bb6:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
 8000bb8:	e059      	b.n	8000c6e <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	2b1f      	cmp	r3, #31
 8000bbe:	d90f      	bls.n	8000be0 <GPIO_IRQInterruptConfig+0x58>
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	2b3f      	cmp	r3, #63	; 0x3f
 8000bc4:	d80c      	bhi.n	8000be0 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8000bc6:	4b2e      	ldr	r3, [pc, #184]	; (8000c80 <GPIO_IRQInterruptConfig+0xf8>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	79fa      	ldrb	r2, [r7, #7]
 8000bcc:	f002 021f 	and.w	r2, r2, #31
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd6:	4611      	mov	r1, r2
 8000bd8:	4a29      	ldr	r2, [pc, #164]	; (8000c80 <GPIO_IRQInterruptConfig+0xf8>)
 8000bda:	430b      	orrs	r3, r1
 8000bdc:	6013      	str	r3, [r2, #0]
 8000bde:	e046      	b.n	8000c6e <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	2b3f      	cmp	r3, #63	; 0x3f
 8000be4:	d943      	bls.n	8000c6e <GPIO_IRQInterruptConfig+0xe6>
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	2b5f      	cmp	r3, #95	; 0x5f
 8000bea:	d840      	bhi.n	8000c6e <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= ( 1 << (IRQNumber % 64) );
 8000bec:	4b25      	ldr	r3, [pc, #148]	; (8000c84 <GPIO_IRQInterruptConfig+0xfc>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	79fa      	ldrb	r2, [r7, #7]
 8000bf2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	4a21      	ldr	r2, [pc, #132]	; (8000c84 <GPIO_IRQInterruptConfig+0xfc>)
 8000c00:	430b      	orrs	r3, r1
 8000c02:	6013      	str	r3, [r2, #0]
}
 8000c04:	e033      	b.n	8000c6e <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	2b1f      	cmp	r3, #31
 8000c0a:	d80a      	bhi.n	8000c22 <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8000c0c:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <GPIO_IRQInterruptConfig+0x100>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	79fa      	ldrb	r2, [r7, #7]
 8000c12:	2101      	movs	r1, #1
 8000c14:	fa01 f202 	lsl.w	r2, r1, r2
 8000c18:	4611      	mov	r1, r2
 8000c1a:	4a1b      	ldr	r2, [pc, #108]	; (8000c88 <GPIO_IRQInterruptConfig+0x100>)
 8000c1c:	430b      	orrs	r3, r1
 8000c1e:	6013      	str	r3, [r2, #0]
}
 8000c20:	e025      	b.n	8000c6e <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	2b1f      	cmp	r3, #31
 8000c26:	d90f      	bls.n	8000c48 <GPIO_IRQInterruptConfig+0xc0>
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	2b3f      	cmp	r3, #63	; 0x3f
 8000c2c:	d80c      	bhi.n	8000c48 <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 8000c2e:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <GPIO_IRQInterruptConfig+0x104>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	79fa      	ldrb	r2, [r7, #7]
 8000c34:	f002 021f 	and.w	r2, r2, #31
 8000c38:	2101      	movs	r1, #1
 8000c3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c3e:	4611      	mov	r1, r2
 8000c40:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <GPIO_IRQInterruptConfig+0x104>)
 8000c42:	430b      	orrs	r3, r1
 8000c44:	6013      	str	r3, [r2, #0]
 8000c46:	e012      	b.n	8000c6e <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	2b3f      	cmp	r3, #63	; 0x3f
 8000c4c:	d90f      	bls.n	8000c6e <GPIO_IRQInterruptConfig+0xe6>
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	2b5f      	cmp	r3, #95	; 0x5f
 8000c52:	d80c      	bhi.n	8000c6e <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
 8000c54:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <GPIO_IRQInterruptConfig+0x108>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	79fa      	ldrb	r2, [r7, #7]
 8000c5a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c5e:	2101      	movs	r1, #1
 8000c60:	fa01 f202 	lsl.w	r2, r1, r2
 8000c64:	4611      	mov	r1, r2
 8000c66:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <GPIO_IRQInterruptConfig+0x108>)
 8000c68:	430b      	orrs	r3, r1
 8000c6a:	6013      	str	r3, [r2, #0]
}
 8000c6c:	e7ff      	b.n	8000c6e <GPIO_IRQInterruptConfig+0xe6>
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000e100 	.word	0xe000e100
 8000c80:	e000e104 	.word	0xe000e104
 8000c84:	e000e108 	.word	0xe000e108
 8000c88:	e000e180 	.word	0xe000e180
 8000c8c:	e000e184 	.word	0xe000e184
 8000c90:	e000e188 	.word	0xe000e188

08000c94 <GPIO_IRQPriorityConfig>:
 *
 * @Note              -

 */
void GPIO_IRQPriorityConfig(uint8_t IRQNumber,uint32_t IRQPriority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	6039      	str	r1, [r7, #0]
 8000c9e:	71fb      	strb	r3, [r7, #7]
	//1. first lets find out the ipr register
	uint8_t iprx = IRQNumber / 4;
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	089b      	lsrs	r3, r3, #2
 8000ca4:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section  = IRQNumber %4 ;
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	f003 0303 	and.w	r3, r3, #3
 8000cac:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = ( 8 * iprx_section) + ( 8 - NO_PR_BITS_IMPLEMENTED) ;
 8000cae:	7bbb      	ldrb	r3, [r7, #14]
 8000cb0:	00db      	lsls	r3, r3, #3
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	3304      	adds	r3, #4
 8000cb6:	737b      	strb	r3, [r7, #13]

	*(  NVIC_PR_BASE_ADDR + iprx ) |=  ( IRQPriority << shift_amount );
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000cc0:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000cc4:	6819      	ldr	r1, [r3, #0]
 8000cc6:	7b7b      	ldrb	r3, [r7, #13]
 8000cc8:	683a      	ldr	r2, [r7, #0]
 8000cca:	409a      	lsls	r2, r3
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000cd4:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	601a      	str	r2, [r3, #0]

}
 8000cdc:	bf00      	nop
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <GPIO_IRQHandling>:
 *
 * @Note              -

 */
void GPIO_IRQHandling(uint8_t PinNumber)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
	//clear the exti pr register corresponding to the pin number
	if(EXTI->PR & ( 1 << PinNumber))
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <GPIO_IRQHandling+0x3c>)
 8000cf4:	695b      	ldr	r3, [r3, #20]
 8000cf6:	79fa      	ldrb	r2, [r7, #7]
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8000cfe:	4013      	ands	r3, r2
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d009      	beq.n	8000d18 <GPIO_IRQHandling+0x30>
	{
		//clear
		EXTI->PR |= ( 1 << PinNumber);
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <GPIO_IRQHandling+0x3c>)
 8000d06:	695b      	ldr	r3, [r3, #20]
 8000d08:	79fa      	ldrb	r2, [r7, #7]
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d10:	4611      	mov	r1, r2
 8000d12:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <GPIO_IRQHandling+0x3c>)
 8000d14:	430b      	orrs	r3, r1
 8000d16:	6153      	str	r3, [r2, #20]
	}

}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	40013c00 	.word	0x40013c00

08000d28 <SPI_PeriClockControl>:
 *
 * @Note              -

 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	460b      	mov	r3, r1
 8000d32:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 8000d34:	78fb      	ldrb	r3, [r7, #3]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d120      	bne.n	8000d7c <SPI_PeriClockControl+0x54>
	{
		if(pSPIx == SPI1)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a22      	ldr	r2, [pc, #136]	; (8000dc8 <SPI_PeriClockControl+0xa0>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d106      	bne.n	8000d50 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8000d42:	4b22      	ldr	r3, [pc, #136]	; (8000dcc <SPI_PeriClockControl+0xa4>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	4a21      	ldr	r2, [pc, #132]	; (8000dcc <SPI_PeriClockControl+0xa4>)
 8000d48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d4c:	6453      	str	r3, [r2, #68]	; 0x44
        }else if (pSPIx == SPI3)
        {
            SPI3_PCLK_DI();
        }
	}
}
 8000d4e:	e035      	b.n	8000dbc <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI2)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a1f      	ldr	r2, [pc, #124]	; (8000dd0 <SPI_PeriClockControl+0xa8>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d106      	bne.n	8000d66 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000d58:	4b1c      	ldr	r3, [pc, #112]	; (8000dcc <SPI_PeriClockControl+0xa4>)
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5c:	4a1b      	ldr	r2, [pc, #108]	; (8000dcc <SPI_PeriClockControl+0xa4>)
 8000d5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d62:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d64:	e02a      	b.n	8000dbc <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI3)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a1a      	ldr	r2, [pc, #104]	; (8000dd4 <SPI_PeriClockControl+0xac>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d126      	bne.n	8000dbc <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 8000d6e:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <SPI_PeriClockControl+0xa4>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	4a16      	ldr	r2, [pc, #88]	; (8000dcc <SPI_PeriClockControl+0xa4>)
 8000d74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d78:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d7a:	e01f      	b.n	8000dbc <SPI_PeriClockControl+0x94>
        if(pSPIx == SPI1)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <SPI_PeriClockControl+0xa0>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d106      	bne.n	8000d92 <SPI_PeriClockControl+0x6a>
            SPI1_PCLK_DI();
 8000d84:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <SPI_PeriClockControl+0xa4>)
 8000d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d88:	4a10      	ldr	r2, [pc, #64]	; (8000dcc <SPI_PeriClockControl+0xa4>)
 8000d8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d8e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000d90:	e014      	b.n	8000dbc <SPI_PeriClockControl+0x94>
        }else if (pSPIx == SPI2)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a0e      	ldr	r2, [pc, #56]	; (8000dd0 <SPI_PeriClockControl+0xa8>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d106      	bne.n	8000da8 <SPI_PeriClockControl+0x80>
            SPI2_PCLK_DI();
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <SPI_PeriClockControl+0xa4>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	4a0b      	ldr	r2, [pc, #44]	; (8000dcc <SPI_PeriClockControl+0xa4>)
 8000da0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000da4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000da6:	e009      	b.n	8000dbc <SPI_PeriClockControl+0x94>
        }else if (pSPIx == SPI3)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <SPI_PeriClockControl+0xac>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d105      	bne.n	8000dbc <SPI_PeriClockControl+0x94>
            SPI3_PCLK_DI();
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <SPI_PeriClockControl+0xa4>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db4:	4a05      	ldr	r2, [pc, #20]	; (8000dcc <SPI_PeriClockControl+0xa4>)
 8000db6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000dba:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	40013000 	.word	0x40013000
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40003800 	.word	0x40003800
 8000dd4:	40003c00 	.word	0x40003c00

08000dd8 <SPI_Init>:
 *
 * @Note              -

 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]

	//peripheral clock enable

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2101      	movs	r1, #1
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff ff9e 	bl	8000d28 <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR ;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	791b      	ldrb	r3, [r3, #4]
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	461a      	mov	r2, r3
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	795b      	ldrb	r3, [r3, #5]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d104      	bne.n	8000e10 <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	e014      	b.n	8000e3a <SPI_Init+0x62>

	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	795b      	ldrb	r3, [r3, #5]
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d104      	bne.n	8000e22 <SPI_Init+0x4a>
	{
		//bidi mode should be set
		tempreg |= ( 1 << SPI_CR1_BIDIMODE);
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	e00b      	b.n	8000e3a <SPI_Init+0x62>
	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	795b      	ldrb	r3, [r3, #5]
 8000e26:	2b03      	cmp	r3, #3
 8000e28:	d107      	bne.n	8000e3a <SPI_Init+0x62>
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e30:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= ( 1 << SPI_CR1_RXONLY);
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e38:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	799b      	ldrb	r3, [r3, #6]
 8000e3e:	00db      	lsls	r3, r3, #3
 8000e40:	461a      	mov	r2, r3
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	60fb      	str	r3, [r7, #12]

	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	79db      	ldrb	r3, [r3, #7]
 8000e4c:	02db      	lsls	r3, r3, #11
 8000e4e:	461a      	mov	r2, r3
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	60fb      	str	r3, [r7, #12]

	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	7a1b      	ldrb	r3, [r3, #8]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	60fb      	str	r3, [r7, #12]

	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	7a5b      	ldrb	r3, [r3, #9]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	7a9b      	ldrb	r3, [r3, #10]
 8000e74:	025b      	lsls	r3, r3, #9
 8000e76:	461a      	mov	r2, r3
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	601a      	str	r2, [r3, #0]

}
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <SPI_PeripheralControl>:
 *
 * @Note              -

 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b083      	sub	sp, #12
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
 8000e96:	460b      	mov	r3, r1
 8000e98:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000e9a:	78fb      	ldrb	r3, [r7, #3]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d106      	bne.n	8000eae <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SPE);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
	}


}
 8000eac:	e005      	b.n	8000eba <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	601a      	str	r2, [r3, #0]
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <SPI_GetFlagStatus>:


}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx , uint32_t FlagName)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b083      	sub	sp, #12
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
 8000ece:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	689a      	ldr	r2, [r3, #8]
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000edc:	2301      	movs	r3, #1
 8000ede:	e000      	b.n	8000ee2 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <SPI_SSOEConfig>:
 *
 * @Note              -

 */
void  SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000efa:	78fb      	ldrb	r3, [r7, #3]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d106      	bne.n	8000f0e <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (1 << SPI_CR2_SSOE);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f043 0204 	orr.w	r2, r3, #4
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	605a      	str	r2, [r3, #4]
	{
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
	}


}
 8000f0c:	e005      	b.n	8000f1a <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f023 0204 	bic.w	r2, r3, #4
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	605a      	str	r2, [r3, #4]
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
	...

08000f28 <SPI_IRQInterruptConfig>:
 *
 * @Note              -

 */
void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	460a      	mov	r2, r1
 8000f32:	71fb      	strb	r3, [r7, #7]
 8000f34:	4613      	mov	r3, r2
 8000f36:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE)
 8000f38:	79bb      	ldrb	r3, [r7, #6]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d133      	bne.n	8000fa6 <SPI_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	2b1f      	cmp	r3, #31
 8000f42:	d80a      	bhi.n	8000f5a <SPI_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 8000f44:	4b35      	ldr	r3, [pc, #212]	; (800101c <SPI_IRQInterruptConfig+0xf4>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	79fa      	ldrb	r2, [r7, #7]
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f50:	4611      	mov	r1, r2
 8000f52:	4a32      	ldr	r2, [pc, #200]	; (800101c <SPI_IRQInterruptConfig+0xf4>)
 8000f54:	430b      	orrs	r3, r1
 8000f56:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
 8000f58:	e059      	b.n	800100e <SPI_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2b1f      	cmp	r3, #31
 8000f5e:	d90f      	bls.n	8000f80 <SPI_IRQInterruptConfig+0x58>
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	2b3f      	cmp	r3, #63	; 0x3f
 8000f64:	d80c      	bhi.n	8000f80 <SPI_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8000f66:	4b2e      	ldr	r3, [pc, #184]	; (8001020 <SPI_IRQInterruptConfig+0xf8>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	79fa      	ldrb	r2, [r7, #7]
 8000f6c:	f002 021f 	and.w	r2, r2, #31
 8000f70:	2101      	movs	r1, #1
 8000f72:	fa01 f202 	lsl.w	r2, r1, r2
 8000f76:	4611      	mov	r1, r2
 8000f78:	4a29      	ldr	r2, [pc, #164]	; (8001020 <SPI_IRQInterruptConfig+0xf8>)
 8000f7a:	430b      	orrs	r3, r1
 8000f7c:	6013      	str	r3, [r2, #0]
 8000f7e:	e046      	b.n	800100e <SPI_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	2b3f      	cmp	r3, #63	; 0x3f
 8000f84:	d943      	bls.n	800100e <SPI_IRQInterruptConfig+0xe6>
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	2b5f      	cmp	r3, #95	; 0x5f
 8000f8a:	d840      	bhi.n	800100e <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ISER3 |= ( 1 << (IRQNumber % 64) );
 8000f8c:	4b25      	ldr	r3, [pc, #148]	; (8001024 <SPI_IRQInterruptConfig+0xfc>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	79fa      	ldrb	r2, [r7, #7]
 8000f92:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000f96:	2101      	movs	r1, #1
 8000f98:	fa01 f202 	lsl.w	r2, r1, r2
 8000f9c:	4611      	mov	r1, r2
 8000f9e:	4a21      	ldr	r2, [pc, #132]	; (8001024 <SPI_IRQInterruptConfig+0xfc>)
 8000fa0:	430b      	orrs	r3, r1
 8000fa2:	6013      	str	r3, [r2, #0]
}
 8000fa4:	e033      	b.n	800100e <SPI_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	2b1f      	cmp	r3, #31
 8000faa:	d80a      	bhi.n	8000fc2 <SPI_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8000fac:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <SPI_IRQInterruptConfig+0x100>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	79fa      	ldrb	r2, [r7, #7]
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb8:	4611      	mov	r1, r2
 8000fba:	4a1b      	ldr	r2, [pc, #108]	; (8001028 <SPI_IRQInterruptConfig+0x100>)
 8000fbc:	430b      	orrs	r3, r1
 8000fbe:	6013      	str	r3, [r2, #0]
}
 8000fc0:	e025      	b.n	800100e <SPI_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	2b1f      	cmp	r3, #31
 8000fc6:	d90f      	bls.n	8000fe8 <SPI_IRQInterruptConfig+0xc0>
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	2b3f      	cmp	r3, #63	; 0x3f
 8000fcc:	d80c      	bhi.n	8000fe8 <SPI_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 8000fce:	4b17      	ldr	r3, [pc, #92]	; (800102c <SPI_IRQInterruptConfig+0x104>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	79fa      	ldrb	r2, [r7, #7]
 8000fd4:	f002 021f 	and.w	r2, r2, #31
 8000fd8:	2101      	movs	r1, #1
 8000fda:	fa01 f202 	lsl.w	r2, r1, r2
 8000fde:	4611      	mov	r1, r2
 8000fe0:	4a12      	ldr	r2, [pc, #72]	; (800102c <SPI_IRQInterruptConfig+0x104>)
 8000fe2:	430b      	orrs	r3, r1
 8000fe4:	6013      	str	r3, [r2, #0]
 8000fe6:	e012      	b.n	800100e <SPI_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 6 && IRQNumber < 96 )
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	2b05      	cmp	r3, #5
 8000fec:	d90f      	bls.n	800100e <SPI_IRQInterruptConfig+0xe6>
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	2b5f      	cmp	r3, #95	; 0x5f
 8000ff2:	d80c      	bhi.n	800100e <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <SPI_IRQInterruptConfig+0x108>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	79fa      	ldrb	r2, [r7, #7]
 8000ffa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000ffe:	2101      	movs	r1, #1
 8001000:	fa01 f202 	lsl.w	r2, r1, r2
 8001004:	4611      	mov	r1, r2
 8001006:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <SPI_IRQInterruptConfig+0x108>)
 8001008:	430b      	orrs	r3, r1
 800100a:	6013      	str	r3, [r2, #0]
}
 800100c:	e7ff      	b.n	800100e <SPI_IRQInterruptConfig+0xe6>
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000e100 	.word	0xe000e100
 8001020:	e000e104 	.word	0xe000e104
 8001024:	e000e10c 	.word	0xe000e10c
 8001028:	e000e180 	.word	0xe000e180
 800102c:	e000e184 	.word	0xe000e184
 8001030:	e000e18c 	.word	0xe000e18c

08001034 <SPI_SendDataIT>:

}


uint8_t SPI_SendDataIT(SPI_Handle_t *pSPIHandle,uint8_t *pTxBuffer, uint32_t Len)
{
 8001034:	b480      	push	{r7}
 8001036:	b087      	sub	sp, #28
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandle->TxState;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	7f1b      	ldrb	r3, [r3, #28]
 8001044:	75fb      	strb	r3, [r7, #23]

	if(state != SPI_BUSY_IN_TX)
 8001046:	7dfb      	ldrb	r3, [r7, #23]
 8001048:	2b02      	cmp	r3, #2
 800104a:	d010      	beq.n	800106e <SPI_SendDataIT+0x3a>
	{
		//1 . Save the Tx buffer address and Len information in some global variables
		pSPIHandle->pTxBuffer = pTxBuffer;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen = Len;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	615a      	str	r2, [r3, #20]
		//2.  Mark the SPI state as busy in transmission so that
		//    no other code can take over same SPI peripheral until transmission is over
		pSPIHandle->TxState = SPI_BUSY_IN_TX;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2202      	movs	r2, #2
 800105c:	771a      	strb	r2, [r3, #28]

		//3. Enable the TXEIE control bit to get interrupt whenever TXE flag is set in SR
		pSPIHandle->pSPIx->CR2 |= ( 1 << SPI_CR2_TXEIE );
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	685a      	ldr	r2, [r3, #4]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800106c:	605a      	str	r2, [r3, #4]

	}


	return state;
 800106e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001070:	4618      	mov	r0, r3
 8001072:	371c      	adds	r7, #28
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <SPI_ReceiveDataIT>:


uint8_t SPI_ReceiveDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pRxBuffer, uint32_t Len)
{
 800107c:	b480      	push	{r7}
 800107e:	b087      	sub	sp, #28
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandle->RxState;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	7f5b      	ldrb	r3, [r3, #29]
 800108c:	75fb      	strb	r3, [r7, #23]

	if(state != SPI_BUSY_IN_RX)
 800108e:	7dfb      	ldrb	r3, [r7, #23]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d010      	beq.n	80010b6 <SPI_ReceiveDataIT+0x3a>
	{
		//1 . Save the Rx buffer address and Len information in some global variables
		pSPIHandle->pRxBuffer = pRxBuffer;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	611a      	str	r2, [r3, #16]
		pSPIHandle->RxLen = Len;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	619a      	str	r2, [r3, #24]
		//2.  Mark the SPI state as busy in reception so that
		//    no other code can take over same SPI peripheral until reception is over
		pSPIHandle->RxState = SPI_BUSY_IN_RX;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2201      	movs	r2, #1
 80010a4:	775a      	strb	r2, [r3, #29]

		//3. Enable the RXNEIE control bit to get interrupt whenever RXNEIE flag is set in SR
		pSPIHandle->pSPIx->CR2 |= ( 1 << SPI_CR2_RXNEIE );
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010b4:	605a      	str	r2, [r3, #4]

	}


	return state;
 80010b6:	7dfb      	ldrb	r3, [r7, #23]

}
 80010b8:	4618      	mov	r0, r3
 80010ba:	371c      	adds	r7, #28
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <SPI_IRQHandling>:




void SPI_IRQHandling(SPI_Handle_t *pHandle)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]

	uint8_t temp1 , temp2;
	//first lets check for TXE
	temp1 = pHandle->pSPIx->SR & ( 1 << SPI_SR_TXE);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & ( 1 << SPI_CR2_TXEIE);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80010e6:	73bb      	strb	r3, [r7, #14]

	if( temp1 && temp2)
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d005      	beq.n	80010fa <SPI_IRQHandling+0x36>
 80010ee:	7bbb      	ldrb	r3, [r7, #14]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d002      	beq.n	80010fa <SPI_IRQHandling+0x36>
	{
		//handle TXE
		spi_txe_interrupt_handle(pHandle);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f000 f832 	bl	800115e <spi_txe_interrupt_handle>
	}

	// check for RXNE
	temp1 = pHandle->pSPIx->SR & ( 1 << SPI_SR_RXNE);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	b2db      	uxtb	r3, r3
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & ( 1 << SPI_CR2_RXNEIE);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001114:	73bb      	strb	r3, [r7, #14]

	if( temp1 && temp2)
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d005      	beq.n	8001128 <SPI_IRQHandling+0x64>
 800111c:	7bbb      	ldrb	r3, [r7, #14]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d002      	beq.n	8001128 <SPI_IRQHandling+0x64>
	{
		//handle RXNE
		spi_rxne_interrupt_handle(pHandle);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f000 f85b 	bl	80011de <spi_rxne_interrupt_handle>
	}

	// check for ovr flag
	temp1 = pHandle->pSPIx->SR & ( 1 << SPI_SR_OVR);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	b2db      	uxtb	r3, r3
 8001130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001134:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & ( 1 << SPI_CR2_ERRIE);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	f003 0320 	and.w	r3, r3, #32
 8001142:	73bb      	strb	r3, [r7, #14]

	if( temp1 && temp2)
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d005      	beq.n	8001156 <SPI_IRQHandling+0x92>
 800114a:	7bbb      	ldrb	r3, [r7, #14]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d002      	beq.n	8001156 <SPI_IRQHandling+0x92>
	{
		//handle ovr error
		spi_ovr_err_interrupt_handle(pHandle);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f000 f886 	bl	8001262 <spi_ovr_err_interrupt_handle>
	}


}
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <spi_txe_interrupt_handle>:


//some helper function implementations

static void  spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
	// check the DFF bit in CR1
	if( (pSPIHandle->pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) )
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001170:	2b00      	cmp	r3, #0
 8001172:	d015      	beq.n	80011a0 <spi_txe_interrupt_handle+0x42>
	{
		//16 bit DFF
		//1. load the data in to the DR
		pSPIHandle->pSPIx->DR =   *((uint16_t*)pSPIHandle->pTxBuffer);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	881a      	ldrh	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen--;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	695b      	ldr	r3, [r3, #20]
 8001184:	1e5a      	subs	r2, r3, #1
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	615a      	str	r2, [r3, #20]
		pSPIHandle->TxLen--;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	1e5a      	subs	r2, r3, #1
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	615a      	str	r2, [r3, #20]
		(uint16_t*)pSPIHandle->pTxBuffer++;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	1c5a      	adds	r2, r3, #1
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	e00f      	b.n	80011c0 <spi_txe_interrupt_handle+0x62>
	}else
	{
		//8 bit DFF
		pSPIHandle->pSPIx->DR =   *pSPIHandle->pTxBuffer;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	781a      	ldrb	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen--;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	695b      	ldr	r3, [r3, #20]
 80011b0:	1e5a      	subs	r2, r3, #1
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	615a      	str	r2, [r3, #20]
		pSPIHandle->pTxBuffer++;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	1c5a      	adds	r2, r3, #1
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	60da      	str	r2, [r3, #12]
	}

	if(! pSPIHandle->TxLen)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	695b      	ldr	r3, [r3, #20]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d106      	bne.n	80011d6 <spi_txe_interrupt_handle+0x78>
	{
		//TxLen is zero , so close the spi transmission and inform the application that
		//TX is over.

		//this prevents interrupts from setting up of TXE flag
		SPI_CloseTransmisson(pSPIHandle);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f000 f862 	bl	8001292 <SPI_CloseTransmisson>
		SPI_ApplicationEventCallback(pSPIHandle,SPI_EVENT_TX_CMPLT);
 80011ce:	2101      	movs	r1, #1
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff f943 	bl	800045c <SPI_ApplicationEventCallback>
	}

}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <spi_rxne_interrupt_handle>:


static void  spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
	//do rxing as per the dff
	if(pSPIHandle->pSPIx->CR1 & ( 1 << 11))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d016      	beq.n	8001222 <spi_rxne_interrupt_handle+0x44>
	{
		//16 bit
		*((uint16_t*)pSPIHandle->pRxBuffer) = (uint16_t) pSPIHandle->pSPIx->DR;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	68da      	ldr	r2, [r3, #12]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	b292      	uxth	r2, r2
 8001200:	801a      	strh	r2, [r3, #0]
		pSPIHandle->RxLen -= 2;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	1e9a      	subs	r2, r3, #2
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	619a      	str	r2, [r3, #24]
		pSPIHandle->pRxBuffer++;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	1c5a      	adds	r2, r3, #1
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	611a      	str	r2, [r3, #16]
		pSPIHandle->pRxBuffer++;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	691b      	ldr	r3, [r3, #16]
 800121a:	1c5a      	adds	r2, r3, #1
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	611a      	str	r2, [r3, #16]
 8001220:	e010      	b.n	8001244 <spi_rxne_interrupt_handle+0x66>

	}else
	{
		//8 bit
		*(pSPIHandle->pRxBuffer) = (uint8_t) pSPIHandle->pSPIx->DR;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	68da      	ldr	r2, [r3, #12]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	701a      	strb	r2, [r3, #0]
		pSPIHandle->RxLen--;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	1e5a      	subs	r2, r3, #1
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	619a      	str	r2, [r3, #24]
		pSPIHandle->pRxBuffer++;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	1c5a      	adds	r2, r3, #1
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	611a      	str	r2, [r3, #16]
	}

	if(! pSPIHandle->RxLen)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d106      	bne.n	800125a <spi_rxne_interrupt_handle+0x7c>
	{
		//reception is complete
		SPI_CloseReception(pSPIHandle);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f000 f83b 	bl	80012c8 <SPI_CloseReception>
		SPI_ApplicationEventCallback(pSPIHandle,SPI_EVENT_RX_CMPLT);
 8001252:	2102      	movs	r1, #2
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff f901 	bl	800045c <SPI_ApplicationEventCallback>
	}

}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <spi_ovr_err_interrupt_handle>:


static void  spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b084      	sub	sp, #16
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]

	uint8_t temp;
	//1. clear the ovr flag
	if(pSPIHandle->TxState != SPI_BUSY_IN_TX)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	7f1b      	ldrb	r3, [r3, #28]
 800126e:	2b02      	cmp	r3, #2
 8001270:	d007      	beq.n	8001282 <spi_ovr_err_interrupt_handle+0x20>
	{
		temp = pSPIHandle->pSPIx->DR;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	73fb      	strb	r3, [r7, #15]
		temp = pSPIHandle->pSPIx->SR;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	73fb      	strb	r3, [r7, #15]
	}
	(void)temp;
	//2. inform the application
	SPI_ApplicationEventCallback(pSPIHandle,SPI_EVENT_OVR_ERR);
 8001282:	2103      	movs	r1, #3
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff f8e9 	bl	800045c <SPI_ApplicationEventCallback>

}
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <SPI_CloseTransmisson>:


void SPI_CloseTransmisson(SPI_Handle_t *pSPIHandle)
{
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->CR2 &= ~( 1 << SPI_CR2_TXEIE);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012a8:	605a      	str	r2, [r3, #4]
	pSPIHandle->pTxBuffer = NULL;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	60da      	str	r2, [r3, #12]
	pSPIHandle->TxLen = 0;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	615a      	str	r2, [r3, #20]
	pSPIHandle->TxState = SPI_READY;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	771a      	strb	r2, [r3, #28]

}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <SPI_CloseReception>:

void SPI_CloseReception(SPI_Handle_t *pSPIHandle)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->CR2 &= ~( 1 << SPI_CR2_RXNEIE);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012de:	605a      	str	r2, [r3, #4]
	pSPIHandle->pRxBuffer = NULL;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]
	pSPIHandle->RxLen = 0;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
	pSPIHandle->RxState = SPI_READY;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	775a      	strb	r2, [r3, #29]

}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <__errno>:
 8001300:	4b01      	ldr	r3, [pc, #4]	; (8001308 <__errno+0x8>)
 8001302:	6818      	ldr	r0, [r3, #0]
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	20000000 	.word	0x20000000

0800130c <__libc_init_array>:
 800130c:	b570      	push	{r4, r5, r6, lr}
 800130e:	4d0d      	ldr	r5, [pc, #52]	; (8001344 <__libc_init_array+0x38>)
 8001310:	4c0d      	ldr	r4, [pc, #52]	; (8001348 <__libc_init_array+0x3c>)
 8001312:	1b64      	subs	r4, r4, r5
 8001314:	10a4      	asrs	r4, r4, #2
 8001316:	2600      	movs	r6, #0
 8001318:	42a6      	cmp	r6, r4
 800131a:	d109      	bne.n	8001330 <__libc_init_array+0x24>
 800131c:	4d0b      	ldr	r5, [pc, #44]	; (800134c <__libc_init_array+0x40>)
 800131e:	4c0c      	ldr	r4, [pc, #48]	; (8001350 <__libc_init_array+0x44>)
 8001320:	f000 ffae 	bl	8002280 <_init>
 8001324:	1b64      	subs	r4, r4, r5
 8001326:	10a4      	asrs	r4, r4, #2
 8001328:	2600      	movs	r6, #0
 800132a:	42a6      	cmp	r6, r4
 800132c:	d105      	bne.n	800133a <__libc_init_array+0x2e>
 800132e:	bd70      	pop	{r4, r5, r6, pc}
 8001330:	f855 3b04 	ldr.w	r3, [r5], #4
 8001334:	4798      	blx	r3
 8001336:	3601      	adds	r6, #1
 8001338:	e7ee      	b.n	8001318 <__libc_init_array+0xc>
 800133a:	f855 3b04 	ldr.w	r3, [r5], #4
 800133e:	4798      	blx	r3
 8001340:	3601      	adds	r6, #1
 8001342:	e7f2      	b.n	800132a <__libc_init_array+0x1e>
 8001344:	08002340 	.word	0x08002340
 8001348:	08002340 	.word	0x08002340
 800134c:	08002340 	.word	0x08002340
 8001350:	08002344 	.word	0x08002344

08001354 <memset>:
 8001354:	4402      	add	r2, r0
 8001356:	4603      	mov	r3, r0
 8001358:	4293      	cmp	r3, r2
 800135a:	d100      	bne.n	800135e <memset+0xa>
 800135c:	4770      	bx	lr
 800135e:	f803 1b01 	strb.w	r1, [r3], #1
 8001362:	e7f9      	b.n	8001358 <memset+0x4>

08001364 <iprintf>:
 8001364:	b40f      	push	{r0, r1, r2, r3}
 8001366:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <iprintf+0x2c>)
 8001368:	b513      	push	{r0, r1, r4, lr}
 800136a:	681c      	ldr	r4, [r3, #0]
 800136c:	b124      	cbz	r4, 8001378 <iprintf+0x14>
 800136e:	69a3      	ldr	r3, [r4, #24]
 8001370:	b913      	cbnz	r3, 8001378 <iprintf+0x14>
 8001372:	4620      	mov	r0, r4
 8001374:	f000 f866 	bl	8001444 <__sinit>
 8001378:	ab05      	add	r3, sp, #20
 800137a:	9a04      	ldr	r2, [sp, #16]
 800137c:	68a1      	ldr	r1, [r4, #8]
 800137e:	9301      	str	r3, [sp, #4]
 8001380:	4620      	mov	r0, r4
 8001382:	f000 f9bd 	bl	8001700 <_vfiprintf_r>
 8001386:	b002      	add	sp, #8
 8001388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800138c:	b004      	add	sp, #16
 800138e:	4770      	bx	lr
 8001390:	20000000 	.word	0x20000000

08001394 <std>:
 8001394:	2300      	movs	r3, #0
 8001396:	b510      	push	{r4, lr}
 8001398:	4604      	mov	r4, r0
 800139a:	e9c0 3300 	strd	r3, r3, [r0]
 800139e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80013a2:	6083      	str	r3, [r0, #8]
 80013a4:	8181      	strh	r1, [r0, #12]
 80013a6:	6643      	str	r3, [r0, #100]	; 0x64
 80013a8:	81c2      	strh	r2, [r0, #14]
 80013aa:	6183      	str	r3, [r0, #24]
 80013ac:	4619      	mov	r1, r3
 80013ae:	2208      	movs	r2, #8
 80013b0:	305c      	adds	r0, #92	; 0x5c
 80013b2:	f7ff ffcf 	bl	8001354 <memset>
 80013b6:	4b05      	ldr	r3, [pc, #20]	; (80013cc <std+0x38>)
 80013b8:	6263      	str	r3, [r4, #36]	; 0x24
 80013ba:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <std+0x3c>)
 80013bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80013be:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <std+0x40>)
 80013c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80013c2:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <std+0x44>)
 80013c4:	6224      	str	r4, [r4, #32]
 80013c6:	6323      	str	r3, [r4, #48]	; 0x30
 80013c8:	bd10      	pop	{r4, pc}
 80013ca:	bf00      	nop
 80013cc:	08001ca9 	.word	0x08001ca9
 80013d0:	08001ccb 	.word	0x08001ccb
 80013d4:	08001d03 	.word	0x08001d03
 80013d8:	08001d27 	.word	0x08001d27

080013dc <_cleanup_r>:
 80013dc:	4901      	ldr	r1, [pc, #4]	; (80013e4 <_cleanup_r+0x8>)
 80013de:	f000 b8af 	b.w	8001540 <_fwalk_reent>
 80013e2:	bf00      	nop
 80013e4:	08002001 	.word	0x08002001

080013e8 <__sfmoreglue>:
 80013e8:	b570      	push	{r4, r5, r6, lr}
 80013ea:	2268      	movs	r2, #104	; 0x68
 80013ec:	1e4d      	subs	r5, r1, #1
 80013ee:	4355      	muls	r5, r2
 80013f0:	460e      	mov	r6, r1
 80013f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80013f6:	f000 f8e5 	bl	80015c4 <_malloc_r>
 80013fa:	4604      	mov	r4, r0
 80013fc:	b140      	cbz	r0, 8001410 <__sfmoreglue+0x28>
 80013fe:	2100      	movs	r1, #0
 8001400:	e9c0 1600 	strd	r1, r6, [r0]
 8001404:	300c      	adds	r0, #12
 8001406:	60a0      	str	r0, [r4, #8]
 8001408:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800140c:	f7ff ffa2 	bl	8001354 <memset>
 8001410:	4620      	mov	r0, r4
 8001412:	bd70      	pop	{r4, r5, r6, pc}

08001414 <__sfp_lock_acquire>:
 8001414:	4801      	ldr	r0, [pc, #4]	; (800141c <__sfp_lock_acquire+0x8>)
 8001416:	f000 b8b3 	b.w	8001580 <__retarget_lock_acquire_recursive>
 800141a:	bf00      	nop
 800141c:	200002a1 	.word	0x200002a1

08001420 <__sfp_lock_release>:
 8001420:	4801      	ldr	r0, [pc, #4]	; (8001428 <__sfp_lock_release+0x8>)
 8001422:	f000 b8ae 	b.w	8001582 <__retarget_lock_release_recursive>
 8001426:	bf00      	nop
 8001428:	200002a1 	.word	0x200002a1

0800142c <__sinit_lock_acquire>:
 800142c:	4801      	ldr	r0, [pc, #4]	; (8001434 <__sinit_lock_acquire+0x8>)
 800142e:	f000 b8a7 	b.w	8001580 <__retarget_lock_acquire_recursive>
 8001432:	bf00      	nop
 8001434:	200002a2 	.word	0x200002a2

08001438 <__sinit_lock_release>:
 8001438:	4801      	ldr	r0, [pc, #4]	; (8001440 <__sinit_lock_release+0x8>)
 800143a:	f000 b8a2 	b.w	8001582 <__retarget_lock_release_recursive>
 800143e:	bf00      	nop
 8001440:	200002a2 	.word	0x200002a2

08001444 <__sinit>:
 8001444:	b510      	push	{r4, lr}
 8001446:	4604      	mov	r4, r0
 8001448:	f7ff fff0 	bl	800142c <__sinit_lock_acquire>
 800144c:	69a3      	ldr	r3, [r4, #24]
 800144e:	b11b      	cbz	r3, 8001458 <__sinit+0x14>
 8001450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001454:	f7ff bff0 	b.w	8001438 <__sinit_lock_release>
 8001458:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800145c:	6523      	str	r3, [r4, #80]	; 0x50
 800145e:	4b13      	ldr	r3, [pc, #76]	; (80014ac <__sinit+0x68>)
 8001460:	4a13      	ldr	r2, [pc, #76]	; (80014b0 <__sinit+0x6c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	62a2      	str	r2, [r4, #40]	; 0x28
 8001466:	42a3      	cmp	r3, r4
 8001468:	bf04      	itt	eq
 800146a:	2301      	moveq	r3, #1
 800146c:	61a3      	streq	r3, [r4, #24]
 800146e:	4620      	mov	r0, r4
 8001470:	f000 f820 	bl	80014b4 <__sfp>
 8001474:	6060      	str	r0, [r4, #4]
 8001476:	4620      	mov	r0, r4
 8001478:	f000 f81c 	bl	80014b4 <__sfp>
 800147c:	60a0      	str	r0, [r4, #8]
 800147e:	4620      	mov	r0, r4
 8001480:	f000 f818 	bl	80014b4 <__sfp>
 8001484:	2200      	movs	r2, #0
 8001486:	60e0      	str	r0, [r4, #12]
 8001488:	2104      	movs	r1, #4
 800148a:	6860      	ldr	r0, [r4, #4]
 800148c:	f7ff ff82 	bl	8001394 <std>
 8001490:	68a0      	ldr	r0, [r4, #8]
 8001492:	2201      	movs	r2, #1
 8001494:	2109      	movs	r1, #9
 8001496:	f7ff ff7d 	bl	8001394 <std>
 800149a:	68e0      	ldr	r0, [r4, #12]
 800149c:	2202      	movs	r2, #2
 800149e:	2112      	movs	r1, #18
 80014a0:	f7ff ff78 	bl	8001394 <std>
 80014a4:	2301      	movs	r3, #1
 80014a6:	61a3      	str	r3, [r4, #24]
 80014a8:	e7d2      	b.n	8001450 <__sinit+0xc>
 80014aa:	bf00      	nop
 80014ac:	080022a8 	.word	0x080022a8
 80014b0:	080013dd 	.word	0x080013dd

080014b4 <__sfp>:
 80014b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014b6:	4607      	mov	r7, r0
 80014b8:	f7ff ffac 	bl	8001414 <__sfp_lock_acquire>
 80014bc:	4b1e      	ldr	r3, [pc, #120]	; (8001538 <__sfp+0x84>)
 80014be:	681e      	ldr	r6, [r3, #0]
 80014c0:	69b3      	ldr	r3, [r6, #24]
 80014c2:	b913      	cbnz	r3, 80014ca <__sfp+0x16>
 80014c4:	4630      	mov	r0, r6
 80014c6:	f7ff ffbd 	bl	8001444 <__sinit>
 80014ca:	3648      	adds	r6, #72	; 0x48
 80014cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80014d0:	3b01      	subs	r3, #1
 80014d2:	d503      	bpl.n	80014dc <__sfp+0x28>
 80014d4:	6833      	ldr	r3, [r6, #0]
 80014d6:	b30b      	cbz	r3, 800151c <__sfp+0x68>
 80014d8:	6836      	ldr	r6, [r6, #0]
 80014da:	e7f7      	b.n	80014cc <__sfp+0x18>
 80014dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80014e0:	b9d5      	cbnz	r5, 8001518 <__sfp+0x64>
 80014e2:	4b16      	ldr	r3, [pc, #88]	; (800153c <__sfp+0x88>)
 80014e4:	60e3      	str	r3, [r4, #12]
 80014e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80014ea:	6665      	str	r5, [r4, #100]	; 0x64
 80014ec:	f000 f847 	bl	800157e <__retarget_lock_init_recursive>
 80014f0:	f7ff ff96 	bl	8001420 <__sfp_lock_release>
 80014f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80014f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80014fc:	6025      	str	r5, [r4, #0]
 80014fe:	61a5      	str	r5, [r4, #24]
 8001500:	2208      	movs	r2, #8
 8001502:	4629      	mov	r1, r5
 8001504:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001508:	f7ff ff24 	bl	8001354 <memset>
 800150c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001510:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001514:	4620      	mov	r0, r4
 8001516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001518:	3468      	adds	r4, #104	; 0x68
 800151a:	e7d9      	b.n	80014d0 <__sfp+0x1c>
 800151c:	2104      	movs	r1, #4
 800151e:	4638      	mov	r0, r7
 8001520:	f7ff ff62 	bl	80013e8 <__sfmoreglue>
 8001524:	4604      	mov	r4, r0
 8001526:	6030      	str	r0, [r6, #0]
 8001528:	2800      	cmp	r0, #0
 800152a:	d1d5      	bne.n	80014d8 <__sfp+0x24>
 800152c:	f7ff ff78 	bl	8001420 <__sfp_lock_release>
 8001530:	230c      	movs	r3, #12
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	e7ee      	b.n	8001514 <__sfp+0x60>
 8001536:	bf00      	nop
 8001538:	080022a8 	.word	0x080022a8
 800153c:	ffff0001 	.word	0xffff0001

08001540 <_fwalk_reent>:
 8001540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001544:	4606      	mov	r6, r0
 8001546:	4688      	mov	r8, r1
 8001548:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800154c:	2700      	movs	r7, #0
 800154e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001552:	f1b9 0901 	subs.w	r9, r9, #1
 8001556:	d505      	bpl.n	8001564 <_fwalk_reent+0x24>
 8001558:	6824      	ldr	r4, [r4, #0]
 800155a:	2c00      	cmp	r4, #0
 800155c:	d1f7      	bne.n	800154e <_fwalk_reent+0xe>
 800155e:	4638      	mov	r0, r7
 8001560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001564:	89ab      	ldrh	r3, [r5, #12]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d907      	bls.n	800157a <_fwalk_reent+0x3a>
 800156a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800156e:	3301      	adds	r3, #1
 8001570:	d003      	beq.n	800157a <_fwalk_reent+0x3a>
 8001572:	4629      	mov	r1, r5
 8001574:	4630      	mov	r0, r6
 8001576:	47c0      	blx	r8
 8001578:	4307      	orrs	r7, r0
 800157a:	3568      	adds	r5, #104	; 0x68
 800157c:	e7e9      	b.n	8001552 <_fwalk_reent+0x12>

0800157e <__retarget_lock_init_recursive>:
 800157e:	4770      	bx	lr

08001580 <__retarget_lock_acquire_recursive>:
 8001580:	4770      	bx	lr

08001582 <__retarget_lock_release_recursive>:
 8001582:	4770      	bx	lr

08001584 <sbrk_aligned>:
 8001584:	b570      	push	{r4, r5, r6, lr}
 8001586:	4e0e      	ldr	r6, [pc, #56]	; (80015c0 <sbrk_aligned+0x3c>)
 8001588:	460c      	mov	r4, r1
 800158a:	6831      	ldr	r1, [r6, #0]
 800158c:	4605      	mov	r5, r0
 800158e:	b911      	cbnz	r1, 8001596 <sbrk_aligned+0x12>
 8001590:	f000 fb7a 	bl	8001c88 <_sbrk_r>
 8001594:	6030      	str	r0, [r6, #0]
 8001596:	4621      	mov	r1, r4
 8001598:	4628      	mov	r0, r5
 800159a:	f000 fb75 	bl	8001c88 <_sbrk_r>
 800159e:	1c43      	adds	r3, r0, #1
 80015a0:	d00a      	beq.n	80015b8 <sbrk_aligned+0x34>
 80015a2:	1cc4      	adds	r4, r0, #3
 80015a4:	f024 0403 	bic.w	r4, r4, #3
 80015a8:	42a0      	cmp	r0, r4
 80015aa:	d007      	beq.n	80015bc <sbrk_aligned+0x38>
 80015ac:	1a21      	subs	r1, r4, r0
 80015ae:	4628      	mov	r0, r5
 80015b0:	f000 fb6a 	bl	8001c88 <_sbrk_r>
 80015b4:	3001      	adds	r0, #1
 80015b6:	d101      	bne.n	80015bc <sbrk_aligned+0x38>
 80015b8:	f04f 34ff 	mov.w	r4, #4294967295
 80015bc:	4620      	mov	r0, r4
 80015be:	bd70      	pop	{r4, r5, r6, pc}
 80015c0:	200002a8 	.word	0x200002a8

080015c4 <_malloc_r>:
 80015c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015c8:	1ccd      	adds	r5, r1, #3
 80015ca:	f025 0503 	bic.w	r5, r5, #3
 80015ce:	3508      	adds	r5, #8
 80015d0:	2d0c      	cmp	r5, #12
 80015d2:	bf38      	it	cc
 80015d4:	250c      	movcc	r5, #12
 80015d6:	2d00      	cmp	r5, #0
 80015d8:	4607      	mov	r7, r0
 80015da:	db01      	blt.n	80015e0 <_malloc_r+0x1c>
 80015dc:	42a9      	cmp	r1, r5
 80015de:	d905      	bls.n	80015ec <_malloc_r+0x28>
 80015e0:	230c      	movs	r3, #12
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	2600      	movs	r6, #0
 80015e6:	4630      	mov	r0, r6
 80015e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015ec:	4e2e      	ldr	r6, [pc, #184]	; (80016a8 <_malloc_r+0xe4>)
 80015ee:	f000 fdbb 	bl	8002168 <__malloc_lock>
 80015f2:	6833      	ldr	r3, [r6, #0]
 80015f4:	461c      	mov	r4, r3
 80015f6:	bb34      	cbnz	r4, 8001646 <_malloc_r+0x82>
 80015f8:	4629      	mov	r1, r5
 80015fa:	4638      	mov	r0, r7
 80015fc:	f7ff ffc2 	bl	8001584 <sbrk_aligned>
 8001600:	1c43      	adds	r3, r0, #1
 8001602:	4604      	mov	r4, r0
 8001604:	d14d      	bne.n	80016a2 <_malloc_r+0xde>
 8001606:	6834      	ldr	r4, [r6, #0]
 8001608:	4626      	mov	r6, r4
 800160a:	2e00      	cmp	r6, #0
 800160c:	d140      	bne.n	8001690 <_malloc_r+0xcc>
 800160e:	6823      	ldr	r3, [r4, #0]
 8001610:	4631      	mov	r1, r6
 8001612:	4638      	mov	r0, r7
 8001614:	eb04 0803 	add.w	r8, r4, r3
 8001618:	f000 fb36 	bl	8001c88 <_sbrk_r>
 800161c:	4580      	cmp	r8, r0
 800161e:	d13a      	bne.n	8001696 <_malloc_r+0xd2>
 8001620:	6821      	ldr	r1, [r4, #0]
 8001622:	3503      	adds	r5, #3
 8001624:	1a6d      	subs	r5, r5, r1
 8001626:	f025 0503 	bic.w	r5, r5, #3
 800162a:	3508      	adds	r5, #8
 800162c:	2d0c      	cmp	r5, #12
 800162e:	bf38      	it	cc
 8001630:	250c      	movcc	r5, #12
 8001632:	4629      	mov	r1, r5
 8001634:	4638      	mov	r0, r7
 8001636:	f7ff ffa5 	bl	8001584 <sbrk_aligned>
 800163a:	3001      	adds	r0, #1
 800163c:	d02b      	beq.n	8001696 <_malloc_r+0xd2>
 800163e:	6823      	ldr	r3, [r4, #0]
 8001640:	442b      	add	r3, r5
 8001642:	6023      	str	r3, [r4, #0]
 8001644:	e00e      	b.n	8001664 <_malloc_r+0xa0>
 8001646:	6822      	ldr	r2, [r4, #0]
 8001648:	1b52      	subs	r2, r2, r5
 800164a:	d41e      	bmi.n	800168a <_malloc_r+0xc6>
 800164c:	2a0b      	cmp	r2, #11
 800164e:	d916      	bls.n	800167e <_malloc_r+0xba>
 8001650:	1961      	adds	r1, r4, r5
 8001652:	42a3      	cmp	r3, r4
 8001654:	6025      	str	r5, [r4, #0]
 8001656:	bf18      	it	ne
 8001658:	6059      	strne	r1, [r3, #4]
 800165a:	6863      	ldr	r3, [r4, #4]
 800165c:	bf08      	it	eq
 800165e:	6031      	streq	r1, [r6, #0]
 8001660:	5162      	str	r2, [r4, r5]
 8001662:	604b      	str	r3, [r1, #4]
 8001664:	4638      	mov	r0, r7
 8001666:	f104 060b 	add.w	r6, r4, #11
 800166a:	f000 fd83 	bl	8002174 <__malloc_unlock>
 800166e:	f026 0607 	bic.w	r6, r6, #7
 8001672:	1d23      	adds	r3, r4, #4
 8001674:	1af2      	subs	r2, r6, r3
 8001676:	d0b6      	beq.n	80015e6 <_malloc_r+0x22>
 8001678:	1b9b      	subs	r3, r3, r6
 800167a:	50a3      	str	r3, [r4, r2]
 800167c:	e7b3      	b.n	80015e6 <_malloc_r+0x22>
 800167e:	6862      	ldr	r2, [r4, #4]
 8001680:	42a3      	cmp	r3, r4
 8001682:	bf0c      	ite	eq
 8001684:	6032      	streq	r2, [r6, #0]
 8001686:	605a      	strne	r2, [r3, #4]
 8001688:	e7ec      	b.n	8001664 <_malloc_r+0xa0>
 800168a:	4623      	mov	r3, r4
 800168c:	6864      	ldr	r4, [r4, #4]
 800168e:	e7b2      	b.n	80015f6 <_malloc_r+0x32>
 8001690:	4634      	mov	r4, r6
 8001692:	6876      	ldr	r6, [r6, #4]
 8001694:	e7b9      	b.n	800160a <_malloc_r+0x46>
 8001696:	230c      	movs	r3, #12
 8001698:	603b      	str	r3, [r7, #0]
 800169a:	4638      	mov	r0, r7
 800169c:	f000 fd6a 	bl	8002174 <__malloc_unlock>
 80016a0:	e7a1      	b.n	80015e6 <_malloc_r+0x22>
 80016a2:	6025      	str	r5, [r4, #0]
 80016a4:	e7de      	b.n	8001664 <_malloc_r+0xa0>
 80016a6:	bf00      	nop
 80016a8:	200002a4 	.word	0x200002a4

080016ac <__sfputc_r>:
 80016ac:	6893      	ldr	r3, [r2, #8]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	b410      	push	{r4}
 80016b4:	6093      	str	r3, [r2, #8]
 80016b6:	da08      	bge.n	80016ca <__sfputc_r+0x1e>
 80016b8:	6994      	ldr	r4, [r2, #24]
 80016ba:	42a3      	cmp	r3, r4
 80016bc:	db01      	blt.n	80016c2 <__sfputc_r+0x16>
 80016be:	290a      	cmp	r1, #10
 80016c0:	d103      	bne.n	80016ca <__sfputc_r+0x1e>
 80016c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80016c6:	f000 bb33 	b.w	8001d30 <__swbuf_r>
 80016ca:	6813      	ldr	r3, [r2, #0]
 80016cc:	1c58      	adds	r0, r3, #1
 80016ce:	6010      	str	r0, [r2, #0]
 80016d0:	7019      	strb	r1, [r3, #0]
 80016d2:	4608      	mov	r0, r1
 80016d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80016d8:	4770      	bx	lr

080016da <__sfputs_r>:
 80016da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016dc:	4606      	mov	r6, r0
 80016de:	460f      	mov	r7, r1
 80016e0:	4614      	mov	r4, r2
 80016e2:	18d5      	adds	r5, r2, r3
 80016e4:	42ac      	cmp	r4, r5
 80016e6:	d101      	bne.n	80016ec <__sfputs_r+0x12>
 80016e8:	2000      	movs	r0, #0
 80016ea:	e007      	b.n	80016fc <__sfputs_r+0x22>
 80016ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80016f0:	463a      	mov	r2, r7
 80016f2:	4630      	mov	r0, r6
 80016f4:	f7ff ffda 	bl	80016ac <__sfputc_r>
 80016f8:	1c43      	adds	r3, r0, #1
 80016fa:	d1f3      	bne.n	80016e4 <__sfputs_r+0xa>
 80016fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001700 <_vfiprintf_r>:
 8001700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001704:	460d      	mov	r5, r1
 8001706:	b09d      	sub	sp, #116	; 0x74
 8001708:	4614      	mov	r4, r2
 800170a:	4698      	mov	r8, r3
 800170c:	4606      	mov	r6, r0
 800170e:	b118      	cbz	r0, 8001718 <_vfiprintf_r+0x18>
 8001710:	6983      	ldr	r3, [r0, #24]
 8001712:	b90b      	cbnz	r3, 8001718 <_vfiprintf_r+0x18>
 8001714:	f7ff fe96 	bl	8001444 <__sinit>
 8001718:	4b89      	ldr	r3, [pc, #548]	; (8001940 <_vfiprintf_r+0x240>)
 800171a:	429d      	cmp	r5, r3
 800171c:	d11b      	bne.n	8001756 <_vfiprintf_r+0x56>
 800171e:	6875      	ldr	r5, [r6, #4]
 8001720:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001722:	07d9      	lsls	r1, r3, #31
 8001724:	d405      	bmi.n	8001732 <_vfiprintf_r+0x32>
 8001726:	89ab      	ldrh	r3, [r5, #12]
 8001728:	059a      	lsls	r2, r3, #22
 800172a:	d402      	bmi.n	8001732 <_vfiprintf_r+0x32>
 800172c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800172e:	f7ff ff27 	bl	8001580 <__retarget_lock_acquire_recursive>
 8001732:	89ab      	ldrh	r3, [r5, #12]
 8001734:	071b      	lsls	r3, r3, #28
 8001736:	d501      	bpl.n	800173c <_vfiprintf_r+0x3c>
 8001738:	692b      	ldr	r3, [r5, #16]
 800173a:	b9eb      	cbnz	r3, 8001778 <_vfiprintf_r+0x78>
 800173c:	4629      	mov	r1, r5
 800173e:	4630      	mov	r0, r6
 8001740:	f000 fb5a 	bl	8001df8 <__swsetup_r>
 8001744:	b1c0      	cbz	r0, 8001778 <_vfiprintf_r+0x78>
 8001746:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001748:	07dc      	lsls	r4, r3, #31
 800174a:	d50e      	bpl.n	800176a <_vfiprintf_r+0x6a>
 800174c:	f04f 30ff 	mov.w	r0, #4294967295
 8001750:	b01d      	add	sp, #116	; 0x74
 8001752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001756:	4b7b      	ldr	r3, [pc, #492]	; (8001944 <_vfiprintf_r+0x244>)
 8001758:	429d      	cmp	r5, r3
 800175a:	d101      	bne.n	8001760 <_vfiprintf_r+0x60>
 800175c:	68b5      	ldr	r5, [r6, #8]
 800175e:	e7df      	b.n	8001720 <_vfiprintf_r+0x20>
 8001760:	4b79      	ldr	r3, [pc, #484]	; (8001948 <_vfiprintf_r+0x248>)
 8001762:	429d      	cmp	r5, r3
 8001764:	bf08      	it	eq
 8001766:	68f5      	ldreq	r5, [r6, #12]
 8001768:	e7da      	b.n	8001720 <_vfiprintf_r+0x20>
 800176a:	89ab      	ldrh	r3, [r5, #12]
 800176c:	0598      	lsls	r0, r3, #22
 800176e:	d4ed      	bmi.n	800174c <_vfiprintf_r+0x4c>
 8001770:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001772:	f7ff ff06 	bl	8001582 <__retarget_lock_release_recursive>
 8001776:	e7e9      	b.n	800174c <_vfiprintf_r+0x4c>
 8001778:	2300      	movs	r3, #0
 800177a:	9309      	str	r3, [sp, #36]	; 0x24
 800177c:	2320      	movs	r3, #32
 800177e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001782:	f8cd 800c 	str.w	r8, [sp, #12]
 8001786:	2330      	movs	r3, #48	; 0x30
 8001788:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800194c <_vfiprintf_r+0x24c>
 800178c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001790:	f04f 0901 	mov.w	r9, #1
 8001794:	4623      	mov	r3, r4
 8001796:	469a      	mov	sl, r3
 8001798:	f813 2b01 	ldrb.w	r2, [r3], #1
 800179c:	b10a      	cbz	r2, 80017a2 <_vfiprintf_r+0xa2>
 800179e:	2a25      	cmp	r2, #37	; 0x25
 80017a0:	d1f9      	bne.n	8001796 <_vfiprintf_r+0x96>
 80017a2:	ebba 0b04 	subs.w	fp, sl, r4
 80017a6:	d00b      	beq.n	80017c0 <_vfiprintf_r+0xc0>
 80017a8:	465b      	mov	r3, fp
 80017aa:	4622      	mov	r2, r4
 80017ac:	4629      	mov	r1, r5
 80017ae:	4630      	mov	r0, r6
 80017b0:	f7ff ff93 	bl	80016da <__sfputs_r>
 80017b4:	3001      	adds	r0, #1
 80017b6:	f000 80aa 	beq.w	800190e <_vfiprintf_r+0x20e>
 80017ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80017bc:	445a      	add	r2, fp
 80017be:	9209      	str	r2, [sp, #36]	; 0x24
 80017c0:	f89a 3000 	ldrb.w	r3, [sl]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f000 80a2 	beq.w	800190e <_vfiprintf_r+0x20e>
 80017ca:	2300      	movs	r3, #0
 80017cc:	f04f 32ff 	mov.w	r2, #4294967295
 80017d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80017d4:	f10a 0a01 	add.w	sl, sl, #1
 80017d8:	9304      	str	r3, [sp, #16]
 80017da:	9307      	str	r3, [sp, #28]
 80017dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80017e0:	931a      	str	r3, [sp, #104]	; 0x68
 80017e2:	4654      	mov	r4, sl
 80017e4:	2205      	movs	r2, #5
 80017e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017ea:	4858      	ldr	r0, [pc, #352]	; (800194c <_vfiprintf_r+0x24c>)
 80017ec:	f7fe fd00 	bl	80001f0 <memchr>
 80017f0:	9a04      	ldr	r2, [sp, #16]
 80017f2:	b9d8      	cbnz	r0, 800182c <_vfiprintf_r+0x12c>
 80017f4:	06d1      	lsls	r1, r2, #27
 80017f6:	bf44      	itt	mi
 80017f8:	2320      	movmi	r3, #32
 80017fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80017fe:	0713      	lsls	r3, r2, #28
 8001800:	bf44      	itt	mi
 8001802:	232b      	movmi	r3, #43	; 0x2b
 8001804:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001808:	f89a 3000 	ldrb.w	r3, [sl]
 800180c:	2b2a      	cmp	r3, #42	; 0x2a
 800180e:	d015      	beq.n	800183c <_vfiprintf_r+0x13c>
 8001810:	9a07      	ldr	r2, [sp, #28]
 8001812:	4654      	mov	r4, sl
 8001814:	2000      	movs	r0, #0
 8001816:	f04f 0c0a 	mov.w	ip, #10
 800181a:	4621      	mov	r1, r4
 800181c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001820:	3b30      	subs	r3, #48	; 0x30
 8001822:	2b09      	cmp	r3, #9
 8001824:	d94e      	bls.n	80018c4 <_vfiprintf_r+0x1c4>
 8001826:	b1b0      	cbz	r0, 8001856 <_vfiprintf_r+0x156>
 8001828:	9207      	str	r2, [sp, #28]
 800182a:	e014      	b.n	8001856 <_vfiprintf_r+0x156>
 800182c:	eba0 0308 	sub.w	r3, r0, r8
 8001830:	fa09 f303 	lsl.w	r3, r9, r3
 8001834:	4313      	orrs	r3, r2
 8001836:	9304      	str	r3, [sp, #16]
 8001838:	46a2      	mov	sl, r4
 800183a:	e7d2      	b.n	80017e2 <_vfiprintf_r+0xe2>
 800183c:	9b03      	ldr	r3, [sp, #12]
 800183e:	1d19      	adds	r1, r3, #4
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	9103      	str	r1, [sp, #12]
 8001844:	2b00      	cmp	r3, #0
 8001846:	bfbb      	ittet	lt
 8001848:	425b      	neglt	r3, r3
 800184a:	f042 0202 	orrlt.w	r2, r2, #2
 800184e:	9307      	strge	r3, [sp, #28]
 8001850:	9307      	strlt	r3, [sp, #28]
 8001852:	bfb8      	it	lt
 8001854:	9204      	strlt	r2, [sp, #16]
 8001856:	7823      	ldrb	r3, [r4, #0]
 8001858:	2b2e      	cmp	r3, #46	; 0x2e
 800185a:	d10c      	bne.n	8001876 <_vfiprintf_r+0x176>
 800185c:	7863      	ldrb	r3, [r4, #1]
 800185e:	2b2a      	cmp	r3, #42	; 0x2a
 8001860:	d135      	bne.n	80018ce <_vfiprintf_r+0x1ce>
 8001862:	9b03      	ldr	r3, [sp, #12]
 8001864:	1d1a      	adds	r2, r3, #4
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	9203      	str	r2, [sp, #12]
 800186a:	2b00      	cmp	r3, #0
 800186c:	bfb8      	it	lt
 800186e:	f04f 33ff 	movlt.w	r3, #4294967295
 8001872:	3402      	adds	r4, #2
 8001874:	9305      	str	r3, [sp, #20]
 8001876:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800195c <_vfiprintf_r+0x25c>
 800187a:	7821      	ldrb	r1, [r4, #0]
 800187c:	2203      	movs	r2, #3
 800187e:	4650      	mov	r0, sl
 8001880:	f7fe fcb6 	bl	80001f0 <memchr>
 8001884:	b140      	cbz	r0, 8001898 <_vfiprintf_r+0x198>
 8001886:	2340      	movs	r3, #64	; 0x40
 8001888:	eba0 000a 	sub.w	r0, r0, sl
 800188c:	fa03 f000 	lsl.w	r0, r3, r0
 8001890:	9b04      	ldr	r3, [sp, #16]
 8001892:	4303      	orrs	r3, r0
 8001894:	3401      	adds	r4, #1
 8001896:	9304      	str	r3, [sp, #16]
 8001898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800189c:	482c      	ldr	r0, [pc, #176]	; (8001950 <_vfiprintf_r+0x250>)
 800189e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80018a2:	2206      	movs	r2, #6
 80018a4:	f7fe fca4 	bl	80001f0 <memchr>
 80018a8:	2800      	cmp	r0, #0
 80018aa:	d03f      	beq.n	800192c <_vfiprintf_r+0x22c>
 80018ac:	4b29      	ldr	r3, [pc, #164]	; (8001954 <_vfiprintf_r+0x254>)
 80018ae:	bb1b      	cbnz	r3, 80018f8 <_vfiprintf_r+0x1f8>
 80018b0:	9b03      	ldr	r3, [sp, #12]
 80018b2:	3307      	adds	r3, #7
 80018b4:	f023 0307 	bic.w	r3, r3, #7
 80018b8:	3308      	adds	r3, #8
 80018ba:	9303      	str	r3, [sp, #12]
 80018bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80018be:	443b      	add	r3, r7
 80018c0:	9309      	str	r3, [sp, #36]	; 0x24
 80018c2:	e767      	b.n	8001794 <_vfiprintf_r+0x94>
 80018c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80018c8:	460c      	mov	r4, r1
 80018ca:	2001      	movs	r0, #1
 80018cc:	e7a5      	b.n	800181a <_vfiprintf_r+0x11a>
 80018ce:	2300      	movs	r3, #0
 80018d0:	3401      	adds	r4, #1
 80018d2:	9305      	str	r3, [sp, #20]
 80018d4:	4619      	mov	r1, r3
 80018d6:	f04f 0c0a 	mov.w	ip, #10
 80018da:	4620      	mov	r0, r4
 80018dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80018e0:	3a30      	subs	r2, #48	; 0x30
 80018e2:	2a09      	cmp	r2, #9
 80018e4:	d903      	bls.n	80018ee <_vfiprintf_r+0x1ee>
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0c5      	beq.n	8001876 <_vfiprintf_r+0x176>
 80018ea:	9105      	str	r1, [sp, #20]
 80018ec:	e7c3      	b.n	8001876 <_vfiprintf_r+0x176>
 80018ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80018f2:	4604      	mov	r4, r0
 80018f4:	2301      	movs	r3, #1
 80018f6:	e7f0      	b.n	80018da <_vfiprintf_r+0x1da>
 80018f8:	ab03      	add	r3, sp, #12
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	462a      	mov	r2, r5
 80018fe:	4b16      	ldr	r3, [pc, #88]	; (8001958 <_vfiprintf_r+0x258>)
 8001900:	a904      	add	r1, sp, #16
 8001902:	4630      	mov	r0, r6
 8001904:	f3af 8000 	nop.w
 8001908:	4607      	mov	r7, r0
 800190a:	1c78      	adds	r0, r7, #1
 800190c:	d1d6      	bne.n	80018bc <_vfiprintf_r+0x1bc>
 800190e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001910:	07d9      	lsls	r1, r3, #31
 8001912:	d405      	bmi.n	8001920 <_vfiprintf_r+0x220>
 8001914:	89ab      	ldrh	r3, [r5, #12]
 8001916:	059a      	lsls	r2, r3, #22
 8001918:	d402      	bmi.n	8001920 <_vfiprintf_r+0x220>
 800191a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800191c:	f7ff fe31 	bl	8001582 <__retarget_lock_release_recursive>
 8001920:	89ab      	ldrh	r3, [r5, #12]
 8001922:	065b      	lsls	r3, r3, #25
 8001924:	f53f af12 	bmi.w	800174c <_vfiprintf_r+0x4c>
 8001928:	9809      	ldr	r0, [sp, #36]	; 0x24
 800192a:	e711      	b.n	8001750 <_vfiprintf_r+0x50>
 800192c:	ab03      	add	r3, sp, #12
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	462a      	mov	r2, r5
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <_vfiprintf_r+0x258>)
 8001934:	a904      	add	r1, sp, #16
 8001936:	4630      	mov	r0, r6
 8001938:	f000 f880 	bl	8001a3c <_printf_i>
 800193c:	e7e4      	b.n	8001908 <_vfiprintf_r+0x208>
 800193e:	bf00      	nop
 8001940:	080022cc 	.word	0x080022cc
 8001944:	080022ec 	.word	0x080022ec
 8001948:	080022ac 	.word	0x080022ac
 800194c:	0800230c 	.word	0x0800230c
 8001950:	08002316 	.word	0x08002316
 8001954:	00000000 	.word	0x00000000
 8001958:	080016db 	.word	0x080016db
 800195c:	08002312 	.word	0x08002312

08001960 <_printf_common>:
 8001960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001964:	4616      	mov	r6, r2
 8001966:	4699      	mov	r9, r3
 8001968:	688a      	ldr	r2, [r1, #8]
 800196a:	690b      	ldr	r3, [r1, #16]
 800196c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001970:	4293      	cmp	r3, r2
 8001972:	bfb8      	it	lt
 8001974:	4613      	movlt	r3, r2
 8001976:	6033      	str	r3, [r6, #0]
 8001978:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800197c:	4607      	mov	r7, r0
 800197e:	460c      	mov	r4, r1
 8001980:	b10a      	cbz	r2, 8001986 <_printf_common+0x26>
 8001982:	3301      	adds	r3, #1
 8001984:	6033      	str	r3, [r6, #0]
 8001986:	6823      	ldr	r3, [r4, #0]
 8001988:	0699      	lsls	r1, r3, #26
 800198a:	bf42      	ittt	mi
 800198c:	6833      	ldrmi	r3, [r6, #0]
 800198e:	3302      	addmi	r3, #2
 8001990:	6033      	strmi	r3, [r6, #0]
 8001992:	6825      	ldr	r5, [r4, #0]
 8001994:	f015 0506 	ands.w	r5, r5, #6
 8001998:	d106      	bne.n	80019a8 <_printf_common+0x48>
 800199a:	f104 0a19 	add.w	sl, r4, #25
 800199e:	68e3      	ldr	r3, [r4, #12]
 80019a0:	6832      	ldr	r2, [r6, #0]
 80019a2:	1a9b      	subs	r3, r3, r2
 80019a4:	42ab      	cmp	r3, r5
 80019a6:	dc26      	bgt.n	80019f6 <_printf_common+0x96>
 80019a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80019ac:	1e13      	subs	r3, r2, #0
 80019ae:	6822      	ldr	r2, [r4, #0]
 80019b0:	bf18      	it	ne
 80019b2:	2301      	movne	r3, #1
 80019b4:	0692      	lsls	r2, r2, #26
 80019b6:	d42b      	bmi.n	8001a10 <_printf_common+0xb0>
 80019b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80019bc:	4649      	mov	r1, r9
 80019be:	4638      	mov	r0, r7
 80019c0:	47c0      	blx	r8
 80019c2:	3001      	adds	r0, #1
 80019c4:	d01e      	beq.n	8001a04 <_printf_common+0xa4>
 80019c6:	6823      	ldr	r3, [r4, #0]
 80019c8:	68e5      	ldr	r5, [r4, #12]
 80019ca:	6832      	ldr	r2, [r6, #0]
 80019cc:	f003 0306 	and.w	r3, r3, #6
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	bf08      	it	eq
 80019d4:	1aad      	subeq	r5, r5, r2
 80019d6:	68a3      	ldr	r3, [r4, #8]
 80019d8:	6922      	ldr	r2, [r4, #16]
 80019da:	bf0c      	ite	eq
 80019dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80019e0:	2500      	movne	r5, #0
 80019e2:	4293      	cmp	r3, r2
 80019e4:	bfc4      	itt	gt
 80019e6:	1a9b      	subgt	r3, r3, r2
 80019e8:	18ed      	addgt	r5, r5, r3
 80019ea:	2600      	movs	r6, #0
 80019ec:	341a      	adds	r4, #26
 80019ee:	42b5      	cmp	r5, r6
 80019f0:	d11a      	bne.n	8001a28 <_printf_common+0xc8>
 80019f2:	2000      	movs	r0, #0
 80019f4:	e008      	b.n	8001a08 <_printf_common+0xa8>
 80019f6:	2301      	movs	r3, #1
 80019f8:	4652      	mov	r2, sl
 80019fa:	4649      	mov	r1, r9
 80019fc:	4638      	mov	r0, r7
 80019fe:	47c0      	blx	r8
 8001a00:	3001      	adds	r0, #1
 8001a02:	d103      	bne.n	8001a0c <_printf_common+0xac>
 8001a04:	f04f 30ff 	mov.w	r0, #4294967295
 8001a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a0c:	3501      	adds	r5, #1
 8001a0e:	e7c6      	b.n	800199e <_printf_common+0x3e>
 8001a10:	18e1      	adds	r1, r4, r3
 8001a12:	1c5a      	adds	r2, r3, #1
 8001a14:	2030      	movs	r0, #48	; 0x30
 8001a16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001a1a:	4422      	add	r2, r4
 8001a1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001a20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001a24:	3302      	adds	r3, #2
 8001a26:	e7c7      	b.n	80019b8 <_printf_common+0x58>
 8001a28:	2301      	movs	r3, #1
 8001a2a:	4622      	mov	r2, r4
 8001a2c:	4649      	mov	r1, r9
 8001a2e:	4638      	mov	r0, r7
 8001a30:	47c0      	blx	r8
 8001a32:	3001      	adds	r0, #1
 8001a34:	d0e6      	beq.n	8001a04 <_printf_common+0xa4>
 8001a36:	3601      	adds	r6, #1
 8001a38:	e7d9      	b.n	80019ee <_printf_common+0x8e>
	...

08001a3c <_printf_i>:
 8001a3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001a40:	7e0f      	ldrb	r7, [r1, #24]
 8001a42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001a44:	2f78      	cmp	r7, #120	; 0x78
 8001a46:	4691      	mov	r9, r2
 8001a48:	4680      	mov	r8, r0
 8001a4a:	460c      	mov	r4, r1
 8001a4c:	469a      	mov	sl, r3
 8001a4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001a52:	d807      	bhi.n	8001a64 <_printf_i+0x28>
 8001a54:	2f62      	cmp	r7, #98	; 0x62
 8001a56:	d80a      	bhi.n	8001a6e <_printf_i+0x32>
 8001a58:	2f00      	cmp	r7, #0
 8001a5a:	f000 80d8 	beq.w	8001c0e <_printf_i+0x1d2>
 8001a5e:	2f58      	cmp	r7, #88	; 0x58
 8001a60:	f000 80a3 	beq.w	8001baa <_printf_i+0x16e>
 8001a64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001a6c:	e03a      	b.n	8001ae4 <_printf_i+0xa8>
 8001a6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001a72:	2b15      	cmp	r3, #21
 8001a74:	d8f6      	bhi.n	8001a64 <_printf_i+0x28>
 8001a76:	a101      	add	r1, pc, #4	; (adr r1, 8001a7c <_printf_i+0x40>)
 8001a78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001a7c:	08001ad5 	.word	0x08001ad5
 8001a80:	08001ae9 	.word	0x08001ae9
 8001a84:	08001a65 	.word	0x08001a65
 8001a88:	08001a65 	.word	0x08001a65
 8001a8c:	08001a65 	.word	0x08001a65
 8001a90:	08001a65 	.word	0x08001a65
 8001a94:	08001ae9 	.word	0x08001ae9
 8001a98:	08001a65 	.word	0x08001a65
 8001a9c:	08001a65 	.word	0x08001a65
 8001aa0:	08001a65 	.word	0x08001a65
 8001aa4:	08001a65 	.word	0x08001a65
 8001aa8:	08001bf5 	.word	0x08001bf5
 8001aac:	08001b19 	.word	0x08001b19
 8001ab0:	08001bd7 	.word	0x08001bd7
 8001ab4:	08001a65 	.word	0x08001a65
 8001ab8:	08001a65 	.word	0x08001a65
 8001abc:	08001c17 	.word	0x08001c17
 8001ac0:	08001a65 	.word	0x08001a65
 8001ac4:	08001b19 	.word	0x08001b19
 8001ac8:	08001a65 	.word	0x08001a65
 8001acc:	08001a65 	.word	0x08001a65
 8001ad0:	08001bdf 	.word	0x08001bdf
 8001ad4:	682b      	ldr	r3, [r5, #0]
 8001ad6:	1d1a      	adds	r2, r3, #4
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	602a      	str	r2, [r5, #0]
 8001adc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ae0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e0a3      	b.n	8001c30 <_printf_i+0x1f4>
 8001ae8:	6820      	ldr	r0, [r4, #0]
 8001aea:	6829      	ldr	r1, [r5, #0]
 8001aec:	0606      	lsls	r6, r0, #24
 8001aee:	f101 0304 	add.w	r3, r1, #4
 8001af2:	d50a      	bpl.n	8001b0a <_printf_i+0xce>
 8001af4:	680e      	ldr	r6, [r1, #0]
 8001af6:	602b      	str	r3, [r5, #0]
 8001af8:	2e00      	cmp	r6, #0
 8001afa:	da03      	bge.n	8001b04 <_printf_i+0xc8>
 8001afc:	232d      	movs	r3, #45	; 0x2d
 8001afe:	4276      	negs	r6, r6
 8001b00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b04:	485e      	ldr	r0, [pc, #376]	; (8001c80 <_printf_i+0x244>)
 8001b06:	230a      	movs	r3, #10
 8001b08:	e019      	b.n	8001b3e <_printf_i+0x102>
 8001b0a:	680e      	ldr	r6, [r1, #0]
 8001b0c:	602b      	str	r3, [r5, #0]
 8001b0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001b12:	bf18      	it	ne
 8001b14:	b236      	sxthne	r6, r6
 8001b16:	e7ef      	b.n	8001af8 <_printf_i+0xbc>
 8001b18:	682b      	ldr	r3, [r5, #0]
 8001b1a:	6820      	ldr	r0, [r4, #0]
 8001b1c:	1d19      	adds	r1, r3, #4
 8001b1e:	6029      	str	r1, [r5, #0]
 8001b20:	0601      	lsls	r1, r0, #24
 8001b22:	d501      	bpl.n	8001b28 <_printf_i+0xec>
 8001b24:	681e      	ldr	r6, [r3, #0]
 8001b26:	e002      	b.n	8001b2e <_printf_i+0xf2>
 8001b28:	0646      	lsls	r6, r0, #25
 8001b2a:	d5fb      	bpl.n	8001b24 <_printf_i+0xe8>
 8001b2c:	881e      	ldrh	r6, [r3, #0]
 8001b2e:	4854      	ldr	r0, [pc, #336]	; (8001c80 <_printf_i+0x244>)
 8001b30:	2f6f      	cmp	r7, #111	; 0x6f
 8001b32:	bf0c      	ite	eq
 8001b34:	2308      	moveq	r3, #8
 8001b36:	230a      	movne	r3, #10
 8001b38:	2100      	movs	r1, #0
 8001b3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001b3e:	6865      	ldr	r5, [r4, #4]
 8001b40:	60a5      	str	r5, [r4, #8]
 8001b42:	2d00      	cmp	r5, #0
 8001b44:	bfa2      	ittt	ge
 8001b46:	6821      	ldrge	r1, [r4, #0]
 8001b48:	f021 0104 	bicge.w	r1, r1, #4
 8001b4c:	6021      	strge	r1, [r4, #0]
 8001b4e:	b90e      	cbnz	r6, 8001b54 <_printf_i+0x118>
 8001b50:	2d00      	cmp	r5, #0
 8001b52:	d04d      	beq.n	8001bf0 <_printf_i+0x1b4>
 8001b54:	4615      	mov	r5, r2
 8001b56:	fbb6 f1f3 	udiv	r1, r6, r3
 8001b5a:	fb03 6711 	mls	r7, r3, r1, r6
 8001b5e:	5dc7      	ldrb	r7, [r0, r7]
 8001b60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001b64:	4637      	mov	r7, r6
 8001b66:	42bb      	cmp	r3, r7
 8001b68:	460e      	mov	r6, r1
 8001b6a:	d9f4      	bls.n	8001b56 <_printf_i+0x11a>
 8001b6c:	2b08      	cmp	r3, #8
 8001b6e:	d10b      	bne.n	8001b88 <_printf_i+0x14c>
 8001b70:	6823      	ldr	r3, [r4, #0]
 8001b72:	07de      	lsls	r6, r3, #31
 8001b74:	d508      	bpl.n	8001b88 <_printf_i+0x14c>
 8001b76:	6923      	ldr	r3, [r4, #16]
 8001b78:	6861      	ldr	r1, [r4, #4]
 8001b7a:	4299      	cmp	r1, r3
 8001b7c:	bfde      	ittt	le
 8001b7e:	2330      	movle	r3, #48	; 0x30
 8001b80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001b84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001b88:	1b52      	subs	r2, r2, r5
 8001b8a:	6122      	str	r2, [r4, #16]
 8001b8c:	f8cd a000 	str.w	sl, [sp]
 8001b90:	464b      	mov	r3, r9
 8001b92:	aa03      	add	r2, sp, #12
 8001b94:	4621      	mov	r1, r4
 8001b96:	4640      	mov	r0, r8
 8001b98:	f7ff fee2 	bl	8001960 <_printf_common>
 8001b9c:	3001      	adds	r0, #1
 8001b9e:	d14c      	bne.n	8001c3a <_printf_i+0x1fe>
 8001ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba4:	b004      	add	sp, #16
 8001ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001baa:	4835      	ldr	r0, [pc, #212]	; (8001c80 <_printf_i+0x244>)
 8001bac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001bb0:	6829      	ldr	r1, [r5, #0]
 8001bb2:	6823      	ldr	r3, [r4, #0]
 8001bb4:	f851 6b04 	ldr.w	r6, [r1], #4
 8001bb8:	6029      	str	r1, [r5, #0]
 8001bba:	061d      	lsls	r5, r3, #24
 8001bbc:	d514      	bpl.n	8001be8 <_printf_i+0x1ac>
 8001bbe:	07df      	lsls	r7, r3, #31
 8001bc0:	bf44      	itt	mi
 8001bc2:	f043 0320 	orrmi.w	r3, r3, #32
 8001bc6:	6023      	strmi	r3, [r4, #0]
 8001bc8:	b91e      	cbnz	r6, 8001bd2 <_printf_i+0x196>
 8001bca:	6823      	ldr	r3, [r4, #0]
 8001bcc:	f023 0320 	bic.w	r3, r3, #32
 8001bd0:	6023      	str	r3, [r4, #0]
 8001bd2:	2310      	movs	r3, #16
 8001bd4:	e7b0      	b.n	8001b38 <_printf_i+0xfc>
 8001bd6:	6823      	ldr	r3, [r4, #0]
 8001bd8:	f043 0320 	orr.w	r3, r3, #32
 8001bdc:	6023      	str	r3, [r4, #0]
 8001bde:	2378      	movs	r3, #120	; 0x78
 8001be0:	4828      	ldr	r0, [pc, #160]	; (8001c84 <_printf_i+0x248>)
 8001be2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001be6:	e7e3      	b.n	8001bb0 <_printf_i+0x174>
 8001be8:	0659      	lsls	r1, r3, #25
 8001bea:	bf48      	it	mi
 8001bec:	b2b6      	uxthmi	r6, r6
 8001bee:	e7e6      	b.n	8001bbe <_printf_i+0x182>
 8001bf0:	4615      	mov	r5, r2
 8001bf2:	e7bb      	b.n	8001b6c <_printf_i+0x130>
 8001bf4:	682b      	ldr	r3, [r5, #0]
 8001bf6:	6826      	ldr	r6, [r4, #0]
 8001bf8:	6961      	ldr	r1, [r4, #20]
 8001bfa:	1d18      	adds	r0, r3, #4
 8001bfc:	6028      	str	r0, [r5, #0]
 8001bfe:	0635      	lsls	r5, r6, #24
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	d501      	bpl.n	8001c08 <_printf_i+0x1cc>
 8001c04:	6019      	str	r1, [r3, #0]
 8001c06:	e002      	b.n	8001c0e <_printf_i+0x1d2>
 8001c08:	0670      	lsls	r0, r6, #25
 8001c0a:	d5fb      	bpl.n	8001c04 <_printf_i+0x1c8>
 8001c0c:	8019      	strh	r1, [r3, #0]
 8001c0e:	2300      	movs	r3, #0
 8001c10:	6123      	str	r3, [r4, #16]
 8001c12:	4615      	mov	r5, r2
 8001c14:	e7ba      	b.n	8001b8c <_printf_i+0x150>
 8001c16:	682b      	ldr	r3, [r5, #0]
 8001c18:	1d1a      	adds	r2, r3, #4
 8001c1a:	602a      	str	r2, [r5, #0]
 8001c1c:	681d      	ldr	r5, [r3, #0]
 8001c1e:	6862      	ldr	r2, [r4, #4]
 8001c20:	2100      	movs	r1, #0
 8001c22:	4628      	mov	r0, r5
 8001c24:	f7fe fae4 	bl	80001f0 <memchr>
 8001c28:	b108      	cbz	r0, 8001c2e <_printf_i+0x1f2>
 8001c2a:	1b40      	subs	r0, r0, r5
 8001c2c:	6060      	str	r0, [r4, #4]
 8001c2e:	6863      	ldr	r3, [r4, #4]
 8001c30:	6123      	str	r3, [r4, #16]
 8001c32:	2300      	movs	r3, #0
 8001c34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001c38:	e7a8      	b.n	8001b8c <_printf_i+0x150>
 8001c3a:	6923      	ldr	r3, [r4, #16]
 8001c3c:	462a      	mov	r2, r5
 8001c3e:	4649      	mov	r1, r9
 8001c40:	4640      	mov	r0, r8
 8001c42:	47d0      	blx	sl
 8001c44:	3001      	adds	r0, #1
 8001c46:	d0ab      	beq.n	8001ba0 <_printf_i+0x164>
 8001c48:	6823      	ldr	r3, [r4, #0]
 8001c4a:	079b      	lsls	r3, r3, #30
 8001c4c:	d413      	bmi.n	8001c76 <_printf_i+0x23a>
 8001c4e:	68e0      	ldr	r0, [r4, #12]
 8001c50:	9b03      	ldr	r3, [sp, #12]
 8001c52:	4298      	cmp	r0, r3
 8001c54:	bfb8      	it	lt
 8001c56:	4618      	movlt	r0, r3
 8001c58:	e7a4      	b.n	8001ba4 <_printf_i+0x168>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	4632      	mov	r2, r6
 8001c5e:	4649      	mov	r1, r9
 8001c60:	4640      	mov	r0, r8
 8001c62:	47d0      	blx	sl
 8001c64:	3001      	adds	r0, #1
 8001c66:	d09b      	beq.n	8001ba0 <_printf_i+0x164>
 8001c68:	3501      	adds	r5, #1
 8001c6a:	68e3      	ldr	r3, [r4, #12]
 8001c6c:	9903      	ldr	r1, [sp, #12]
 8001c6e:	1a5b      	subs	r3, r3, r1
 8001c70:	42ab      	cmp	r3, r5
 8001c72:	dcf2      	bgt.n	8001c5a <_printf_i+0x21e>
 8001c74:	e7eb      	b.n	8001c4e <_printf_i+0x212>
 8001c76:	2500      	movs	r5, #0
 8001c78:	f104 0619 	add.w	r6, r4, #25
 8001c7c:	e7f5      	b.n	8001c6a <_printf_i+0x22e>
 8001c7e:	bf00      	nop
 8001c80:	0800231d 	.word	0x0800231d
 8001c84:	0800232e 	.word	0x0800232e

08001c88 <_sbrk_r>:
 8001c88:	b538      	push	{r3, r4, r5, lr}
 8001c8a:	4d06      	ldr	r5, [pc, #24]	; (8001ca4 <_sbrk_r+0x1c>)
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	4604      	mov	r4, r0
 8001c90:	4608      	mov	r0, r1
 8001c92:	602b      	str	r3, [r5, #0]
 8001c94:	f7fe fc94 	bl	80005c0 <_sbrk>
 8001c98:	1c43      	adds	r3, r0, #1
 8001c9a:	d102      	bne.n	8001ca2 <_sbrk_r+0x1a>
 8001c9c:	682b      	ldr	r3, [r5, #0]
 8001c9e:	b103      	cbz	r3, 8001ca2 <_sbrk_r+0x1a>
 8001ca0:	6023      	str	r3, [r4, #0]
 8001ca2:	bd38      	pop	{r3, r4, r5, pc}
 8001ca4:	200002ac 	.word	0x200002ac

08001ca8 <__sread>:
 8001ca8:	b510      	push	{r4, lr}
 8001caa:	460c      	mov	r4, r1
 8001cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cb0:	f000 fab2 	bl	8002218 <_read_r>
 8001cb4:	2800      	cmp	r0, #0
 8001cb6:	bfab      	itete	ge
 8001cb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001cba:	89a3      	ldrhlt	r3, [r4, #12]
 8001cbc:	181b      	addge	r3, r3, r0
 8001cbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001cc2:	bfac      	ite	ge
 8001cc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8001cc6:	81a3      	strhlt	r3, [r4, #12]
 8001cc8:	bd10      	pop	{r4, pc}

08001cca <__swrite>:
 8001cca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cce:	461f      	mov	r7, r3
 8001cd0:	898b      	ldrh	r3, [r1, #12]
 8001cd2:	05db      	lsls	r3, r3, #23
 8001cd4:	4605      	mov	r5, r0
 8001cd6:	460c      	mov	r4, r1
 8001cd8:	4616      	mov	r6, r2
 8001cda:	d505      	bpl.n	8001ce8 <__swrite+0x1e>
 8001cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f000 f9c8 	bl	8002078 <_lseek_r>
 8001ce8:	89a3      	ldrh	r3, [r4, #12]
 8001cea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001cee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001cf2:	81a3      	strh	r3, [r4, #12]
 8001cf4:	4632      	mov	r2, r6
 8001cf6:	463b      	mov	r3, r7
 8001cf8:	4628      	mov	r0, r5
 8001cfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001cfe:	f000 b869 	b.w	8001dd4 <_write_r>

08001d02 <__sseek>:
 8001d02:	b510      	push	{r4, lr}
 8001d04:	460c      	mov	r4, r1
 8001d06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d0a:	f000 f9b5 	bl	8002078 <_lseek_r>
 8001d0e:	1c43      	adds	r3, r0, #1
 8001d10:	89a3      	ldrh	r3, [r4, #12]
 8001d12:	bf15      	itete	ne
 8001d14:	6560      	strne	r0, [r4, #84]	; 0x54
 8001d16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001d1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001d1e:	81a3      	strheq	r3, [r4, #12]
 8001d20:	bf18      	it	ne
 8001d22:	81a3      	strhne	r3, [r4, #12]
 8001d24:	bd10      	pop	{r4, pc}

08001d26 <__sclose>:
 8001d26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d2a:	f000 b8d3 	b.w	8001ed4 <_close_r>
	...

08001d30 <__swbuf_r>:
 8001d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d32:	460e      	mov	r6, r1
 8001d34:	4614      	mov	r4, r2
 8001d36:	4605      	mov	r5, r0
 8001d38:	b118      	cbz	r0, 8001d42 <__swbuf_r+0x12>
 8001d3a:	6983      	ldr	r3, [r0, #24]
 8001d3c:	b90b      	cbnz	r3, 8001d42 <__swbuf_r+0x12>
 8001d3e:	f7ff fb81 	bl	8001444 <__sinit>
 8001d42:	4b21      	ldr	r3, [pc, #132]	; (8001dc8 <__swbuf_r+0x98>)
 8001d44:	429c      	cmp	r4, r3
 8001d46:	d12b      	bne.n	8001da0 <__swbuf_r+0x70>
 8001d48:	686c      	ldr	r4, [r5, #4]
 8001d4a:	69a3      	ldr	r3, [r4, #24]
 8001d4c:	60a3      	str	r3, [r4, #8]
 8001d4e:	89a3      	ldrh	r3, [r4, #12]
 8001d50:	071a      	lsls	r2, r3, #28
 8001d52:	d52f      	bpl.n	8001db4 <__swbuf_r+0x84>
 8001d54:	6923      	ldr	r3, [r4, #16]
 8001d56:	b36b      	cbz	r3, 8001db4 <__swbuf_r+0x84>
 8001d58:	6923      	ldr	r3, [r4, #16]
 8001d5a:	6820      	ldr	r0, [r4, #0]
 8001d5c:	1ac0      	subs	r0, r0, r3
 8001d5e:	6963      	ldr	r3, [r4, #20]
 8001d60:	b2f6      	uxtb	r6, r6
 8001d62:	4283      	cmp	r3, r0
 8001d64:	4637      	mov	r7, r6
 8001d66:	dc04      	bgt.n	8001d72 <__swbuf_r+0x42>
 8001d68:	4621      	mov	r1, r4
 8001d6a:	4628      	mov	r0, r5
 8001d6c:	f000 f948 	bl	8002000 <_fflush_r>
 8001d70:	bb30      	cbnz	r0, 8001dc0 <__swbuf_r+0x90>
 8001d72:	68a3      	ldr	r3, [r4, #8]
 8001d74:	3b01      	subs	r3, #1
 8001d76:	60a3      	str	r3, [r4, #8]
 8001d78:	6823      	ldr	r3, [r4, #0]
 8001d7a:	1c5a      	adds	r2, r3, #1
 8001d7c:	6022      	str	r2, [r4, #0]
 8001d7e:	701e      	strb	r6, [r3, #0]
 8001d80:	6963      	ldr	r3, [r4, #20]
 8001d82:	3001      	adds	r0, #1
 8001d84:	4283      	cmp	r3, r0
 8001d86:	d004      	beq.n	8001d92 <__swbuf_r+0x62>
 8001d88:	89a3      	ldrh	r3, [r4, #12]
 8001d8a:	07db      	lsls	r3, r3, #31
 8001d8c:	d506      	bpl.n	8001d9c <__swbuf_r+0x6c>
 8001d8e:	2e0a      	cmp	r6, #10
 8001d90:	d104      	bne.n	8001d9c <__swbuf_r+0x6c>
 8001d92:	4621      	mov	r1, r4
 8001d94:	4628      	mov	r0, r5
 8001d96:	f000 f933 	bl	8002000 <_fflush_r>
 8001d9a:	b988      	cbnz	r0, 8001dc0 <__swbuf_r+0x90>
 8001d9c:	4638      	mov	r0, r7
 8001d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001da0:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <__swbuf_r+0x9c>)
 8001da2:	429c      	cmp	r4, r3
 8001da4:	d101      	bne.n	8001daa <__swbuf_r+0x7a>
 8001da6:	68ac      	ldr	r4, [r5, #8]
 8001da8:	e7cf      	b.n	8001d4a <__swbuf_r+0x1a>
 8001daa:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <__swbuf_r+0xa0>)
 8001dac:	429c      	cmp	r4, r3
 8001dae:	bf08      	it	eq
 8001db0:	68ec      	ldreq	r4, [r5, #12]
 8001db2:	e7ca      	b.n	8001d4a <__swbuf_r+0x1a>
 8001db4:	4621      	mov	r1, r4
 8001db6:	4628      	mov	r0, r5
 8001db8:	f000 f81e 	bl	8001df8 <__swsetup_r>
 8001dbc:	2800      	cmp	r0, #0
 8001dbe:	d0cb      	beq.n	8001d58 <__swbuf_r+0x28>
 8001dc0:	f04f 37ff 	mov.w	r7, #4294967295
 8001dc4:	e7ea      	b.n	8001d9c <__swbuf_r+0x6c>
 8001dc6:	bf00      	nop
 8001dc8:	080022cc 	.word	0x080022cc
 8001dcc:	080022ec 	.word	0x080022ec
 8001dd0:	080022ac 	.word	0x080022ac

08001dd4 <_write_r>:
 8001dd4:	b538      	push	{r3, r4, r5, lr}
 8001dd6:	4d07      	ldr	r5, [pc, #28]	; (8001df4 <_write_r+0x20>)
 8001dd8:	4604      	mov	r4, r0
 8001dda:	4608      	mov	r0, r1
 8001ddc:	4611      	mov	r1, r2
 8001dde:	2200      	movs	r2, #0
 8001de0:	602a      	str	r2, [r5, #0]
 8001de2:	461a      	mov	r2, r3
 8001de4:	f7fe fb9b 	bl	800051e <_write>
 8001de8:	1c43      	adds	r3, r0, #1
 8001dea:	d102      	bne.n	8001df2 <_write_r+0x1e>
 8001dec:	682b      	ldr	r3, [r5, #0]
 8001dee:	b103      	cbz	r3, 8001df2 <_write_r+0x1e>
 8001df0:	6023      	str	r3, [r4, #0]
 8001df2:	bd38      	pop	{r3, r4, r5, pc}
 8001df4:	200002ac 	.word	0x200002ac

08001df8 <__swsetup_r>:
 8001df8:	4b32      	ldr	r3, [pc, #200]	; (8001ec4 <__swsetup_r+0xcc>)
 8001dfa:	b570      	push	{r4, r5, r6, lr}
 8001dfc:	681d      	ldr	r5, [r3, #0]
 8001dfe:	4606      	mov	r6, r0
 8001e00:	460c      	mov	r4, r1
 8001e02:	b125      	cbz	r5, 8001e0e <__swsetup_r+0x16>
 8001e04:	69ab      	ldr	r3, [r5, #24]
 8001e06:	b913      	cbnz	r3, 8001e0e <__swsetup_r+0x16>
 8001e08:	4628      	mov	r0, r5
 8001e0a:	f7ff fb1b 	bl	8001444 <__sinit>
 8001e0e:	4b2e      	ldr	r3, [pc, #184]	; (8001ec8 <__swsetup_r+0xd0>)
 8001e10:	429c      	cmp	r4, r3
 8001e12:	d10f      	bne.n	8001e34 <__swsetup_r+0x3c>
 8001e14:	686c      	ldr	r4, [r5, #4]
 8001e16:	89a3      	ldrh	r3, [r4, #12]
 8001e18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001e1c:	0719      	lsls	r1, r3, #28
 8001e1e:	d42c      	bmi.n	8001e7a <__swsetup_r+0x82>
 8001e20:	06dd      	lsls	r5, r3, #27
 8001e22:	d411      	bmi.n	8001e48 <__swsetup_r+0x50>
 8001e24:	2309      	movs	r3, #9
 8001e26:	6033      	str	r3, [r6, #0]
 8001e28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001e2c:	81a3      	strh	r3, [r4, #12]
 8001e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8001e32:	e03e      	b.n	8001eb2 <__swsetup_r+0xba>
 8001e34:	4b25      	ldr	r3, [pc, #148]	; (8001ecc <__swsetup_r+0xd4>)
 8001e36:	429c      	cmp	r4, r3
 8001e38:	d101      	bne.n	8001e3e <__swsetup_r+0x46>
 8001e3a:	68ac      	ldr	r4, [r5, #8]
 8001e3c:	e7eb      	b.n	8001e16 <__swsetup_r+0x1e>
 8001e3e:	4b24      	ldr	r3, [pc, #144]	; (8001ed0 <__swsetup_r+0xd8>)
 8001e40:	429c      	cmp	r4, r3
 8001e42:	bf08      	it	eq
 8001e44:	68ec      	ldreq	r4, [r5, #12]
 8001e46:	e7e6      	b.n	8001e16 <__swsetup_r+0x1e>
 8001e48:	0758      	lsls	r0, r3, #29
 8001e4a:	d512      	bpl.n	8001e72 <__swsetup_r+0x7a>
 8001e4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e4e:	b141      	cbz	r1, 8001e62 <__swsetup_r+0x6a>
 8001e50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001e54:	4299      	cmp	r1, r3
 8001e56:	d002      	beq.n	8001e5e <__swsetup_r+0x66>
 8001e58:	4630      	mov	r0, r6
 8001e5a:	f000 f991 	bl	8002180 <_free_r>
 8001e5e:	2300      	movs	r3, #0
 8001e60:	6363      	str	r3, [r4, #52]	; 0x34
 8001e62:	89a3      	ldrh	r3, [r4, #12]
 8001e64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001e68:	81a3      	strh	r3, [r4, #12]
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	6063      	str	r3, [r4, #4]
 8001e6e:	6923      	ldr	r3, [r4, #16]
 8001e70:	6023      	str	r3, [r4, #0]
 8001e72:	89a3      	ldrh	r3, [r4, #12]
 8001e74:	f043 0308 	orr.w	r3, r3, #8
 8001e78:	81a3      	strh	r3, [r4, #12]
 8001e7a:	6923      	ldr	r3, [r4, #16]
 8001e7c:	b94b      	cbnz	r3, 8001e92 <__swsetup_r+0x9a>
 8001e7e:	89a3      	ldrh	r3, [r4, #12]
 8001e80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001e84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e88:	d003      	beq.n	8001e92 <__swsetup_r+0x9a>
 8001e8a:	4621      	mov	r1, r4
 8001e8c:	4630      	mov	r0, r6
 8001e8e:	f000 f92b 	bl	80020e8 <__smakebuf_r>
 8001e92:	89a0      	ldrh	r0, [r4, #12]
 8001e94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001e98:	f010 0301 	ands.w	r3, r0, #1
 8001e9c:	d00a      	beq.n	8001eb4 <__swsetup_r+0xbc>
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60a3      	str	r3, [r4, #8]
 8001ea2:	6963      	ldr	r3, [r4, #20]
 8001ea4:	425b      	negs	r3, r3
 8001ea6:	61a3      	str	r3, [r4, #24]
 8001ea8:	6923      	ldr	r3, [r4, #16]
 8001eaa:	b943      	cbnz	r3, 8001ebe <__swsetup_r+0xc6>
 8001eac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001eb0:	d1ba      	bne.n	8001e28 <__swsetup_r+0x30>
 8001eb2:	bd70      	pop	{r4, r5, r6, pc}
 8001eb4:	0781      	lsls	r1, r0, #30
 8001eb6:	bf58      	it	pl
 8001eb8:	6963      	ldrpl	r3, [r4, #20]
 8001eba:	60a3      	str	r3, [r4, #8]
 8001ebc:	e7f4      	b.n	8001ea8 <__swsetup_r+0xb0>
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	e7f7      	b.n	8001eb2 <__swsetup_r+0xba>
 8001ec2:	bf00      	nop
 8001ec4:	20000000 	.word	0x20000000
 8001ec8:	080022cc 	.word	0x080022cc
 8001ecc:	080022ec 	.word	0x080022ec
 8001ed0:	080022ac 	.word	0x080022ac

08001ed4 <_close_r>:
 8001ed4:	b538      	push	{r3, r4, r5, lr}
 8001ed6:	4d06      	ldr	r5, [pc, #24]	; (8001ef0 <_close_r+0x1c>)
 8001ed8:	2300      	movs	r3, #0
 8001eda:	4604      	mov	r4, r0
 8001edc:	4608      	mov	r0, r1
 8001ede:	602b      	str	r3, [r5, #0]
 8001ee0:	f7fe fb39 	bl	8000556 <_close>
 8001ee4:	1c43      	adds	r3, r0, #1
 8001ee6:	d102      	bne.n	8001eee <_close_r+0x1a>
 8001ee8:	682b      	ldr	r3, [r5, #0]
 8001eea:	b103      	cbz	r3, 8001eee <_close_r+0x1a>
 8001eec:	6023      	str	r3, [r4, #0]
 8001eee:	bd38      	pop	{r3, r4, r5, pc}
 8001ef0:	200002ac 	.word	0x200002ac

08001ef4 <__sflush_r>:
 8001ef4:	898a      	ldrh	r2, [r1, #12]
 8001ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001efa:	4605      	mov	r5, r0
 8001efc:	0710      	lsls	r0, r2, #28
 8001efe:	460c      	mov	r4, r1
 8001f00:	d458      	bmi.n	8001fb4 <__sflush_r+0xc0>
 8001f02:	684b      	ldr	r3, [r1, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	dc05      	bgt.n	8001f14 <__sflush_r+0x20>
 8001f08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	dc02      	bgt.n	8001f14 <__sflush_r+0x20>
 8001f0e:	2000      	movs	r0, #0
 8001f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f16:	2e00      	cmp	r6, #0
 8001f18:	d0f9      	beq.n	8001f0e <__sflush_r+0x1a>
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001f20:	682f      	ldr	r7, [r5, #0]
 8001f22:	602b      	str	r3, [r5, #0]
 8001f24:	d032      	beq.n	8001f8c <__sflush_r+0x98>
 8001f26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001f28:	89a3      	ldrh	r3, [r4, #12]
 8001f2a:	075a      	lsls	r2, r3, #29
 8001f2c:	d505      	bpl.n	8001f3a <__sflush_r+0x46>
 8001f2e:	6863      	ldr	r3, [r4, #4]
 8001f30:	1ac0      	subs	r0, r0, r3
 8001f32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f34:	b10b      	cbz	r3, 8001f3a <__sflush_r+0x46>
 8001f36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f38:	1ac0      	subs	r0, r0, r3
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f40:	6a21      	ldr	r1, [r4, #32]
 8001f42:	4628      	mov	r0, r5
 8001f44:	47b0      	blx	r6
 8001f46:	1c43      	adds	r3, r0, #1
 8001f48:	89a3      	ldrh	r3, [r4, #12]
 8001f4a:	d106      	bne.n	8001f5a <__sflush_r+0x66>
 8001f4c:	6829      	ldr	r1, [r5, #0]
 8001f4e:	291d      	cmp	r1, #29
 8001f50:	d82c      	bhi.n	8001fac <__sflush_r+0xb8>
 8001f52:	4a2a      	ldr	r2, [pc, #168]	; (8001ffc <__sflush_r+0x108>)
 8001f54:	40ca      	lsrs	r2, r1
 8001f56:	07d6      	lsls	r6, r2, #31
 8001f58:	d528      	bpl.n	8001fac <__sflush_r+0xb8>
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	6062      	str	r2, [r4, #4]
 8001f5e:	04d9      	lsls	r1, r3, #19
 8001f60:	6922      	ldr	r2, [r4, #16]
 8001f62:	6022      	str	r2, [r4, #0]
 8001f64:	d504      	bpl.n	8001f70 <__sflush_r+0x7c>
 8001f66:	1c42      	adds	r2, r0, #1
 8001f68:	d101      	bne.n	8001f6e <__sflush_r+0x7a>
 8001f6a:	682b      	ldr	r3, [r5, #0]
 8001f6c:	b903      	cbnz	r3, 8001f70 <__sflush_r+0x7c>
 8001f6e:	6560      	str	r0, [r4, #84]	; 0x54
 8001f70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f72:	602f      	str	r7, [r5, #0]
 8001f74:	2900      	cmp	r1, #0
 8001f76:	d0ca      	beq.n	8001f0e <__sflush_r+0x1a>
 8001f78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001f7c:	4299      	cmp	r1, r3
 8001f7e:	d002      	beq.n	8001f86 <__sflush_r+0x92>
 8001f80:	4628      	mov	r0, r5
 8001f82:	f000 f8fd 	bl	8002180 <_free_r>
 8001f86:	2000      	movs	r0, #0
 8001f88:	6360      	str	r0, [r4, #52]	; 0x34
 8001f8a:	e7c1      	b.n	8001f10 <__sflush_r+0x1c>
 8001f8c:	6a21      	ldr	r1, [r4, #32]
 8001f8e:	2301      	movs	r3, #1
 8001f90:	4628      	mov	r0, r5
 8001f92:	47b0      	blx	r6
 8001f94:	1c41      	adds	r1, r0, #1
 8001f96:	d1c7      	bne.n	8001f28 <__sflush_r+0x34>
 8001f98:	682b      	ldr	r3, [r5, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0c4      	beq.n	8001f28 <__sflush_r+0x34>
 8001f9e:	2b1d      	cmp	r3, #29
 8001fa0:	d001      	beq.n	8001fa6 <__sflush_r+0xb2>
 8001fa2:	2b16      	cmp	r3, #22
 8001fa4:	d101      	bne.n	8001faa <__sflush_r+0xb6>
 8001fa6:	602f      	str	r7, [r5, #0]
 8001fa8:	e7b1      	b.n	8001f0e <__sflush_r+0x1a>
 8001faa:	89a3      	ldrh	r3, [r4, #12]
 8001fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fb0:	81a3      	strh	r3, [r4, #12]
 8001fb2:	e7ad      	b.n	8001f10 <__sflush_r+0x1c>
 8001fb4:	690f      	ldr	r7, [r1, #16]
 8001fb6:	2f00      	cmp	r7, #0
 8001fb8:	d0a9      	beq.n	8001f0e <__sflush_r+0x1a>
 8001fba:	0793      	lsls	r3, r2, #30
 8001fbc:	680e      	ldr	r6, [r1, #0]
 8001fbe:	bf08      	it	eq
 8001fc0:	694b      	ldreq	r3, [r1, #20]
 8001fc2:	600f      	str	r7, [r1, #0]
 8001fc4:	bf18      	it	ne
 8001fc6:	2300      	movne	r3, #0
 8001fc8:	eba6 0807 	sub.w	r8, r6, r7
 8001fcc:	608b      	str	r3, [r1, #8]
 8001fce:	f1b8 0f00 	cmp.w	r8, #0
 8001fd2:	dd9c      	ble.n	8001f0e <__sflush_r+0x1a>
 8001fd4:	6a21      	ldr	r1, [r4, #32]
 8001fd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001fd8:	4643      	mov	r3, r8
 8001fda:	463a      	mov	r2, r7
 8001fdc:	4628      	mov	r0, r5
 8001fde:	47b0      	blx	r6
 8001fe0:	2800      	cmp	r0, #0
 8001fe2:	dc06      	bgt.n	8001ff2 <__sflush_r+0xfe>
 8001fe4:	89a3      	ldrh	r3, [r4, #12]
 8001fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fea:	81a3      	strh	r3, [r4, #12]
 8001fec:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff0:	e78e      	b.n	8001f10 <__sflush_r+0x1c>
 8001ff2:	4407      	add	r7, r0
 8001ff4:	eba8 0800 	sub.w	r8, r8, r0
 8001ff8:	e7e9      	b.n	8001fce <__sflush_r+0xda>
 8001ffa:	bf00      	nop
 8001ffc:	20400001 	.word	0x20400001

08002000 <_fflush_r>:
 8002000:	b538      	push	{r3, r4, r5, lr}
 8002002:	690b      	ldr	r3, [r1, #16]
 8002004:	4605      	mov	r5, r0
 8002006:	460c      	mov	r4, r1
 8002008:	b913      	cbnz	r3, 8002010 <_fflush_r+0x10>
 800200a:	2500      	movs	r5, #0
 800200c:	4628      	mov	r0, r5
 800200e:	bd38      	pop	{r3, r4, r5, pc}
 8002010:	b118      	cbz	r0, 800201a <_fflush_r+0x1a>
 8002012:	6983      	ldr	r3, [r0, #24]
 8002014:	b90b      	cbnz	r3, 800201a <_fflush_r+0x1a>
 8002016:	f7ff fa15 	bl	8001444 <__sinit>
 800201a:	4b14      	ldr	r3, [pc, #80]	; (800206c <_fflush_r+0x6c>)
 800201c:	429c      	cmp	r4, r3
 800201e:	d11b      	bne.n	8002058 <_fflush_r+0x58>
 8002020:	686c      	ldr	r4, [r5, #4]
 8002022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0ef      	beq.n	800200a <_fflush_r+0xa>
 800202a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800202c:	07d0      	lsls	r0, r2, #31
 800202e:	d404      	bmi.n	800203a <_fflush_r+0x3a>
 8002030:	0599      	lsls	r1, r3, #22
 8002032:	d402      	bmi.n	800203a <_fflush_r+0x3a>
 8002034:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002036:	f7ff faa3 	bl	8001580 <__retarget_lock_acquire_recursive>
 800203a:	4628      	mov	r0, r5
 800203c:	4621      	mov	r1, r4
 800203e:	f7ff ff59 	bl	8001ef4 <__sflush_r>
 8002042:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002044:	07da      	lsls	r2, r3, #31
 8002046:	4605      	mov	r5, r0
 8002048:	d4e0      	bmi.n	800200c <_fflush_r+0xc>
 800204a:	89a3      	ldrh	r3, [r4, #12]
 800204c:	059b      	lsls	r3, r3, #22
 800204e:	d4dd      	bmi.n	800200c <_fflush_r+0xc>
 8002050:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002052:	f7ff fa96 	bl	8001582 <__retarget_lock_release_recursive>
 8002056:	e7d9      	b.n	800200c <_fflush_r+0xc>
 8002058:	4b05      	ldr	r3, [pc, #20]	; (8002070 <_fflush_r+0x70>)
 800205a:	429c      	cmp	r4, r3
 800205c:	d101      	bne.n	8002062 <_fflush_r+0x62>
 800205e:	68ac      	ldr	r4, [r5, #8]
 8002060:	e7df      	b.n	8002022 <_fflush_r+0x22>
 8002062:	4b04      	ldr	r3, [pc, #16]	; (8002074 <_fflush_r+0x74>)
 8002064:	429c      	cmp	r4, r3
 8002066:	bf08      	it	eq
 8002068:	68ec      	ldreq	r4, [r5, #12]
 800206a:	e7da      	b.n	8002022 <_fflush_r+0x22>
 800206c:	080022cc 	.word	0x080022cc
 8002070:	080022ec 	.word	0x080022ec
 8002074:	080022ac 	.word	0x080022ac

08002078 <_lseek_r>:
 8002078:	b538      	push	{r3, r4, r5, lr}
 800207a:	4d07      	ldr	r5, [pc, #28]	; (8002098 <_lseek_r+0x20>)
 800207c:	4604      	mov	r4, r0
 800207e:	4608      	mov	r0, r1
 8002080:	4611      	mov	r1, r2
 8002082:	2200      	movs	r2, #0
 8002084:	602a      	str	r2, [r5, #0]
 8002086:	461a      	mov	r2, r3
 8002088:	f7fe fa8c 	bl	80005a4 <_lseek>
 800208c:	1c43      	adds	r3, r0, #1
 800208e:	d102      	bne.n	8002096 <_lseek_r+0x1e>
 8002090:	682b      	ldr	r3, [r5, #0]
 8002092:	b103      	cbz	r3, 8002096 <_lseek_r+0x1e>
 8002094:	6023      	str	r3, [r4, #0]
 8002096:	bd38      	pop	{r3, r4, r5, pc}
 8002098:	200002ac 	.word	0x200002ac

0800209c <__swhatbuf_r>:
 800209c:	b570      	push	{r4, r5, r6, lr}
 800209e:	460e      	mov	r6, r1
 80020a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020a4:	2900      	cmp	r1, #0
 80020a6:	b096      	sub	sp, #88	; 0x58
 80020a8:	4614      	mov	r4, r2
 80020aa:	461d      	mov	r5, r3
 80020ac:	da08      	bge.n	80020c0 <__swhatbuf_r+0x24>
 80020ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	602a      	str	r2, [r5, #0]
 80020b6:	061a      	lsls	r2, r3, #24
 80020b8:	d410      	bmi.n	80020dc <__swhatbuf_r+0x40>
 80020ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020be:	e00e      	b.n	80020de <__swhatbuf_r+0x42>
 80020c0:	466a      	mov	r2, sp
 80020c2:	f000 f8bb 	bl	800223c <_fstat_r>
 80020c6:	2800      	cmp	r0, #0
 80020c8:	dbf1      	blt.n	80020ae <__swhatbuf_r+0x12>
 80020ca:	9a01      	ldr	r2, [sp, #4]
 80020cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80020d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80020d4:	425a      	negs	r2, r3
 80020d6:	415a      	adcs	r2, r3
 80020d8:	602a      	str	r2, [r5, #0]
 80020da:	e7ee      	b.n	80020ba <__swhatbuf_r+0x1e>
 80020dc:	2340      	movs	r3, #64	; 0x40
 80020de:	2000      	movs	r0, #0
 80020e0:	6023      	str	r3, [r4, #0]
 80020e2:	b016      	add	sp, #88	; 0x58
 80020e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080020e8 <__smakebuf_r>:
 80020e8:	898b      	ldrh	r3, [r1, #12]
 80020ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80020ec:	079d      	lsls	r5, r3, #30
 80020ee:	4606      	mov	r6, r0
 80020f0:	460c      	mov	r4, r1
 80020f2:	d507      	bpl.n	8002104 <__smakebuf_r+0x1c>
 80020f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80020f8:	6023      	str	r3, [r4, #0]
 80020fa:	6123      	str	r3, [r4, #16]
 80020fc:	2301      	movs	r3, #1
 80020fe:	6163      	str	r3, [r4, #20]
 8002100:	b002      	add	sp, #8
 8002102:	bd70      	pop	{r4, r5, r6, pc}
 8002104:	ab01      	add	r3, sp, #4
 8002106:	466a      	mov	r2, sp
 8002108:	f7ff ffc8 	bl	800209c <__swhatbuf_r>
 800210c:	9900      	ldr	r1, [sp, #0]
 800210e:	4605      	mov	r5, r0
 8002110:	4630      	mov	r0, r6
 8002112:	f7ff fa57 	bl	80015c4 <_malloc_r>
 8002116:	b948      	cbnz	r0, 800212c <__smakebuf_r+0x44>
 8002118:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800211c:	059a      	lsls	r2, r3, #22
 800211e:	d4ef      	bmi.n	8002100 <__smakebuf_r+0x18>
 8002120:	f023 0303 	bic.w	r3, r3, #3
 8002124:	f043 0302 	orr.w	r3, r3, #2
 8002128:	81a3      	strh	r3, [r4, #12]
 800212a:	e7e3      	b.n	80020f4 <__smakebuf_r+0xc>
 800212c:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <__smakebuf_r+0x7c>)
 800212e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002130:	89a3      	ldrh	r3, [r4, #12]
 8002132:	6020      	str	r0, [r4, #0]
 8002134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002138:	81a3      	strh	r3, [r4, #12]
 800213a:	9b00      	ldr	r3, [sp, #0]
 800213c:	6163      	str	r3, [r4, #20]
 800213e:	9b01      	ldr	r3, [sp, #4]
 8002140:	6120      	str	r0, [r4, #16]
 8002142:	b15b      	cbz	r3, 800215c <__smakebuf_r+0x74>
 8002144:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002148:	4630      	mov	r0, r6
 800214a:	f000 f889 	bl	8002260 <_isatty_r>
 800214e:	b128      	cbz	r0, 800215c <__smakebuf_r+0x74>
 8002150:	89a3      	ldrh	r3, [r4, #12]
 8002152:	f023 0303 	bic.w	r3, r3, #3
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	81a3      	strh	r3, [r4, #12]
 800215c:	89a0      	ldrh	r0, [r4, #12]
 800215e:	4305      	orrs	r5, r0
 8002160:	81a5      	strh	r5, [r4, #12]
 8002162:	e7cd      	b.n	8002100 <__smakebuf_r+0x18>
 8002164:	080013dd 	.word	0x080013dd

08002168 <__malloc_lock>:
 8002168:	4801      	ldr	r0, [pc, #4]	; (8002170 <__malloc_lock+0x8>)
 800216a:	f7ff ba09 	b.w	8001580 <__retarget_lock_acquire_recursive>
 800216e:	bf00      	nop
 8002170:	200002a0 	.word	0x200002a0

08002174 <__malloc_unlock>:
 8002174:	4801      	ldr	r0, [pc, #4]	; (800217c <__malloc_unlock+0x8>)
 8002176:	f7ff ba04 	b.w	8001582 <__retarget_lock_release_recursive>
 800217a:	bf00      	nop
 800217c:	200002a0 	.word	0x200002a0

08002180 <_free_r>:
 8002180:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002182:	2900      	cmp	r1, #0
 8002184:	d044      	beq.n	8002210 <_free_r+0x90>
 8002186:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800218a:	9001      	str	r0, [sp, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	f1a1 0404 	sub.w	r4, r1, #4
 8002192:	bfb8      	it	lt
 8002194:	18e4      	addlt	r4, r4, r3
 8002196:	f7ff ffe7 	bl	8002168 <__malloc_lock>
 800219a:	4a1e      	ldr	r2, [pc, #120]	; (8002214 <_free_r+0x94>)
 800219c:	9801      	ldr	r0, [sp, #4]
 800219e:	6813      	ldr	r3, [r2, #0]
 80021a0:	b933      	cbnz	r3, 80021b0 <_free_r+0x30>
 80021a2:	6063      	str	r3, [r4, #4]
 80021a4:	6014      	str	r4, [r2, #0]
 80021a6:	b003      	add	sp, #12
 80021a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80021ac:	f7ff bfe2 	b.w	8002174 <__malloc_unlock>
 80021b0:	42a3      	cmp	r3, r4
 80021b2:	d908      	bls.n	80021c6 <_free_r+0x46>
 80021b4:	6825      	ldr	r5, [r4, #0]
 80021b6:	1961      	adds	r1, r4, r5
 80021b8:	428b      	cmp	r3, r1
 80021ba:	bf01      	itttt	eq
 80021bc:	6819      	ldreq	r1, [r3, #0]
 80021be:	685b      	ldreq	r3, [r3, #4]
 80021c0:	1949      	addeq	r1, r1, r5
 80021c2:	6021      	streq	r1, [r4, #0]
 80021c4:	e7ed      	b.n	80021a2 <_free_r+0x22>
 80021c6:	461a      	mov	r2, r3
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	b10b      	cbz	r3, 80021d0 <_free_r+0x50>
 80021cc:	42a3      	cmp	r3, r4
 80021ce:	d9fa      	bls.n	80021c6 <_free_r+0x46>
 80021d0:	6811      	ldr	r1, [r2, #0]
 80021d2:	1855      	adds	r5, r2, r1
 80021d4:	42a5      	cmp	r5, r4
 80021d6:	d10b      	bne.n	80021f0 <_free_r+0x70>
 80021d8:	6824      	ldr	r4, [r4, #0]
 80021da:	4421      	add	r1, r4
 80021dc:	1854      	adds	r4, r2, r1
 80021de:	42a3      	cmp	r3, r4
 80021e0:	6011      	str	r1, [r2, #0]
 80021e2:	d1e0      	bne.n	80021a6 <_free_r+0x26>
 80021e4:	681c      	ldr	r4, [r3, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	6053      	str	r3, [r2, #4]
 80021ea:	4421      	add	r1, r4
 80021ec:	6011      	str	r1, [r2, #0]
 80021ee:	e7da      	b.n	80021a6 <_free_r+0x26>
 80021f0:	d902      	bls.n	80021f8 <_free_r+0x78>
 80021f2:	230c      	movs	r3, #12
 80021f4:	6003      	str	r3, [r0, #0]
 80021f6:	e7d6      	b.n	80021a6 <_free_r+0x26>
 80021f8:	6825      	ldr	r5, [r4, #0]
 80021fa:	1961      	adds	r1, r4, r5
 80021fc:	428b      	cmp	r3, r1
 80021fe:	bf04      	itt	eq
 8002200:	6819      	ldreq	r1, [r3, #0]
 8002202:	685b      	ldreq	r3, [r3, #4]
 8002204:	6063      	str	r3, [r4, #4]
 8002206:	bf04      	itt	eq
 8002208:	1949      	addeq	r1, r1, r5
 800220a:	6021      	streq	r1, [r4, #0]
 800220c:	6054      	str	r4, [r2, #4]
 800220e:	e7ca      	b.n	80021a6 <_free_r+0x26>
 8002210:	b003      	add	sp, #12
 8002212:	bd30      	pop	{r4, r5, pc}
 8002214:	200002a4 	.word	0x200002a4

08002218 <_read_r>:
 8002218:	b538      	push	{r3, r4, r5, lr}
 800221a:	4d07      	ldr	r5, [pc, #28]	; (8002238 <_read_r+0x20>)
 800221c:	4604      	mov	r4, r0
 800221e:	4608      	mov	r0, r1
 8002220:	4611      	mov	r1, r2
 8002222:	2200      	movs	r2, #0
 8002224:	602a      	str	r2, [r5, #0]
 8002226:	461a      	mov	r2, r3
 8002228:	f7fe f95c 	bl	80004e4 <_read>
 800222c:	1c43      	adds	r3, r0, #1
 800222e:	d102      	bne.n	8002236 <_read_r+0x1e>
 8002230:	682b      	ldr	r3, [r5, #0]
 8002232:	b103      	cbz	r3, 8002236 <_read_r+0x1e>
 8002234:	6023      	str	r3, [r4, #0]
 8002236:	bd38      	pop	{r3, r4, r5, pc}
 8002238:	200002ac 	.word	0x200002ac

0800223c <_fstat_r>:
 800223c:	b538      	push	{r3, r4, r5, lr}
 800223e:	4d07      	ldr	r5, [pc, #28]	; (800225c <_fstat_r+0x20>)
 8002240:	2300      	movs	r3, #0
 8002242:	4604      	mov	r4, r0
 8002244:	4608      	mov	r0, r1
 8002246:	4611      	mov	r1, r2
 8002248:	602b      	str	r3, [r5, #0]
 800224a:	f7fe f990 	bl	800056e <_fstat>
 800224e:	1c43      	adds	r3, r0, #1
 8002250:	d102      	bne.n	8002258 <_fstat_r+0x1c>
 8002252:	682b      	ldr	r3, [r5, #0]
 8002254:	b103      	cbz	r3, 8002258 <_fstat_r+0x1c>
 8002256:	6023      	str	r3, [r4, #0]
 8002258:	bd38      	pop	{r3, r4, r5, pc}
 800225a:	bf00      	nop
 800225c:	200002ac 	.word	0x200002ac

08002260 <_isatty_r>:
 8002260:	b538      	push	{r3, r4, r5, lr}
 8002262:	4d06      	ldr	r5, [pc, #24]	; (800227c <_isatty_r+0x1c>)
 8002264:	2300      	movs	r3, #0
 8002266:	4604      	mov	r4, r0
 8002268:	4608      	mov	r0, r1
 800226a:	602b      	str	r3, [r5, #0]
 800226c:	f7fe f98f 	bl	800058e <_isatty>
 8002270:	1c43      	adds	r3, r0, #1
 8002272:	d102      	bne.n	800227a <_isatty_r+0x1a>
 8002274:	682b      	ldr	r3, [r5, #0]
 8002276:	b103      	cbz	r3, 800227a <_isatty_r+0x1a>
 8002278:	6023      	str	r3, [r4, #0]
 800227a:	bd38      	pop	{r3, r4, r5, pc}
 800227c:	200002ac 	.word	0x200002ac

08002280 <_init>:
 8002280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002282:	bf00      	nop
 8002284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002286:	bc08      	pop	{r3}
 8002288:	469e      	mov	lr, r3
 800228a:	4770      	bx	lr

0800228c <_fini>:
 800228c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800228e:	bf00      	nop
 8002290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002292:	bc08      	pop	{r3}
 8002294:	469e      	mov	lr, r3
 8002296:	4770      	bx	lr
