
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002580  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08002730  08002730  00012730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002820  08002820  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08002820  08002820  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002820  08002820  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002820  08002820  00012820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002824  08002824  00012824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08002828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          0000007c  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000f8  200000f8  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002189  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000007d4  00000000  00000000  00022235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000298  00000000  00000000  00022a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000240  00000000  00000000  00022ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003755  00000000  00000000  00022ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002c36  00000000  00000000  0002663d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c14f  00000000  00000000  00029273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000353c2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000011e8  00000000  00000000  00035414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002718 	.word	0x08002718

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08002718 	.word	0x08002718

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <delay>:
#define MY_ADDR 0x61;

#define SLAVE_ADDR  0x68

void delay(void)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 8000296:	2300      	movs	r3, #0
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	e002      	b.n	80002a2 <delay+0x12>
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	3301      	adds	r3, #1
 80002a0:	607b      	str	r3, [r7, #4]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <delay+0x28>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d9f8      	bls.n	800029c <delay+0xc>
}
 80002aa:	bf00      	nop
 80002ac:	bf00      	nop
 80002ae:	370c      	adds	r7, #12
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr
 80002b8:	0003d08f 	.word	0x0003d08f

080002bc <I2C1_GPIOInits>:
 * PB6-> SCL
 * PB7 -> SDA
 */

void I2C1_GPIOInits(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 80002c2:	4b0e      	ldr	r3, [pc, #56]	; (80002fc <I2C1_GPIOInits+0x40>)
 80002c4:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002c6:	2302      	movs	r3, #2
 80002c8:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80002ca:	2301      	movs	r3, #1
 80002cc:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80002ce:	2301      	movs	r3, #1
 80002d0:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80002d2:	2304      	movs	r3, #4
 80002d4:	737b      	strb	r3, [r7, #13]
	I2CPins. GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002d6:	2302      	movs	r3, #2
 80002d8:	72bb      	strb	r3, [r7, #10]

	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 80002da:	2306      	movs	r3, #6
 80002dc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 fad9 	bl	8000898 <GPIO_Init>


	//sda
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 80002e6:	2307      	movs	r3, #7
 80002e8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 fad3 	bl	8000898 <GPIO_Init>


}
 80002f2:	bf00      	nop
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40020400 	.word	0x40020400

08000300 <I2C1_Inits>:

void I2C1_Inits(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8000304:	4b09      	ldr	r3, [pc, #36]	; (800032c <I2C1_Inits+0x2c>)
 8000306:	4a0a      	ldr	r2, [pc, #40]	; (8000330 <I2C1_Inits+0x30>)
 8000308:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 800030a:	4b08      	ldr	r3, [pc, #32]	; (800032c <I2C1_Inits+0x2c>)
 800030c:	2201      	movs	r2, #1
 800030e:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <I2C1_Inits+0x2c>)
 8000312:	2261      	movs	r2, #97	; 0x61
 8000314:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000316:	4b05      	ldr	r3, [pc, #20]	; (800032c <I2C1_Inits+0x2c>)
 8000318:	2200      	movs	r2, #0
 800031a:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 800031c:	4b03      	ldr	r3, [pc, #12]	; (800032c <I2C1_Inits+0x2c>)
 800031e:	4a05      	ldr	r2, [pc, #20]	; (8000334 <I2C1_Inits+0x34>)
 8000320:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 8000322:	4802      	ldr	r0, [pc, #8]	; (800032c <I2C1_Inits+0x2c>)
 8000324:	f000 fe2e 	bl	8000f84 <I2C_Init>

}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}
 800032c:	2000009c 	.word	0x2000009c
 8000330:	40005400 	.word	0x40005400
 8000334:	000186a0 	.word	0x000186a0

08000338 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b086      	sub	sp, #24
 800033c:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn,GpioLed;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 800033e:	4b13      	ldr	r3, [pc, #76]	; (800038c <GPIO_ButtonInit+0x54>)
 8000340:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000342:	2300      	movs	r3, #0
 8000344:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000346:	2300      	movs	r3, #0
 8000348:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800034a:	2302      	movs	r3, #2
 800034c:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800034e:	2300      	movs	r3, #0
 8000350:	74fb      	strb	r3, [r7, #19]

	GPIO_Init(&GPIOBtn);
 8000352:	f107 030c 	add.w	r3, r7, #12
 8000356:	4618      	mov	r0, r3
 8000358:	f000 fa9e 	bl	8000898 <GPIO_Init>

	//this is led gpio configuration
	GpioLed.pGPIOx = GPIOD;
 800035c:	4b0c      	ldr	r3, [pc, #48]	; (8000390 <GPIO_ButtonInit+0x58>)
 800035e:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000360:	230c      	movs	r3, #12
 8000362:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000364:	2301      	movs	r3, #1
 8000366:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000368:	2302      	movs	r3, #2
 800036a:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 800036c:	2301      	movs	r3, #1
 800036e:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000370:	2300      	movs	r3, #0
 8000372:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOD,ENABLE);
 8000374:	2101      	movs	r1, #1
 8000376:	4806      	ldr	r0, [pc, #24]	; (8000390 <GPIO_ButtonInit+0x58>)
 8000378:	f000 f9a6 	bl	80006c8 <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 800037c:	463b      	mov	r3, r7
 800037e:	4618      	mov	r0, r3
 8000380:	f000 fa8a 	bl	8000898 <GPIO_Init>

}
 8000384:	bf00      	nop
 8000386:	3718      	adds	r7, #24
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	40020000 	.word	0x40020000
 8000390:	40020c00 	.word	0x40020c00

08000394 <main>:


int main(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b084      	sub	sp, #16
 8000398:	af02      	add	r7, sp, #8

	uint8_t commandcode;

	uint8_t len;

	initialise_monitor_handles();
 800039a:	f000 f8c1 	bl	8000520 <initialise_monitor_handles>

	printf("Application is running\n");
 800039e:	4836      	ldr	r0, [pc, #216]	; (8000478 <main+0xe4>)
 80003a0:	f001 fa3c 	bl	800181c <puts>

	GPIO_ButtonInit();
 80003a4:	f7ff ffc8 	bl	8000338 <GPIO_ButtonInit>

	//i2c pin inits
	I2C1_GPIOInits();
 80003a8:	f7ff ff88 	bl	80002bc <I2C1_GPIOInits>

	//i2c peripheral configuration
	I2C1_Inits();
 80003ac:	f7ff ffa8 	bl	8000300 <I2C1_Inits>

	//I2C IRQ configurations
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_EV,ENABLE);
 80003b0:	2101      	movs	r1, #1
 80003b2:	201f      	movs	r0, #31
 80003b4:	f000 feb4 	bl	8001120 <I2C_IRQInterruptConfig>
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_ER,ENABLE);
 80003b8:	2101      	movs	r1, #1
 80003ba:	2020      	movs	r0, #32
 80003bc:	f000 feb0 	bl	8001120 <I2C_IRQInterruptConfig>

	//enable the i2c peripheral
	I2C_PeripheralControl(I2C1,ENABLE);
 80003c0:	2101      	movs	r1, #1
 80003c2:	482e      	ldr	r0, [pc, #184]	; (800047c <main+0xe8>)
 80003c4:	f000 fd0f 	bl	8000de6 <I2C_PeripheralControl>

	//ack bit is made 1 after PE=1
	I2C_ManageAcking(I2C1,I2C_ACK_ENABLE);
 80003c8:	2101      	movs	r1, #1
 80003ca:	482c      	ldr	r0, [pc, #176]	; (800047c <main+0xe8>)
 80003cc:	f000 fe8c 	bl	80010e8 <I2C_ManageAcking>

	while(1)
	{
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 80003d0:	bf00      	nop
 80003d2:	2100      	movs	r1, #0
 80003d4:	482a      	ldr	r0, [pc, #168]	; (8000480 <main+0xec>)
 80003d6:	f000 fbfb 	bl	8000bd0 <GPIO_ReadFromInputPin>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d0f8      	beq.n	80003d2 <main+0x3e>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 80003e0:	f7ff ff56 	bl	8000290 <delay>

		commandcode = 0x51;
 80003e4:	2351      	movs	r3, #81	; 0x51
 80003e6:	71fb      	strb	r3, [r7, #7]


		while(I2C_MasterSendDataIT(&I2C1Handle,&commandcode,1,SLAVE_ADDR,I2C_ENABLE_SR) != I2C_READY);
 80003e8:	bf00      	nop
 80003ea:	1df9      	adds	r1, r7, #7
 80003ec:	2301      	movs	r3, #1
 80003ee:	9300      	str	r3, [sp, #0]
 80003f0:	2368      	movs	r3, #104	; 0x68
 80003f2:	2201      	movs	r2, #1
 80003f4:	4823      	ldr	r0, [pc, #140]	; (8000484 <main+0xf0>)
 80003f6:	f000 ff19 	bl	800122c <I2C_MasterSendDataIT>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d1f4      	bne.n	80003ea <main+0x56>

		while(I2C_MasterReceiveDataIT(&I2C1Handle,&len,1,SLAVE_ADDR,I2C_ENABLE_SR)!= I2C_READY);
 8000400:	bf00      	nop
 8000402:	1db9      	adds	r1, r7, #6
 8000404:	2301      	movs	r3, #1
 8000406:	9300      	str	r3, [sp, #0]
 8000408:	2368      	movs	r3, #104	; 0x68
 800040a:	2201      	movs	r2, #1
 800040c:	481d      	ldr	r0, [pc, #116]	; (8000484 <main+0xf0>)
 800040e:	f000 ff50 	bl	80012b2 <I2C_MasterReceiveDataIT>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d1f4      	bne.n	8000402 <main+0x6e>



		commandcode = 0x52;
 8000418:	2352      	movs	r3, #82	; 0x52
 800041a:	71fb      	strb	r3, [r7, #7]
		while(I2C_MasterSendDataIT(&I2C1Handle,&commandcode,1,SLAVE_ADDR,I2C_ENABLE_SR) != I2C_READY);
 800041c:	bf00      	nop
 800041e:	1df9      	adds	r1, r7, #7
 8000420:	2301      	movs	r3, #1
 8000422:	9300      	str	r3, [sp, #0]
 8000424:	2368      	movs	r3, #104	; 0x68
 8000426:	2201      	movs	r2, #1
 8000428:	4816      	ldr	r0, [pc, #88]	; (8000484 <main+0xf0>)
 800042a:	f000 feff 	bl	800122c <I2C_MasterSendDataIT>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d1f4      	bne.n	800041e <main+0x8a>


		while(I2C_MasterReceiveDataIT(&I2C1Handle,rcv_buf,len,SLAVE_ADDR,I2C_DISABLE_SR)!= I2C_READY);
 8000434:	bf00      	nop
 8000436:	79ba      	ldrb	r2, [r7, #6]
 8000438:	2300      	movs	r3, #0
 800043a:	9300      	str	r3, [sp, #0]
 800043c:	2368      	movs	r3, #104	; 0x68
 800043e:	4912      	ldr	r1, [pc, #72]	; (8000488 <main+0xf4>)
 8000440:	4810      	ldr	r0, [pc, #64]	; (8000484 <main+0xf0>)
 8000442:	f000 ff36 	bl	80012b2 <I2C_MasterReceiveDataIT>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d1f4      	bne.n	8000436 <main+0xa2>

		rxComplt = RESET;
 800044c:	4b0f      	ldr	r3, [pc, #60]	; (800048c <main+0xf8>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]

		//wait till rx completes
        while(rxComplt != SET)
 8000452:	bf00      	nop
 8000454:	4b0d      	ldr	r3, [pc, #52]	; (800048c <main+0xf8>)
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	2b01      	cmp	r3, #1
 800045a:	d1fb      	bne.n	8000454 <main+0xc0>
        {

        }

		rcv_buf[len+1] = '\0';
 800045c:	79bb      	ldrb	r3, [r7, #6]
 800045e:	3301      	adds	r3, #1
 8000460:	4a09      	ldr	r2, [pc, #36]	; (8000488 <main+0xf4>)
 8000462:	2100      	movs	r1, #0
 8000464:	54d1      	strb	r1, [r2, r3]

		printf("Data : %s",rcv_buf);
 8000466:	4908      	ldr	r1, [pc, #32]	; (8000488 <main+0xf4>)
 8000468:	4809      	ldr	r0, [pc, #36]	; (8000490 <main+0xfc>)
 800046a:	f001 f951 	bl	8001710 <iprintf>

		rxComplt = RESET;
 800046e:	4b07      	ldr	r3, [pc, #28]	; (800048c <main+0xf8>)
 8000470:	2200      	movs	r2, #0
 8000472:	701a      	strb	r2, [r3, #0]
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000474:	e7ac      	b.n	80003d0 <main+0x3c>
 8000476:	bf00      	nop
 8000478:	08002730 	.word	0x08002730
 800047c:	40005400 	.word	0x40005400
 8000480:	40020000 	.word	0x40020000
 8000484:	2000009c 	.word	0x2000009c
 8000488:	200000c4 	.word	0x200000c4
 800048c:	20000098 	.word	0x20000098
 8000490:	08002748 	.word	0x08002748

08000494 <I2C1_EV_IRQHandler>:

}


void I2C1_EV_IRQHandler (void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	I2C_EV_IRQHandling(&I2C1Handle);
 8000498:	4802      	ldr	r0, [pc, #8]	; (80004a4 <I2C1_EV_IRQHandler+0x10>)
 800049a:	f000 ff54 	bl	8001346 <I2C_EV_IRQHandling>
}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	2000009c 	.word	0x2000009c

080004a8 <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler (void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	I2C_ER_IRQHandling(&I2C1Handle);
 80004ac:	4802      	ldr	r0, [pc, #8]	; (80004b8 <I2C1_ER_IRQHandler+0x10>)
 80004ae:	f001 f877 	bl	80015a0 <I2C_ER_IRQHandling>
}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	2000009c 	.word	0x2000009c

080004bc <I2C_ApplicationEventCallback>:



void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle,uint8_t AppEv)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
 80004c4:	460b      	mov	r3, r1
 80004c6:	70fb      	strb	r3, [r7, #3]
     if(AppEv == I2C_EV_TX_CMPLT)
 80004c8:	78fb      	ldrb	r3, [r7, #3]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d103      	bne.n	80004d6 <I2C_ApplicationEventCallback+0x1a>
     {
    	 printf("Tx is completed\n");
 80004ce:	480f      	ldr	r0, [pc, #60]	; (800050c <I2C_ApplicationEventCallback+0x50>)
 80004d0:	f001 f9a4 	bl	800181c <puts>
    	 I2C_GenerateStopCondition(I2C1);

    	 //Hang in infinite loop
    	 while(1);
     }
}
 80004d4:	e016      	b.n	8000504 <I2C_ApplicationEventCallback+0x48>
     }else if (AppEv == I2C_EV_RX_CMPLT)
 80004d6:	78fb      	ldrb	r3, [r7, #3]
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d106      	bne.n	80004ea <I2C_ApplicationEventCallback+0x2e>
    	 printf("Rx is completed\n");
 80004dc:	480c      	ldr	r0, [pc, #48]	; (8000510 <I2C_ApplicationEventCallback+0x54>)
 80004de:	f001 f99d 	bl	800181c <puts>
    	 rxComplt = SET;
 80004e2:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <I2C_ApplicationEventCallback+0x58>)
 80004e4:	2201      	movs	r2, #1
 80004e6:	701a      	strb	r2, [r3, #0]
}
 80004e8:	e00c      	b.n	8000504 <I2C_ApplicationEventCallback+0x48>
     }else if (AppEv == I2C_ERROR_AF)
 80004ea:	78fb      	ldrb	r3, [r7, #3]
 80004ec:	2b05      	cmp	r3, #5
 80004ee:	d109      	bne.n	8000504 <I2C_ApplicationEventCallback+0x48>
    	 printf("Error : Ack failure\n");
 80004f0:	4809      	ldr	r0, [pc, #36]	; (8000518 <I2C_ApplicationEventCallback+0x5c>)
 80004f2:	f001 f993 	bl	800181c <puts>
    	 I2C_CloseSendData(pI2CHandle);
 80004f6:	6878      	ldr	r0, [r7, #4]
 80004f8:	f001 f82f 	bl	800155a <I2C_CloseSendData>
    	 I2C_GenerateStopCondition(I2C1);
 80004fc:	4807      	ldr	r0, [pc, #28]	; (800051c <I2C_ApplicationEventCallback+0x60>)
 80004fe:	f000 fb8d 	bl	8000c1c <I2C_GenerateStopCondition>
    	 while(1);
 8000502:	e7fe      	b.n	8000502 <I2C_ApplicationEventCallback+0x46>
}
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	08002754 	.word	0x08002754
 8000510:	08002764 	.word	0x08002764
 8000514:	20000098 	.word	0x20000098
 8000518:	08002774 	.word	0x08002774
 800051c:	40005400 	.word	0x40005400

08000520 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr

0800052e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800052e:	b580      	push	{r7, lr}
 8000530:	b086      	sub	sp, #24
 8000532:	af00      	add	r7, sp, #0
 8000534:	60f8      	str	r0, [r7, #12]
 8000536:	60b9      	str	r1, [r7, #8]
 8000538:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800053a:	2300      	movs	r3, #0
 800053c:	617b      	str	r3, [r7, #20]
 800053e:	e00a      	b.n	8000556 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000540:	f3af 8000 	nop.w
 8000544:	4601      	mov	r1, r0
 8000546:	68bb      	ldr	r3, [r7, #8]
 8000548:	1c5a      	adds	r2, r3, #1
 800054a:	60ba      	str	r2, [r7, #8]
 800054c:	b2ca      	uxtb	r2, r1
 800054e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000550:	697b      	ldr	r3, [r7, #20]
 8000552:	3301      	adds	r3, #1
 8000554:	617b      	str	r3, [r7, #20]
 8000556:	697a      	ldr	r2, [r7, #20]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	429a      	cmp	r2, r3
 800055c:	dbf0      	blt.n	8000540 <_read+0x12>
	}

return len;
 800055e:	687b      	ldr	r3, [r7, #4]
}
 8000560:	4618      	mov	r0, r3
 8000562:	3718      	adds	r7, #24
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000574:	2300      	movs	r3, #0
 8000576:	617b      	str	r3, [r7, #20]
 8000578:	e009      	b.n	800058e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	1c5a      	adds	r2, r3, #1
 800057e:	60ba      	str	r2, [r7, #8]
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	4618      	mov	r0, r3
 8000584:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	3301      	adds	r3, #1
 800058c:	617b      	str	r3, [r7, #20]
 800058e:	697a      	ldr	r2, [r7, #20]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	429a      	cmp	r2, r3
 8000594:	dbf1      	blt.n	800057a <_write+0x12>
	}
	return len;
 8000596:	687b      	ldr	r3, [r7, #4]
}
 8000598:	4618      	mov	r0, r3
 800059a:	3718      	adds	r7, #24
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <_close>:

int _close(int file)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	return -1;
 80005a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005c8:	605a      	str	r2, [r3, #4]
	return 0;
 80005ca:	2300      	movs	r3, #0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <_isatty>:

int _isatty(int file)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	return 1;
 80005e0:	2301      	movs	r3, #1
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005ee:	b480      	push	{r7}
 80005f0:	b085      	sub	sp, #20
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	60f8      	str	r0, [r7, #12]
 80005f6:	60b9      	str	r1, [r7, #8]
 80005f8:	607a      	str	r2, [r7, #4]
	return 0;
 80005fa:	2300      	movs	r3, #0
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3714      	adds	r7, #20
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000610:	4a14      	ldr	r2, [pc, #80]	; (8000664 <_sbrk+0x5c>)
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <_sbrk+0x60>)
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800061c:	4b13      	ldr	r3, [pc, #76]	; (800066c <_sbrk+0x64>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d102      	bne.n	800062a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000624:	4b11      	ldr	r3, [pc, #68]	; (800066c <_sbrk+0x64>)
 8000626:	4a12      	ldr	r2, [pc, #72]	; (8000670 <_sbrk+0x68>)
 8000628:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800062a:	4b10      	ldr	r3, [pc, #64]	; (800066c <_sbrk+0x64>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4413      	add	r3, r2
 8000632:	693a      	ldr	r2, [r7, #16]
 8000634:	429a      	cmp	r2, r3
 8000636:	d207      	bcs.n	8000648 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000638:	f001 f838 	bl	80016ac <__errno>
 800063c:	4603      	mov	r3, r0
 800063e:	220c      	movs	r2, #12
 8000640:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000642:	f04f 33ff 	mov.w	r3, #4294967295
 8000646:	e009      	b.n	800065c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <_sbrk+0x64>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800064e:	4b07      	ldr	r3, [pc, #28]	; (800066c <_sbrk+0x64>)
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4413      	add	r3, r2
 8000656:	4a05      	ldr	r2, [pc, #20]	; (800066c <_sbrk+0x64>)
 8000658:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800065a:	68fb      	ldr	r3, [r7, #12]
}
 800065c:	4618      	mov	r0, r3
 800065e:	3718      	adds	r7, #24
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20020000 	.word	0x20020000
 8000668:	00000400 	.word	0x00000400
 800066c:	200000e4 	.word	0x200000e4
 8000670:	200000f8 	.word	0x200000f8

08000674 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000674:	480d      	ldr	r0, [pc, #52]	; (80006ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000676:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000678:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800067c:	480c      	ldr	r0, [pc, #48]	; (80006b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800067e:	490d      	ldr	r1, [pc, #52]	; (80006b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000680:	4a0d      	ldr	r2, [pc, #52]	; (80006b8 <LoopForever+0xe>)
  movs r3, #0
 8000682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000684:	e002      	b.n	800068c <LoopCopyDataInit>

08000686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800068a:	3304      	adds	r3, #4

0800068c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800068c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800068e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000690:	d3f9      	bcc.n	8000686 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000692:	4a0a      	ldr	r2, [pc, #40]	; (80006bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000694:	4c0a      	ldr	r4, [pc, #40]	; (80006c0 <LoopForever+0x16>)
  movs r3, #0
 8000696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000698:	e001      	b.n	800069e <LoopFillZerobss>

0800069a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800069a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800069c:	3204      	adds	r2, #4

0800069e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800069e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a0:	d3fb      	bcc.n	800069a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006a2:	f001 f809 	bl	80016b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006a6:	f7ff fe75 	bl	8000394 <main>

080006aa <LoopForever>:

LoopForever:
    b LoopForever
 80006aa:	e7fe      	b.n	80006aa <LoopForever>
  ldr   r0, =_estack
 80006ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006b4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80006b8:	08002828 	.word	0x08002828
  ldr r2, =_sbss
 80006bc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80006c0:	200000f8 	.word	0x200000f8

080006c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006c4:	e7fe      	b.n	80006c4 <ADC_IRQHandler>
	...

080006c8 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	460b      	mov	r3, r1
 80006d2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80006d4:	78fb      	ldrb	r3, [r7, #3]
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d162      	bne.n	80007a0 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4a64      	ldr	r2, [pc, #400]	; (8000870 <GPIO_PeriClockControl+0x1a8>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d106      	bne.n	80006f0 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80006e2:	4b64      	ldr	r3, [pc, #400]	; (8000874 <GPIO_PeriClockControl+0x1ac>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a63      	ldr	r2, [pc, #396]	; (8000874 <GPIO_PeriClockControl+0x1ac>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOI_PCLK_DI();
		}
	}

}
 80006ee:	e0b9      	b.n	8000864 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4a61      	ldr	r2, [pc, #388]	; (8000878 <GPIO_PeriClockControl+0x1b0>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d106      	bne.n	8000706 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80006f8:	4b5e      	ldr	r3, [pc, #376]	; (8000874 <GPIO_PeriClockControl+0x1ac>)
 80006fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fc:	4a5d      	ldr	r2, [pc, #372]	; (8000874 <GPIO_PeriClockControl+0x1ac>)
 80006fe:	f043 0302 	orr.w	r3, r3, #2
 8000702:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000704:	e0ae      	b.n	8000864 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4a5c      	ldr	r2, [pc, #368]	; (800087c <GPIO_PeriClockControl+0x1b4>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d106      	bne.n	800071c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800070e:	4b59      	ldr	r3, [pc, #356]	; (8000874 <GPIO_PeriClockControl+0x1ac>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a58      	ldr	r2, [pc, #352]	; (8000874 <GPIO_PeriClockControl+0x1ac>)
 8000714:	f043 0304 	orr.w	r3, r3, #4
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
}
 800071a:	e0a3      	b.n	8000864 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4a58      	ldr	r2, [pc, #352]	; (8000880 <GPIO_PeriClockControl+0x1b8>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d106      	bne.n	8000732 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000724:	4b53      	ldr	r3, [pc, #332]	; (8000874 <GPIO_PeriClockControl+0x1ac>)
 8000726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000728:	4a52      	ldr	r2, [pc, #328]	; (8000874 <GPIO_PeriClockControl+0x1ac>)
 800072a:	f043 0308 	orr.w	r3, r3, #8
 800072e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000730:	e098      	b.n	8000864 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4a53      	ldr	r2, [pc, #332]	; (8000884 <GPIO_PeriClockControl+0x1bc>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d106      	bne.n	8000748 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800073a:	4b4e      	ldr	r3, [pc, #312]	; (8000874 <GPIO_PeriClockControl+0x1ac>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a4d      	ldr	r2, [pc, #308]	; (8000874 <GPIO_PeriClockControl+0x1ac>)
 8000740:	f043 0310 	orr.w	r3, r3, #16
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000746:	e08d      	b.n	8000864 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4a4f      	ldr	r2, [pc, #316]	; (8000888 <GPIO_PeriClockControl+0x1c0>)
 800074c:	4293      	cmp	r3, r2
 800074e:	d106      	bne.n	800075e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000750:	4b48      	ldr	r3, [pc, #288]	; (8000874 <GPIO_PeriClockControl+0x1ac>)
 8000752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000754:	4a47      	ldr	r2, [pc, #284]	; (8000874 <GPIO_PeriClockControl+0x1ac>)
 8000756:	f043 0320 	orr.w	r3, r3, #32
 800075a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800075c:	e082      	b.n	8000864 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4a4a      	ldr	r2, [pc, #296]	; (800088c <GPIO_PeriClockControl+0x1c4>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d106      	bne.n	8000774 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000766:	4b43      	ldr	r3, [pc, #268]	; (8000874 <GPIO_PeriClockControl+0x1ac>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a42      	ldr	r2, [pc, #264]	; (8000874 <GPIO_PeriClockControl+0x1ac>)
 800076c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000772:	e077      	b.n	8000864 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	4a46      	ldr	r2, [pc, #280]	; (8000890 <GPIO_PeriClockControl+0x1c8>)
 8000778:	4293      	cmp	r3, r2
 800077a:	d106      	bne.n	800078a <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 800077c:	4b3d      	ldr	r3, [pc, #244]	; (8000874 <GPIO_PeriClockControl+0x1ac>)
 800077e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000780:	4a3c      	ldr	r2, [pc, #240]	; (8000874 <GPIO_PeriClockControl+0x1ac>)
 8000782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000786:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000788:	e06c      	b.n	8000864 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4a41      	ldr	r2, [pc, #260]	; (8000894 <GPIO_PeriClockControl+0x1cc>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d168      	bne.n	8000864 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000792:	4b38      	ldr	r3, [pc, #224]	; (8000874 <GPIO_PeriClockControl+0x1ac>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a37      	ldr	r2, [pc, #220]	; (8000874 <GPIO_PeriClockControl+0x1ac>)
 8000798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800079e:	e061      	b.n	8000864 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4a33      	ldr	r2, [pc, #204]	; (8000870 <GPIO_PeriClockControl+0x1a8>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d106      	bne.n	80007b6 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 80007a8:	4b32      	ldr	r3, [pc, #200]	; (8000874 <GPIO_PeriClockControl+0x1ac>)
 80007aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ac:	4a31      	ldr	r2, [pc, #196]	; (8000874 <GPIO_PeriClockControl+0x1ac>)
 80007ae:	f023 0301 	bic.w	r3, r3, #1
 80007b2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007b4:	e056      	b.n	8000864 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4a2f      	ldr	r2, [pc, #188]	; (8000878 <GPIO_PeriClockControl+0x1b0>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d106      	bne.n	80007cc <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 80007be:	4b2d      	ldr	r3, [pc, #180]	; (8000874 <GPIO_PeriClockControl+0x1ac>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a2c      	ldr	r2, [pc, #176]	; (8000874 <GPIO_PeriClockControl+0x1ac>)
 80007c4:	f023 0302 	bic.w	r3, r3, #2
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007ca:	e04b      	b.n	8000864 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4a2b      	ldr	r2, [pc, #172]	; (800087c <GPIO_PeriClockControl+0x1b4>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d106      	bne.n	80007e2 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 80007d4:	4b27      	ldr	r3, [pc, #156]	; (8000874 <GPIO_PeriClockControl+0x1ac>)
 80007d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d8:	4a26      	ldr	r2, [pc, #152]	; (8000874 <GPIO_PeriClockControl+0x1ac>)
 80007da:	f023 0304 	bic.w	r3, r3, #4
 80007de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007e0:	e040      	b.n	8000864 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4a26      	ldr	r2, [pc, #152]	; (8000880 <GPIO_PeriClockControl+0x1b8>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d106      	bne.n	80007f8 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 80007ea:	4b22      	ldr	r3, [pc, #136]	; (8000874 <GPIO_PeriClockControl+0x1ac>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a21      	ldr	r2, [pc, #132]	; (8000874 <GPIO_PeriClockControl+0x1ac>)
 80007f0:	f023 0308 	bic.w	r3, r3, #8
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007f6:	e035      	b.n	8000864 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	4a22      	ldr	r2, [pc, #136]	; (8000884 <GPIO_PeriClockControl+0x1bc>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d106      	bne.n	800080e <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000800:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <GPIO_PeriClockControl+0x1ac>)
 8000802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000804:	4a1b      	ldr	r2, [pc, #108]	; (8000874 <GPIO_PeriClockControl+0x1ac>)
 8000806:	f023 0310 	bic.w	r3, r3, #16
 800080a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800080c:	e02a      	b.n	8000864 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4a1d      	ldr	r2, [pc, #116]	; (8000888 <GPIO_PeriClockControl+0x1c0>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d106      	bne.n	8000824 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <GPIO_PeriClockControl+0x1ac>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a16      	ldr	r2, [pc, #88]	; (8000874 <GPIO_PeriClockControl+0x1ac>)
 800081c:	f023 0320 	bic.w	r3, r3, #32
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000822:	e01f      	b.n	8000864 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4a19      	ldr	r2, [pc, #100]	; (800088c <GPIO_PeriClockControl+0x1c4>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d106      	bne.n	800083a <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <GPIO_PeriClockControl+0x1ac>)
 800082e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000830:	4a10      	ldr	r2, [pc, #64]	; (8000874 <GPIO_PeriClockControl+0x1ac>)
 8000832:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000836:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000838:	e014      	b.n	8000864 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4a14      	ldr	r2, [pc, #80]	; (8000890 <GPIO_PeriClockControl+0x1c8>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d106      	bne.n	8000850 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <GPIO_PeriClockControl+0x1ac>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a0b      	ldr	r2, [pc, #44]	; (8000874 <GPIO_PeriClockControl+0x1ac>)
 8000848:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800084e:	e009      	b.n	8000864 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	4a10      	ldr	r2, [pc, #64]	; (8000894 <GPIO_PeriClockControl+0x1cc>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d105      	bne.n	8000864 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <GPIO_PeriClockControl+0x1ac>)
 800085a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085c:	4a05      	ldr	r2, [pc, #20]	; (8000874 <GPIO_PeriClockControl+0x1ac>)
 800085e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000862:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	40020000 	.word	0x40020000
 8000874:	40023800 	.word	0x40023800
 8000878:	40020400 	.word	0x40020400
 800087c:	40020800 	.word	0x40020800
 8000880:	40020c00 	.word	0x40020c00
 8000884:	40021000 	.word	0x40021000
 8000888:	40021400 	.word	0x40021400
 800088c:	40021800 	.word	0x40021800
 8000890:	40021c00 	.word	0x40021c00
 8000894:	40022000 	.word	0x40022000

08000898 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2101      	movs	r1, #1
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff ff0c 	bl	80006c8 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	795b      	ldrb	r3, [r3, #5]
 80008b4:	2b03      	cmp	r3, #3
 80008b6:	d820      	bhi.n	80008fa <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	795b      	ldrb	r3, [r3, #5]
 80008bc:	461a      	mov	r2, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	791b      	ldrb	r3, [r3, #4]
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	fa02 f303 	lsl.w	r3, r2, r3
 80008c8:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	791b      	ldrb	r3, [r3, #4]
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	2103      	movs	r1, #3
 80008d8:	fa01 f303 	lsl.w	r3, r1, r3
 80008dc:	43db      	mvns	r3, r3
 80008de:	4619      	mov	r1, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	400a      	ands	r2, r1
 80008e6:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	6819      	ldr	r1, [r3, #0]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	697a      	ldr	r2, [r7, #20]
 80008f4:	430a      	orrs	r2, r1
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	e0cb      	b.n	8000a92 <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	795b      	ldrb	r3, [r3, #5]
 80008fe:	2b04      	cmp	r3, #4
 8000900:	d117      	bne.n	8000932 <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000902:	4b4b      	ldr	r3, [pc, #300]	; (8000a30 <GPIO_Init+0x198>)
 8000904:	68db      	ldr	r3, [r3, #12]
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	7912      	ldrb	r2, [r2, #4]
 800090a:	4611      	mov	r1, r2
 800090c:	2201      	movs	r2, #1
 800090e:	408a      	lsls	r2, r1
 8000910:	4611      	mov	r1, r2
 8000912:	4a47      	ldr	r2, [pc, #284]	; (8000a30 <GPIO_Init+0x198>)
 8000914:	430b      	orrs	r3, r1
 8000916:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000918:	4b45      	ldr	r3, [pc, #276]	; (8000a30 <GPIO_Init+0x198>)
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	687a      	ldr	r2, [r7, #4]
 800091e:	7912      	ldrb	r2, [r2, #4]
 8000920:	4611      	mov	r1, r2
 8000922:	2201      	movs	r2, #1
 8000924:	408a      	lsls	r2, r1
 8000926:	43d2      	mvns	r2, r2
 8000928:	4611      	mov	r1, r2
 800092a:	4a41      	ldr	r2, [pc, #260]	; (8000a30 <GPIO_Init+0x198>)
 800092c:	400b      	ands	r3, r1
 800092e:	6093      	str	r3, [r2, #8]
 8000930:	e035      	b.n	800099e <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	795b      	ldrb	r3, [r3, #5]
 8000936:	2b05      	cmp	r3, #5
 8000938:	d117      	bne.n	800096a <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800093a:	4b3d      	ldr	r3, [pc, #244]	; (8000a30 <GPIO_Init+0x198>)
 800093c:	689b      	ldr	r3, [r3, #8]
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	7912      	ldrb	r2, [r2, #4]
 8000942:	4611      	mov	r1, r2
 8000944:	2201      	movs	r2, #1
 8000946:	408a      	lsls	r2, r1
 8000948:	4611      	mov	r1, r2
 800094a:	4a39      	ldr	r2, [pc, #228]	; (8000a30 <GPIO_Init+0x198>)
 800094c:	430b      	orrs	r3, r1
 800094e:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000950:	4b37      	ldr	r3, [pc, #220]	; (8000a30 <GPIO_Init+0x198>)
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	687a      	ldr	r2, [r7, #4]
 8000956:	7912      	ldrb	r2, [r2, #4]
 8000958:	4611      	mov	r1, r2
 800095a:	2201      	movs	r2, #1
 800095c:	408a      	lsls	r2, r1
 800095e:	43d2      	mvns	r2, r2
 8000960:	4611      	mov	r1, r2
 8000962:	4a33      	ldr	r2, [pc, #204]	; (8000a30 <GPIO_Init+0x198>)
 8000964:	400b      	ands	r3, r1
 8000966:	60d3      	str	r3, [r2, #12]
 8000968:	e019      	b.n	800099e <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	795b      	ldrb	r3, [r3, #5]
 800096e:	2b06      	cmp	r3, #6
 8000970:	d115      	bne.n	800099e <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000972:	4b2f      	ldr	r3, [pc, #188]	; (8000a30 <GPIO_Init+0x198>)
 8000974:	689b      	ldr	r3, [r3, #8]
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	7912      	ldrb	r2, [r2, #4]
 800097a:	4611      	mov	r1, r2
 800097c:	2201      	movs	r2, #1
 800097e:	408a      	lsls	r2, r1
 8000980:	4611      	mov	r1, r2
 8000982:	4a2b      	ldr	r2, [pc, #172]	; (8000a30 <GPIO_Init+0x198>)
 8000984:	430b      	orrs	r3, r1
 8000986:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000988:	4b29      	ldr	r3, [pc, #164]	; (8000a30 <GPIO_Init+0x198>)
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	7912      	ldrb	r2, [r2, #4]
 8000990:	4611      	mov	r1, r2
 8000992:	2201      	movs	r2, #1
 8000994:	408a      	lsls	r2, r1
 8000996:	4611      	mov	r1, r2
 8000998:	4a25      	ldr	r2, [pc, #148]	; (8000a30 <GPIO_Init+0x198>)
 800099a:	430b      	orrs	r3, r1
 800099c:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	791b      	ldrb	r3, [r3, #4]
 80009a2:	089b      	lsrs	r3, r3, #2
 80009a4:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	791b      	ldrb	r3, [r3, #4]
 80009aa:	f003 0303 	and.w	r3, r3, #3
 80009ae:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a1f      	ldr	r2, [pc, #124]	; (8000a34 <GPIO_Init+0x19c>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d04e      	beq.n	8000a58 <GPIO_Init+0x1c0>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a1e      	ldr	r2, [pc, #120]	; (8000a38 <GPIO_Init+0x1a0>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d032      	beq.n	8000a2a <GPIO_Init+0x192>
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a1c      	ldr	r2, [pc, #112]	; (8000a3c <GPIO_Init+0x1a4>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d02b      	beq.n	8000a26 <GPIO_Init+0x18e>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a1b      	ldr	r2, [pc, #108]	; (8000a40 <GPIO_Init+0x1a8>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d024      	beq.n	8000a22 <GPIO_Init+0x18a>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a19      	ldr	r2, [pc, #100]	; (8000a44 <GPIO_Init+0x1ac>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d01d      	beq.n	8000a1e <GPIO_Init+0x186>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a18      	ldr	r2, [pc, #96]	; (8000a48 <GPIO_Init+0x1b0>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d016      	beq.n	8000a1a <GPIO_Init+0x182>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a16      	ldr	r2, [pc, #88]	; (8000a4c <GPIO_Init+0x1b4>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d00f      	beq.n	8000a16 <GPIO_Init+0x17e>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a15      	ldr	r2, [pc, #84]	; (8000a50 <GPIO_Init+0x1b8>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d008      	beq.n	8000a12 <GPIO_Init+0x17a>
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a13      	ldr	r2, [pc, #76]	; (8000a54 <GPIO_Init+0x1bc>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d101      	bne.n	8000a0e <GPIO_Init+0x176>
 8000a0a:	2308      	movs	r3, #8
 8000a0c:	e025      	b.n	8000a5a <GPIO_Init+0x1c2>
 8000a0e:	2300      	movs	r3, #0
 8000a10:	e023      	b.n	8000a5a <GPIO_Init+0x1c2>
 8000a12:	2307      	movs	r3, #7
 8000a14:	e021      	b.n	8000a5a <GPIO_Init+0x1c2>
 8000a16:	2306      	movs	r3, #6
 8000a18:	e01f      	b.n	8000a5a <GPIO_Init+0x1c2>
 8000a1a:	2305      	movs	r3, #5
 8000a1c:	e01d      	b.n	8000a5a <GPIO_Init+0x1c2>
 8000a1e:	2304      	movs	r3, #4
 8000a20:	e01b      	b.n	8000a5a <GPIO_Init+0x1c2>
 8000a22:	2303      	movs	r3, #3
 8000a24:	e019      	b.n	8000a5a <GPIO_Init+0x1c2>
 8000a26:	2302      	movs	r3, #2
 8000a28:	e017      	b.n	8000a5a <GPIO_Init+0x1c2>
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e015      	b.n	8000a5a <GPIO_Init+0x1c2>
 8000a2e:	bf00      	nop
 8000a30:	40013c00 	.word	0x40013c00
 8000a34:	40020000 	.word	0x40020000
 8000a38:	40020400 	.word	0x40020400
 8000a3c:	40020800 	.word	0x40020800
 8000a40:	40020c00 	.word	0x40020c00
 8000a44:	40021000 	.word	0x40021000
 8000a48:	40021400 	.word	0x40021400
 8000a4c:	40021800 	.word	0x40021800
 8000a50:	40021c00 	.word	0x40021c00
 8000a54:	40022000 	.word	0x40022000
 8000a58:	2300      	movs	r3, #0
 8000a5a:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000a5c:	4b59      	ldr	r3, [pc, #356]	; (8000bc4 <GPIO_Init+0x32c>)
 8000a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a60:	4a58      	ldr	r2, [pc, #352]	; (8000bc4 <GPIO_Init+0x32c>)
 8000a62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a66:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000a68:	7c7a      	ldrb	r2, [r7, #17]
 8000a6a:	7cbb      	ldrb	r3, [r7, #18]
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	fa02 f103 	lsl.w	r1, r2, r3
 8000a72:	4a55      	ldr	r2, [pc, #340]	; (8000bc8 <GPIO_Init+0x330>)
 8000a74:	7cfb      	ldrb	r3, [r7, #19]
 8000a76:	3302      	adds	r3, #2
 8000a78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000a7c:	4b53      	ldr	r3, [pc, #332]	; (8000bcc <GPIO_Init+0x334>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	7912      	ldrb	r2, [r2, #4]
 8000a84:	4611      	mov	r1, r2
 8000a86:	2201      	movs	r2, #1
 8000a88:	408a      	lsls	r2, r1
 8000a8a:	4611      	mov	r1, r2
 8000a8c:	4a4f      	ldr	r2, [pc, #316]	; (8000bcc <GPIO_Init+0x334>)
 8000a8e:	430b      	orrs	r3, r1
 8000a90:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	799b      	ldrb	r3, [r3, #6]
 8000a96:	461a      	mov	r2, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	791b      	ldrb	r3, [r3, #4]
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	689a      	ldr	r2, [r3, #8]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	791b      	ldrb	r3, [r3, #4]
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	2103      	movs	r1, #3
 8000ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	4619      	mov	r1, r3
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	400a      	ands	r2, r1
 8000ac0:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	6899      	ldr	r1, [r3, #8]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	697a      	ldr	r2, [r7, #20]
 8000ace:	430a      	orrs	r2, r1
 8000ad0:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	79db      	ldrb	r3, [r3, #7]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	791b      	ldrb	r3, [r3, #4]
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	68da      	ldr	r2, [r3, #12]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	791b      	ldrb	r3, [r3, #4]
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	2103      	movs	r1, #3
 8000af2:	fa01 f303 	lsl.w	r3, r1, r3
 8000af6:	43db      	mvns	r3, r3
 8000af8:	4619      	mov	r1, r3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	400a      	ands	r2, r1
 8000b00:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	68d9      	ldr	r1, [r3, #12]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	697a      	ldr	r2, [r7, #20]
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	7a1b      	ldrb	r3, [r3, #8]
 8000b16:	461a      	mov	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	791b      	ldrb	r3, [r3, #4]
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	685a      	ldr	r2, [r3, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	791b      	ldrb	r3, [r3, #4]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	2301      	movs	r3, #1
 8000b30:	408b      	lsls	r3, r1
 8000b32:	43db      	mvns	r3, r3
 8000b34:	4619      	mov	r1, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	400a      	ands	r2, r1
 8000b3c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	6859      	ldr	r1, [r3, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	430a      	orrs	r2, r1
 8000b4c:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	795b      	ldrb	r3, [r3, #5]
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	d131      	bne.n	8000bba <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	791b      	ldrb	r3, [r3, #4]
 8000b5a:	08db      	lsrs	r3, r3, #3
 8000b5c:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	791b      	ldrb	r3, [r3, #4]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	7c3a      	ldrb	r2, [r7, #16]
 8000b6e:	3208      	adds	r2, #8
 8000b70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	220f      	movs	r2, #15
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	4618      	mov	r0, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	7c3a      	ldrb	r2, [r7, #16]
 8000b88:	4001      	ands	r1, r0
 8000b8a:	3208      	adds	r2, #8
 8000b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	7c3a      	ldrb	r2, [r7, #16]
 8000b96:	3208      	adds	r2, #8
 8000b98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	7a5b      	ldrb	r3, [r3, #9]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	4618      	mov	r0, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	7c3a      	ldrb	r2, [r7, #16]
 8000bb2:	4301      	orrs	r1, r0
 8000bb4:	3208      	adds	r2, #8
 8000bb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000bba:	bf00      	nop
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40013800 	.word	0x40013800
 8000bcc:	40013c00 	.word	0x40013c00

08000bd0 <GPIO_ReadFromInputPin>:
 *
 * @Note              -

 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	460b      	mov	r3, r1
 8000bda:	70fb      	strb	r3, [r7, #3]
   uint8_t value;

   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	691a      	ldr	r2, [r3, #16]
 8000be0:	78fb      	ldrb	r3, [r7, #3]
 8000be2:	fa22 f303 	lsr.w	r3, r2, r3
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	f003 0301 	and.w	r3, r3, #1
 8000bec:	73fb      	strb	r3, [r7, #15]

   return value;
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <I2C_GenerateStartCondition>:
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle );



static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	601a      	str	r2, [r3, #0]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <I2C_GenerateStopCondition>:


void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	601a      	str	r2, [r3, #0]
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <I2C_ExecuteAddressPhaseWrite>:



static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	460b      	mov	r3, r1
 8000c46:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000c48:	78fb      	ldrb	r3, [r7, #3]
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 8000c4e:	78fb      	ldrb	r3, [r7, #3]
 8000c50:	f023 0301 	bic.w	r3, r3, #1
 8000c54:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000c56:	78fa      	ldrb	r2, [r7, #3]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	611a      	str	r2, [r3, #16]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <I2C_ExecuteAddressPhaseRead>:

static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	460b      	mov	r3, r1
 8000c72:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000c74:	78fb      	ldrb	r3, [r7, #3]
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; //SlaveAddr is Slave address + r/nw bit=1
 8000c7a:	78fb      	ldrb	r3, [r7, #3]
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000c82:	78fa      	ldrb	r2, [r7, #3]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	611a      	str	r2, [r3, #16]
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <I2C_ClearADDRFlag>:



static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle )
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	699b      	ldr	r3, [r3, #24]
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d01f      	beq.n	8000cea <I2C_ClearADDRFlag+0x56>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	7f1b      	ldrb	r3, [r3, #28]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d112      	bne.n	8000cd8 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize  == 1)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6a1b      	ldr	r3, [r3, #32]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d11f      	bne.n	8000cfa <I2C_ClearADDRFlag+0x66>
			{
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f000 fa11 	bl	80010e8 <I2C_ManageAcking>

				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	695b      	ldr	r3, [r3, #20]
 8000ccc:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}


}
 8000cd6:	e010      	b.n	8000cfa <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	60fb      	str	r3, [r7, #12]
}
 8000ce8:	e007      	b.n	8000cfa <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	695b      	ldr	r3, [r3, #20]
 8000cf0:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	60fb      	str	r3, [r7, #12]
}
 8000cfa:	bf00      	nop
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <I2C_MasterHandleTXEInterrupt>:

static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle )
{
 8000d02:	b480      	push	{r7}
 8000d04:	b083      	sub	sp, #12
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]

	if(pI2CHandle->TxLen > 0)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	695b      	ldr	r3, [r3, #20]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d00f      	beq.n	8000d32 <I2C_MasterHandleTXEInterrupt+0x30>
	{
		//1. load the data in to DR
		pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	68db      	ldr	r3, [r3, #12]
 8000d16:	781a      	ldrb	r2, [r3, #0]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	611a      	str	r2, [r3, #16]

		//2. decrement the TxLen
		pI2CHandle->TxLen--;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	1e5a      	subs	r2, r3, #1
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	615a      	str	r2, [r3, #20]

		//3. Increment the buffer address
		pI2CHandle->pTxBuffer++;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	1c5a      	adds	r2, r3, #1
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	60da      	str	r2, [r3, #12]

	}

}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <I2C_MasterHandleRXNEInterrupt>:

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle )
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
	//We have to do the data reception
	if(pI2CHandle->RxSize == 1)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6a1b      	ldr	r3, [r3, #32]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d10b      	bne.n	8000d66 <I2C_MasterHandleRXNEInterrupt+0x28>
	{
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	691a      	ldr	r2, [r3, #16]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	691b      	ldr	r3, [r3, #16]
 8000d58:	b2d2      	uxtb	r2, r2
 8000d5a:	701a      	strb	r2, [r3, #0]
		pI2CHandle->RxLen--;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	1e5a      	subs	r2, r3, #1
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	619a      	str	r2, [r3, #24]

	}


	if(pI2CHandle->RxSize > 1)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6a1b      	ldr	r3, [r3, #32]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d91a      	bls.n	8000da4 <I2C_MasterHandleRXNEInterrupt+0x66>
	{
		if(pI2CHandle->RxLen == 2)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d105      	bne.n	8000d82 <I2C_MasterHandleRXNEInterrupt+0x44>
		{
			//clear the ack bit
			I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f000 f9b3 	bl	80010e8 <I2C_ManageAcking>
		}

			//read DR
			*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	691a      	ldr	r2, [r3, #16]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	691b      	ldr	r3, [r3, #16]
 8000d8c:	b2d2      	uxtb	r2, r2
 8000d8e:	701a      	strb	r2, [r3, #0]
			pI2CHandle->pRxBuffer++;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	691b      	ldr	r3, [r3, #16]
 8000d94:	1c5a      	adds	r2, r3, #1
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	611a      	str	r2, [r3, #16]
			pI2CHandle->RxLen--;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	1e5a      	subs	r2, r3, #1
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	619a      	str	r2, [r3, #24]
	}

	if(pI2CHandle->RxLen == 0 )
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d110      	bne.n	8000dce <I2C_MasterHandleRXNEInterrupt+0x90>
	{
		//close the I2C data reception and notify the application

		//1. generate the stop condition
		if(pI2CHandle->Sr == I2C_DISABLE_SR)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d104      	bne.n	8000dc0 <I2C_MasterHandleRXNEInterrupt+0x82>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff ff2e 	bl	8000c1c <I2C_GenerateStopCondition>

		//2 . Close the I2C rx
		I2C_CloseReceiveData(pI2CHandle);
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f000 fb9c 	bl	80014fe <I2C_CloseReceiveData>

		//3. Notify the application
		I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_RX_CMPLT);
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff fb77 	bl	80004bc <I2C_ApplicationEventCallback>
	}
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <RCC_GetPLLOutputClk>:




uint32_t RCC_GetPLLOutputClk(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
	return 0;
 8000dda:	2300      	movs	r3, #0

}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <I2C_PeripheralControl>:
 *
 * @Note              -

 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b083      	sub	sp, #12
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
 8000dee:	460b      	mov	r3, r1
 8000df0:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000df2:	78fb      	ldrb	r3, [r7, #3]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d106      	bne.n	8000e06 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f043 0201 	orr.w	r2, r3, #1
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << 0);
	}

}
 8000e04:	e005      	b.n	8000e12 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f023 0201 	bic.w	r2, r3, #1
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	601a      	str	r2, [r3, #0]
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
	...

08000e20 <I2C_PeriClockControl>:
 *
 * @Note              -

 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	460b      	mov	r3, r1
 8000e2a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000e2c:	78fb      	ldrb	r3, [r7, #3]
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d120      	bne.n	8000e74 <I2C_PeriClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a22      	ldr	r2, [pc, #136]	; (8000ec0 <I2C_PeriClockControl+0xa0>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d106      	bne.n	8000e48 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8000e3a:	4b22      	ldr	r3, [pc, #136]	; (8000ec4 <I2C_PeriClockControl+0xa4>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	4a21      	ldr	r2, [pc, #132]	; (8000ec4 <I2C_PeriClockControl+0xa4>)
 8000e40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e44:	6413      	str	r3, [r2, #64]	; 0x40
        {
            I2C3_PCLK_DI();
        }
	}

}
 8000e46:	e035      	b.n	8000eb4 <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C2)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a1f      	ldr	r2, [pc, #124]	; (8000ec8 <I2C_PeriClockControl+0xa8>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d106      	bne.n	8000e5e <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000e50:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <I2C_PeriClockControl+0xa4>)
 8000e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e54:	4a1b      	ldr	r2, [pc, #108]	; (8000ec4 <I2C_PeriClockControl+0xa4>)
 8000e56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e5a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e5c:	e02a      	b.n	8000eb4 <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C3)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a1a      	ldr	r2, [pc, #104]	; (8000ecc <I2C_PeriClockControl+0xac>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d126      	bne.n	8000eb4 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8000e66:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <I2C_PeriClockControl+0xa4>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	4a16      	ldr	r2, [pc, #88]	; (8000ec4 <I2C_PeriClockControl+0xa4>)
 8000e6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e70:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e72:	e01f      	b.n	8000eb4 <I2C_PeriClockControl+0x94>
        if(pI2Cx == I2C1)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <I2C_PeriClockControl+0xa0>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d106      	bne.n	8000e8a <I2C_PeriClockControl+0x6a>
            I2C1_PCLK_DI();
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <I2C_PeriClockControl+0xa4>)
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e80:	4a10      	ldr	r2, [pc, #64]	; (8000ec4 <I2C_PeriClockControl+0xa4>)
 8000e82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000e86:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e88:	e014      	b.n	8000eb4 <I2C_PeriClockControl+0x94>
        }else if (pI2Cx == I2C2)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a0e      	ldr	r2, [pc, #56]	; (8000ec8 <I2C_PeriClockControl+0xa8>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d106      	bne.n	8000ea0 <I2C_PeriClockControl+0x80>
            I2C2_PCLK_DI();
 8000e92:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <I2C_PeriClockControl+0xa4>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	4a0b      	ldr	r2, [pc, #44]	; (8000ec4 <I2C_PeriClockControl+0xa4>)
 8000e98:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000e9c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e9e:	e009      	b.n	8000eb4 <I2C_PeriClockControl+0x94>
        }else if (pI2Cx == I2C3)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <I2C_PeriClockControl+0xac>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d105      	bne.n	8000eb4 <I2C_PeriClockControl+0x94>
            I2C3_PCLK_DI();
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <I2C_PeriClockControl+0xa4>)
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eac:	4a05      	ldr	r2, [pc, #20]	; (8000ec4 <I2C_PeriClockControl+0xa4>)
 8000eae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000eb2:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	40005400 	.word	0x40005400
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40005800 	.word	0x40005800
 8000ecc:	40005c00 	.word	0x40005c00

08000ed0 <RCC_GetPCLK1Value>:

uint32_t RCC_GetPCLK1Value(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
    uint32_t pclk1, SystemClk;
    uint8_t clksrc, temp, ahbp, apb1p;

    clksrc = ((RCC->CFGR >> 2) & 0x3);
 8000ed6:	4b26      	ldr	r3, [pc, #152]	; (8000f70 <RCC_GetPCLK1Value+0xa0>)
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	089b      	lsrs	r3, r3, #2
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	f003 0303 	and.w	r3, r3, #3
 8000ee2:	727b      	strb	r3, [r7, #9]

    //Get the system clock source
    if(clksrc == 0)
 8000ee4:	7a7b      	ldrb	r3, [r7, #9]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d102      	bne.n	8000ef0 <RCC_GetPCLK1Value+0x20>
    {
        //HSI oscillator used as system clock
        SystemClk = 16000000; //16MHz
 8000eea:	4b22      	ldr	r3, [pc, #136]	; (8000f74 <RCC_GetPCLK1Value+0xa4>)
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	e00b      	b.n	8000f08 <RCC_GetPCLK1Value+0x38>
    }else if(clksrc == 1)
 8000ef0:	7a7b      	ldrb	r3, [r7, #9]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d102      	bne.n	8000efc <RCC_GetPCLK1Value+0x2c>
    {
        //HSE oscillator used as system clock
        SystemClk = 8000000; //8MHz
 8000ef6:	4b20      	ldr	r3, [pc, #128]	; (8000f78 <RCC_GetPCLK1Value+0xa8>)
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	e005      	b.n	8000f08 <RCC_GetPCLK1Value+0x38>
    }else if(clksrc == 2)
 8000efc:	7a7b      	ldrb	r3, [r7, #9]
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d102      	bne.n	8000f08 <RCC_GetPCLK1Value+0x38>
    {
        //PLL used as system clock
        SystemClk = RCC_GetPLLOutputClk();
 8000f02:	f7ff ff68 	bl	8000dd6 <RCC_GetPLLOutputClk>
 8000f06:	60f8      	str	r0, [r7, #12]
    }

    //for ahb
    temp = ((RCC->CFGR >> 4) & 0xF);
 8000f08:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <RCC_GetPCLK1Value+0xa0>)
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	091b      	lsrs	r3, r3, #4
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	f003 030f 	and.w	r3, r3, #15
 8000f14:	723b      	strb	r3, [r7, #8]

    if(temp < 8)
 8000f16:	7a3b      	ldrb	r3, [r7, #8]
 8000f18:	2b07      	cmp	r3, #7
 8000f1a:	d802      	bhi.n	8000f22 <RCC_GetPCLK1Value+0x52>
    {
        ahbp = 1;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	72fb      	strb	r3, [r7, #11]
 8000f20:	e005      	b.n	8000f2e <RCC_GetPCLK1Value+0x5e>
    }else
    {
        ahbp = AHB_PreScaler[temp - 8];
 8000f22:	7a3b      	ldrb	r3, [r7, #8]
 8000f24:	3b08      	subs	r3, #8
 8000f26:	4a15      	ldr	r2, [pc, #84]	; (8000f7c <RCC_GetPCLK1Value+0xac>)
 8000f28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f2c:	72fb      	strb	r3, [r7, #11]
    }

    //for apb1
    temp = ((RCC->CFGR >> 10) & 0x7);
 8000f2e:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <RCC_GetPCLK1Value+0xa0>)
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	0a9b      	lsrs	r3, r3, #10
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	723b      	strb	r3, [r7, #8]
    if(temp < 4)
 8000f3c:	7a3b      	ldrb	r3, [r7, #8]
 8000f3e:	2b03      	cmp	r3, #3
 8000f40:	d802      	bhi.n	8000f48 <RCC_GetPCLK1Value+0x78>
    {
        apb1p = 1;
 8000f42:	2301      	movs	r3, #1
 8000f44:	72bb      	strb	r3, [r7, #10]
 8000f46:	e005      	b.n	8000f54 <RCC_GetPCLK1Value+0x84>
    }else
    {
        apb1p = APB1_PreScaler[temp - 4];
 8000f48:	7a3b      	ldrb	r3, [r7, #8]
 8000f4a:	3b04      	subs	r3, #4
 8000f4c:	4a0c      	ldr	r2, [pc, #48]	; (8000f80 <RCC_GetPCLK1Value+0xb0>)
 8000f4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f52:	72bb      	strb	r3, [r7, #10]
    }

    //calculate pclk1
    pclk1 = (SystemClk / ahbp) /apb1p;
 8000f54:	7afb      	ldrb	r3, [r7, #11]
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f5c:	7abb      	ldrb	r3, [r7, #10]
 8000f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f62:	607b      	str	r3, [r7, #4]


    return pclk1;
 8000f64:	687b      	ldr	r3, [r7, #4]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800
 8000f74:	00f42400 	.word	0x00f42400
 8000f78:	007a1200 	.word	0x007a1200
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	20000010 	.word	0x20000010

08000f84 <I2C_Init>:
 *
 * @Note              -

 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2101      	movs	r1, #1
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff ff42 	bl	8000e20 <I2C_PeriClockControl>

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	7a5b      	ldrb	r3, [r3, #9]
 8000fa0:	029b      	lsls	r3, r3, #10
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U ;
 8000fb6:	f7ff ff8b 	bl	8000ed0 <RCC_GetPCLK1Value>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	4a47      	ldr	r2, [pc, #284]	; (80010dc <I2C_Init+0x158>)
 8000fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc2:	0c9b      	lsrs	r3, r3, #18
 8000fc4:	68fa      	ldr	r2, [r7, #12]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000fd4:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	7a1b      	ldrb	r3, [r3, #8]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fee:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	68fa      	ldr	r2, [r7, #12]
 8000ff6:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	4a36      	ldr	r2, [pc, #216]	; (80010e0 <I2C_Init+0x15c>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d80f      	bhi.n	800102a <I2C_Init+0xa6>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 800100a:	f7ff ff61 	bl	8000ed0 <RCC_GetPCLK1Value>
 800100e:	4602      	mov	r2, r0
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	fbb2 f3f3 	udiv	r3, r2, r3
 800101a:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 800101c:	897b      	ldrh	r3, [r7, #10]
 800101e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	4313      	orrs	r3, r2
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	e02d      	b.n	8001086 <I2C_Init+0x102>
	}else
	{
		//mode is fast mode
		tempreg |= ( 1 << 15);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001030:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	7a9b      	ldrb	r3, [r3, #10]
 8001036:	039b      	lsls	r3, r3, #14
 8001038:	461a      	mov	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4313      	orrs	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	7a9b      	ldrb	r3, [r3, #10]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d10b      	bne.n	8001060 <I2C_Init+0xdc>
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8001048:	f7ff ff42 	bl	8000ed0 <RCC_GetPCLK1Value>
 800104c:	4601      	mov	r1, r0
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	4613      	mov	r3, r2
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	4413      	add	r3, r2
 8001058:	fbb1 f3f3 	udiv	r3, r1, r3
 800105c:	817b      	strh	r3, [r7, #10]
 800105e:	e00c      	b.n	800107a <I2C_Init+0xf6>
		}else
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8001060:	f7ff ff36 	bl	8000ed0 <RCC_GetPCLK1Value>
 8001064:	4601      	mov	r1, r0
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685a      	ldr	r2, [r3, #4]
 800106a:	4613      	mov	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	4413      	add	r3, r2
 8001070:	009a      	lsls	r2, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	fbb1 f3f3 	udiv	r3, r1, r3
 8001078:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 800107a:	897b      	ldrh	r3, [r7, #10]
 800107c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	4313      	orrs	r3, r2
 8001084:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <I2C_Init+0x15c>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d809      	bhi.n	80010ac <I2C_Init+0x128>
	{
		//mode is standard mode

		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 8001098:	f7ff ff1a 	bl	8000ed0 <RCC_GetPCLK1Value>
 800109c:	4603      	mov	r3, r0
 800109e:	4a0f      	ldr	r2, [pc, #60]	; (80010dc <I2C_Init+0x158>)
 80010a0:	fba2 2303 	umull	r2, r3, r2, r3
 80010a4:	0c9b      	lsrs	r3, r3, #18
 80010a6:	3301      	adds	r3, #1
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	e00d      	b.n	80010c8 <I2C_Init+0x144>

	}else
	{
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 80010ac:	f7ff ff10 	bl	8000ed0 <RCC_GetPCLK1Value>
 80010b0:	4603      	mov	r3, r0
 80010b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010b6:	fb02 f303 	mul.w	r3, r2, r3
 80010ba:	0a5b      	lsrs	r3, r3, #9
 80010bc:	4a09      	ldr	r2, [pc, #36]	; (80010e4 <I2C_Init+0x160>)
 80010be:	fba2 2303 	umull	r2, r3, r2, r3
 80010c2:	09db      	lsrs	r3, r3, #7
 80010c4:	3301      	adds	r3, #1
 80010c6:	60fb      	str	r3, [r7, #12]

	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80010d2:	621a      	str	r2, [r3, #32]

}
 80010d4:	bf00      	nop
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	431bde83 	.word	0x431bde83
 80010e0:	000186a0 	.word	0x000186a0
 80010e4:	00044b83 	.word	0x00044b83

080010e8 <I2C_ManageAcking>:

}


void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 80010f4:	78fb      	ldrb	r3, [r7, #3]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d106      	bne.n	8001108 <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 8001106:	e005      	b.n	8001114 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	601a      	str	r2, [r3, #0]
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <I2C_IRQInterruptConfig>:
 *
 * @Note              -

 */
void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	460a      	mov	r2, r1
 800112a:	71fb      	strb	r3, [r7, #7]
 800112c:	4613      	mov	r3, r2
 800112e:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE)
 8001130:	79bb      	ldrb	r3, [r7, #6]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d133      	bne.n	800119e <I2C_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	2b1f      	cmp	r3, #31
 800113a:	d80a      	bhi.n	8001152 <I2C_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 800113c:	4b35      	ldr	r3, [pc, #212]	; (8001214 <I2C_IRQInterruptConfig+0xf4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	79fa      	ldrb	r2, [r7, #7]
 8001142:	2101      	movs	r1, #1
 8001144:	fa01 f202 	lsl.w	r2, r1, r2
 8001148:	4611      	mov	r1, r2
 800114a:	4a32      	ldr	r2, [pc, #200]	; (8001214 <I2C_IRQInterruptConfig+0xf4>)
 800114c:	430b      	orrs	r3, r1
 800114e:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
 8001150:	e059      	b.n	8001206 <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	2b1f      	cmp	r3, #31
 8001156:	d90f      	bls.n	8001178 <I2C_IRQInterruptConfig+0x58>
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	2b3f      	cmp	r3, #63	; 0x3f
 800115c:	d80c      	bhi.n	8001178 <I2C_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 800115e:	4b2e      	ldr	r3, [pc, #184]	; (8001218 <I2C_IRQInterruptConfig+0xf8>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	79fa      	ldrb	r2, [r7, #7]
 8001164:	f002 021f 	and.w	r2, r2, #31
 8001168:	2101      	movs	r1, #1
 800116a:	fa01 f202 	lsl.w	r2, r1, r2
 800116e:	4611      	mov	r1, r2
 8001170:	4a29      	ldr	r2, [pc, #164]	; (8001218 <I2C_IRQInterruptConfig+0xf8>)
 8001172:	430b      	orrs	r3, r1
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	e046      	b.n	8001206 <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	2b3f      	cmp	r3, #63	; 0x3f
 800117c:	d943      	bls.n	8001206 <I2C_IRQInterruptConfig+0xe6>
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	2b5f      	cmp	r3, #95	; 0x5f
 8001182:	d840      	bhi.n	8001206 <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ISER3 |= ( 1 << (IRQNumber % 64) );
 8001184:	4b25      	ldr	r3, [pc, #148]	; (800121c <I2C_IRQInterruptConfig+0xfc>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	79fa      	ldrb	r2, [r7, #7]
 800118a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800118e:	2101      	movs	r1, #1
 8001190:	fa01 f202 	lsl.w	r2, r1, r2
 8001194:	4611      	mov	r1, r2
 8001196:	4a21      	ldr	r2, [pc, #132]	; (800121c <I2C_IRQInterruptConfig+0xfc>)
 8001198:	430b      	orrs	r3, r1
 800119a:	6013      	str	r3, [r2, #0]
}
 800119c:	e033      	b.n	8001206 <I2C_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	2b1f      	cmp	r3, #31
 80011a2:	d80a      	bhi.n	80011ba <I2C_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 80011a4:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <I2C_IRQInterruptConfig+0x100>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	79fa      	ldrb	r2, [r7, #7]
 80011aa:	2101      	movs	r1, #1
 80011ac:	fa01 f202 	lsl.w	r2, r1, r2
 80011b0:	4611      	mov	r1, r2
 80011b2:	4a1b      	ldr	r2, [pc, #108]	; (8001220 <I2C_IRQInterruptConfig+0x100>)
 80011b4:	430b      	orrs	r3, r1
 80011b6:	6013      	str	r3, [r2, #0]
}
 80011b8:	e025      	b.n	8001206 <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	2b1f      	cmp	r3, #31
 80011be:	d90f      	bls.n	80011e0 <I2C_IRQInterruptConfig+0xc0>
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	2b3f      	cmp	r3, #63	; 0x3f
 80011c4:	d80c      	bhi.n	80011e0 <I2C_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 80011c6:	4b17      	ldr	r3, [pc, #92]	; (8001224 <I2C_IRQInterruptConfig+0x104>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	79fa      	ldrb	r2, [r7, #7]
 80011cc:	f002 021f 	and.w	r2, r2, #31
 80011d0:	2101      	movs	r1, #1
 80011d2:	fa01 f202 	lsl.w	r2, r1, r2
 80011d6:	4611      	mov	r1, r2
 80011d8:	4a12      	ldr	r2, [pc, #72]	; (8001224 <I2C_IRQInterruptConfig+0x104>)
 80011da:	430b      	orrs	r3, r1
 80011dc:	6013      	str	r3, [r2, #0]
 80011de:	e012      	b.n	8001206 <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 6 && IRQNumber < 96 )
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	2b05      	cmp	r3, #5
 80011e4:	d90f      	bls.n	8001206 <I2C_IRQInterruptConfig+0xe6>
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	2b5f      	cmp	r3, #95	; 0x5f
 80011ea:	d80c      	bhi.n	8001206 <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
 80011ec:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <I2C_IRQInterruptConfig+0x108>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	79fa      	ldrb	r2, [r7, #7]
 80011f2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80011f6:	2101      	movs	r1, #1
 80011f8:	fa01 f202 	lsl.w	r2, r1, r2
 80011fc:	4611      	mov	r1, r2
 80011fe:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <I2C_IRQInterruptConfig+0x108>)
 8001200:	430b      	orrs	r3, r1
 8001202:	6013      	str	r3, [r2, #0]
}
 8001204:	e7ff      	b.n	8001206 <I2C_IRQInterruptConfig+0xe6>
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000e100 	.word	0xe000e100
 8001218:	e000e104 	.word	0xe000e104
 800121c:	e000e10c 	.word	0xe000e10c
 8001220:	e000e180 	.word	0xe000e180
 8001224:	e000e184 	.word	0xe000e184
 8001228:	e000e18c 	.word	0xe000e18c

0800122c <I2C_MasterSendDataIT>:
 *
 * @Note              -

 */
uint8_t I2C_MasterSendDataIT(I2C_Handle_t *pI2CHandle,uint8_t *pTxBuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
 8001238:	70fb      	strb	r3, [r7, #3]
	uint8_t busystate = pI2CHandle->TxRxState;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	7f1b      	ldrb	r3, [r3, #28]
 800123e:	75fb      	strb	r3, [r7, #23]

	if( (busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX))
 8001240:	7dfb      	ldrb	r3, [r7, #23]
 8001242:	2b02      	cmp	r3, #2
 8001244:	d030      	beq.n	80012a8 <I2C_MasterSendDataIT+0x7c>
 8001246:	7dfb      	ldrb	r3, [r7, #23]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d02d      	beq.n	80012a8 <I2C_MasterSendDataIT+0x7c>
	{
		pI2CHandle->pTxBuffer = pTxBuffer;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	60da      	str	r2, [r3, #12]
		pI2CHandle->TxLen = Len;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	615a      	str	r2, [r3, #20]
		pI2CHandle->TxRxState = I2C_BUSY_IN_TX;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2202      	movs	r2, #2
 800125c:	771a      	strb	r2, [r3, #28]
		pI2CHandle->DevAddr = SlaveAddr;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	78fa      	ldrb	r2, [r7, #3]
 8001262:	775a      	strb	r2, [r3, #29]
		pI2CHandle->Sr = Sr;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f897 2020 	ldrb.w	r2, [r7, #32]
 800126a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		//Implement code to Generate START Condition
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fcc2 	bl	8000bfc <I2C_GenerateStartCondition>

		//Implement the code to enable ITBUFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	685a      	ldr	r2, [r3, #4]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001286:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITEVFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITEVTEN);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001296:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITERREN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITERREN);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	685a      	ldr	r2, [r3, #4]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012a6:	605a      	str	r2, [r3, #4]

	}

	return busystate;
 80012a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <I2C_MasterReceiveDataIT>:
 *
 * @Note              -

 */
uint8_t I2C_MasterReceiveDataIT(I2C_Handle_t *pI2CHandle,uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b086      	sub	sp, #24
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	60f8      	str	r0, [r7, #12]
 80012ba:	60b9      	str	r1, [r7, #8]
 80012bc:	4611      	mov	r1, r2
 80012be:	461a      	mov	r2, r3
 80012c0:	460b      	mov	r3, r1
 80012c2:	71fb      	strb	r3, [r7, #7]
 80012c4:	4613      	mov	r3, r2
 80012c6:	71bb      	strb	r3, [r7, #6]
	uint8_t busystate = pI2CHandle->TxRxState;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	7f1b      	ldrb	r3, [r3, #28]
 80012cc:	75fb      	strb	r3, [r7, #23]

	if( (busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX))
 80012ce:	7dfb      	ldrb	r3, [r7, #23]
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d033      	beq.n	800133c <I2C_MasterReceiveDataIT+0x8a>
 80012d4:	7dfb      	ldrb	r3, [r7, #23]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d030      	beq.n	800133c <I2C_MasterReceiveDataIT+0x8a>
	{
		pI2CHandle->pRxBuffer = pRxBuffer;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	68ba      	ldr	r2, [r7, #8]
 80012de:	611a      	str	r2, [r3, #16]
		pI2CHandle->RxLen = Len;
 80012e0:	79fa      	ldrb	r2, [r7, #7]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	619a      	str	r2, [r3, #24]
		pI2CHandle->TxRxState = I2C_BUSY_IN_RX;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2201      	movs	r2, #1
 80012ea:	771a      	strb	r2, [r3, #28]
		pI2CHandle->RxSize = Len;
 80012ec:	79fa      	ldrb	r2, [r7, #7]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	621a      	str	r2, [r3, #32]
		pI2CHandle->DevAddr = SlaveAddr;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	79ba      	ldrb	r2, [r7, #6]
 80012f6:	775a      	strb	r2, [r3, #29]
		pI2CHandle->Sr = Sr;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f897 2020 	ldrb.w	r2, [r7, #32]
 80012fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		//Implement code to Generate START Condition
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fc78 	bl	8000bfc <I2C_GenerateStartCondition>

		//Implement the code to enable ITBUFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	685a      	ldr	r2, [r3, #4]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800131a:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITEVFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITEVTEN);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	685a      	ldr	r2, [r3, #4]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800132a:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITERREN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITERREN);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800133a:	605a      	str	r2, [r3, #4]
	}

	return busystate;
 800133c:	7dfb      	ldrb	r3, [r7, #23]
}
 800133e:	4618      	mov	r0, r3
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <I2C_EV_IRQHandling>:

void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b086      	sub	sp, #24
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
	//Interrupt handling for both master and slave mode of a device

	uint32_t temp1, temp2, temp3;

	temp1   = pI2CHandle->pI2Cx->CR2 & ( 1 << I2C_CR2_ITEVTEN) ;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001358:	617b      	str	r3, [r7, #20]
	temp2   = pI2CHandle->pI2Cx->CR2 & ( 1 << I2C_CR2_ITBUFEN) ;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001364:	613b      	str	r3, [r7, #16]

	temp3  = pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_SB);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	60fb      	str	r3, [r7, #12]
	//1. Handle For interrupt generated by SB event
	//	Note : SB flag is only applicable in Master mode
	if(temp1 && temp3)
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d01b      	beq.n	80013b0 <I2C_EV_IRQHandling+0x6a>
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d018      	beq.n	80013b0 <I2C_EV_IRQHandling+0x6a>
	{
		//The interrupt is generated because of SB event
		//This block will not be executed in slave mode because for slave SB is always zero
		//In this block lets executed the address phase
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	7f1b      	ldrb	r3, [r3, #28]
 8001382:	2b02      	cmp	r3, #2
 8001384:	d108      	bne.n	8001398 <I2C_EV_IRQHandling+0x52>
		{
			I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,pI2CHandle->DevAddr);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	7f5b      	ldrb	r3, [r3, #29]
 800138e:	4619      	mov	r1, r3
 8001390:	4610      	mov	r0, r2
 8001392:	f7ff fc53 	bl	8000c3c <I2C_ExecuteAddressPhaseWrite>
 8001396:	e00b      	b.n	80013b0 <I2C_EV_IRQHandling+0x6a>
		}else if (pI2CHandle->TxRxState == I2C_BUSY_IN_RX )
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	7f1b      	ldrb	r3, [r3, #28]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d107      	bne.n	80013b0 <I2C_EV_IRQHandling+0x6a>
		{
			I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx,pI2CHandle->DevAddr);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	7f5b      	ldrb	r3, [r3, #29]
 80013a8:	4619      	mov	r1, r3
 80013aa:	4610      	mov	r0, r2
 80013ac:	f7ff fc5c 	bl	8000c68 <I2C_ExecuteAddressPhaseRead>
		}
	}

	temp3  = pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_ADDR);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	60fb      	str	r3, [r7, #12]
	//2. Handle For interrupt generated by ADDR event
	//Note : When master mode : Address is sent
	//		 When Slave mode   : Address matched with own address
	if(temp1 && temp3)
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d005      	beq.n	80013ce <I2C_EV_IRQHandling+0x88>
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d002      	beq.n	80013ce <I2C_EV_IRQHandling+0x88>
	{
		// interrupt is generated because of ADDR event
		I2C_ClearADDRFlag(pI2CHandle);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff fc63 	bl	8000c94 <I2C_ClearADDRFlag>
	}

	temp3  = pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_BTF);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	695b      	ldr	r3, [r3, #20]
 80013d4:	f003 0304 	and.w	r3, r3, #4
 80013d8:	60fb      	str	r3, [r7, #12]
	//3. Handle For interrupt generated by BTF(Byte Transfer Finished) event
	if(temp1 && temp3)
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d022      	beq.n	8001426 <I2C_EV_IRQHandling+0xe0>
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d01f      	beq.n	8001426 <I2C_EV_IRQHandling+0xe0>
	{
		//BTF flag is set
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	7f1b      	ldrb	r3, [r3, #28]
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d11b      	bne.n	8001426 <I2C_EV_IRQHandling+0xe0>
		{
			//make sure that TXE is also set .
			if(pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_TXE) )
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	695b      	ldr	r3, [r3, #20]
 80013f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d014      	beq.n	8001426 <I2C_EV_IRQHandling+0xe0>
			{
				//BTF, TXE = 1
				if(pI2CHandle->TxLen == 0 )
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	695b      	ldr	r3, [r3, #20]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d110      	bne.n	8001426 <I2C_EV_IRQHandling+0xe0>
				{
					//1. generate the STOP condition
					if(pI2CHandle->Sr == I2C_DISABLE_SR)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800140a:	2b00      	cmp	r3, #0
 800140c:	d104      	bne.n	8001418 <I2C_EV_IRQHandling+0xd2>
						I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fc02 	bl	8000c1c <I2C_GenerateStopCondition>

					//2. reset all the member elements of the handle structure.
					I2C_CloseSendData(pI2CHandle);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 f89e 	bl	800155a <I2C_CloseSendData>

					//3. notify the application about transmission complete
					I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_TX_CMPLT);
 800141e:	2100      	movs	r1, #0
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff f84b 	bl	80004bc <I2C_ApplicationEventCallback>
		{
			;
		}
	}

	temp3  = pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_STOPF);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	f003 0310 	and.w	r3, r3, #16
 8001430:	60fb      	str	r3, [r7, #12]
	//4. Handle For interrupt generated by STOPF event
	// Note : Stop detection flag is applicable only slave mode . For master this flag will never be set
	//The below code block will not be executed by the master since STOPF will not set in master mode
	if(temp1 && temp3)
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d00c      	beq.n	8001452 <I2C_EV_IRQHandling+0x10c>
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d009      	beq.n	8001452 <I2C_EV_IRQHandling+0x10c>
	{
		//STOF flag is set
		//Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )

		pI2CHandle->pI2Cx->CR1 |= 0x0000;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6812      	ldr	r2, [r2, #0]
 8001448:	601a      	str	r2, [r3, #0]

		//Notify the application that STOP is detected
		I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_STOP);
 800144a:	2102      	movs	r1, #2
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff f835 	bl	80004bc <I2C_ApplicationEventCallback>
	}


	temp3  = pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_TXE);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800145c:	60fb      	str	r3, [r7, #12]
	//5. Handle For interrupt generated by TXE event
	if(temp1 && temp2 && temp3)
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d01f      	beq.n	80014a4 <I2C_EV_IRQHandling+0x15e>
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d01c      	beq.n	80014a4 <I2C_EV_IRQHandling+0x15e>
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d019      	beq.n	80014a4 <I2C_EV_IRQHandling+0x15e>
	{
		//Check for device mode
		if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b00      	cmp	r3, #0
 800147c:	d007      	beq.n	800148e <I2C_EV_IRQHandling+0x148>
		{
			//TXE flag is set
			//We have to do the data transmission
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	7f1b      	ldrb	r3, [r3, #28]
 8001482:	2b02      	cmp	r3, #2
 8001484:	d10e      	bne.n	80014a4 <I2C_EV_IRQHandling+0x15e>
			{
				I2C_MasterHandleTXEInterrupt(pI2CHandle);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff fc3b 	bl	8000d02 <I2C_MasterHandleTXEInterrupt>
 800148c:	e00a      	b.n	80014a4 <I2C_EV_IRQHandling+0x15e>
			}
		}else
		{
			//slave
			//make sure that the slave is really in transmitter mode
		    if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_TRA))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	2b00      	cmp	r3, #0
 800149a:	d003      	beq.n	80014a4 <I2C_EV_IRQHandling+0x15e>
		    {
		    	I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_DATA_REQ);
 800149c:	2108      	movs	r1, #8
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff f80c 	bl	80004bc <I2C_ApplicationEventCallback>
		    }
		}
	}

	temp3  = pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_RXNE);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ae:	60fb      	str	r3, [r7, #12]
	//6. Handle For interrupt generated by RXNE event
	if(temp1 && temp2 && temp3)
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d01f      	beq.n	80014f6 <I2C_EV_IRQHandling+0x1b0>
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d01c      	beq.n	80014f6 <I2C_EV_IRQHandling+0x1b0>
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d019      	beq.n	80014f6 <I2C_EV_IRQHandling+0x1b0>
	{
		//check device mode .
		if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d007      	beq.n	80014e0 <I2C_EV_IRQHandling+0x19a>
		{
			//The device is master

			//RXNE flag is set
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	7f1b      	ldrb	r3, [r3, #28]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d10e      	bne.n	80014f6 <I2C_EV_IRQHandling+0x1b0>
			{
				I2C_MasterHandleRXNEInterrupt(pI2CHandle);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff fc30 	bl	8000d3e <I2C_MasterHandleRXNEInterrupt>
			{
				I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_DATA_RCV);
			}
		}
	}
}
 80014de:	e00a      	b.n	80014f6 <I2C_EV_IRQHandling+0x1b0>
			if(!(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_TRA)))
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	f003 0304 	and.w	r3, r3, #4
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d103      	bne.n	80014f6 <I2C_EV_IRQHandling+0x1b0>
				I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_DATA_RCV);
 80014ee:	2109      	movs	r1, #9
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7fe ffe3 	bl	80004bc <I2C_ApplicationEventCallback>
}
 80014f6:	bf00      	nop
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <I2C_CloseReceiveData>:


void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
	//Implement the code to disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001514:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITEVFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITEVTEN);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001524:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pRxBuffer = NULL;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
	pI2CHandle->RxLen = 0;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
	pI2CHandle->RxSize = 0;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	621a      	str	r2, [r3, #32]

	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	7a5b      	ldrb	r3, [r3, #9]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d105      	bne.n	8001552 <I2C_CloseReceiveData+0x54>
	{
		I2C_ManageAcking(pI2CHandle->pI2Cx,ENABLE);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2101      	movs	r1, #1
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fdcb 	bl	80010e8 <I2C_ManageAcking>
	}

}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <I2C_CloseSendData>:

void I2C_CloseSendData(I2C_Handle_t *pI2CHandle)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
	//Implement the code to disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001570:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITEVFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITEVTEN);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001580:	605a      	str	r2, [r3, #4]


	pI2CHandle->TxRxState = I2C_READY;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pTxBuffer = NULL;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
	pI2CHandle->TxLen = 0;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	615a      	str	r2, [r3, #20]
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <I2C_ER_IRQHandling>:
						#define I2C_ERROR_TIMEOUT 7

 */

void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]

	uint32_t temp1,temp2;

    //Know the status of  ITERREN control bit in the CR2
	temp2 = (pI2CHandle->pI2Cx->CR2) & ( 1 << I2C_CR2_ITERREN);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b2:	60fb      	str	r3, [r7, #12]


/***********************Check for Bus error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1<< I2C_SR1_BERR);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015be:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2 )
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d00e      	beq.n	80015e4 <I2C_ER_IRQHandling+0x44>
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d00b      	beq.n	80015e4 <I2C_ER_IRQHandling+0x44>
	{
		//This is Bus error

		//Implement the code to clear the buss error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_BERR);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	695a      	ldr	r2, [r3, #20]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015da:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
	   I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_BERR);
 80015dc:	2103      	movs	r1, #3
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7fe ff6c 	bl	80004bc <I2C_ApplicationEventCallback>
	}

/***********************Check for arbitration lost error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_ARLO );
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015ee:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d00e      	beq.n	8001614 <I2C_ER_IRQHandling+0x74>
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d00b      	beq.n	8001614 <I2C_ER_IRQHandling+0x74>
	{
		//This is arbitration lost error

		//Implement the code to clear the arbitration lost error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_ARLO);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	695a      	ldr	r2, [r3, #20]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800160a:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_ARLO);
 800160c:	2104      	movs	r1, #4
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7fe ff54 	bl	80004bc <I2C_ApplicationEventCallback>

	}

/***********************Check for ACK failure  error************************************/

	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_AF);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800161e:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d00e      	beq.n	8001644 <I2C_ER_IRQHandling+0xa4>
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d00b      	beq.n	8001644 <I2C_ER_IRQHandling+0xa4>
	{
		//This is ACK failure error

	    //Implement the code to clear the ACK failure error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_AF);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	695a      	ldr	r2, [r3, #20]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800163a:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_AF);
 800163c:	2105      	movs	r1, #5
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7fe ff3c 	bl	80004bc <I2C_ApplicationEventCallback>
	}

/***********************Check for Overrun/underrun error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_OVR);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800164e:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00e      	beq.n	8001674 <I2C_ER_IRQHandling+0xd4>
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d00b      	beq.n	8001674 <I2C_ER_IRQHandling+0xd4>
	{
		//This is Overrun/underrun

	    //Implement the code to clear the Overrun/underrun error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_OVR);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	695a      	ldr	r2, [r3, #20]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800166a:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_OVR);
 800166c:	2106      	movs	r1, #6
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7fe ff24 	bl	80004bc <I2C_ApplicationEventCallback>
	}

/***********************Check for Time out error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_TIMEOUT);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800167e:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d00e      	beq.n	80016a4 <I2C_ER_IRQHandling+0x104>
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00b      	beq.n	80016a4 <I2C_ER_IRQHandling+0x104>
	{
		//This is Time out error

	    //Implement the code to clear the Time out error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_TIMEOUT);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	695a      	ldr	r2, [r3, #20]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800169a:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_TIMEOUT);
 800169c:	2107      	movs	r1, #7
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7fe ff0c 	bl	80004bc <I2C_ApplicationEventCallback>
	}

}
 80016a4:	bf00      	nop
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <__errno>:
 80016ac:	4b01      	ldr	r3, [pc, #4]	; (80016b4 <__errno+0x8>)
 80016ae:	6818      	ldr	r0, [r3, #0]
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	20000018 	.word	0x20000018

080016b8 <__libc_init_array>:
 80016b8:	b570      	push	{r4, r5, r6, lr}
 80016ba:	4d0d      	ldr	r5, [pc, #52]	; (80016f0 <__libc_init_array+0x38>)
 80016bc:	4c0d      	ldr	r4, [pc, #52]	; (80016f4 <__libc_init_array+0x3c>)
 80016be:	1b64      	subs	r4, r4, r5
 80016c0:	10a4      	asrs	r4, r4, #2
 80016c2:	2600      	movs	r6, #0
 80016c4:	42a6      	cmp	r6, r4
 80016c6:	d109      	bne.n	80016dc <__libc_init_array+0x24>
 80016c8:	4d0b      	ldr	r5, [pc, #44]	; (80016f8 <__libc_init_array+0x40>)
 80016ca:	4c0c      	ldr	r4, [pc, #48]	; (80016fc <__libc_init_array+0x44>)
 80016cc:	f001 f824 	bl	8002718 <_init>
 80016d0:	1b64      	subs	r4, r4, r5
 80016d2:	10a4      	asrs	r4, r4, #2
 80016d4:	2600      	movs	r6, #0
 80016d6:	42a6      	cmp	r6, r4
 80016d8:	d105      	bne.n	80016e6 <__libc_init_array+0x2e>
 80016da:	bd70      	pop	{r4, r5, r6, pc}
 80016dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80016e0:	4798      	blx	r3
 80016e2:	3601      	adds	r6, #1
 80016e4:	e7ee      	b.n	80016c4 <__libc_init_array+0xc>
 80016e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80016ea:	4798      	blx	r3
 80016ec:	3601      	adds	r6, #1
 80016ee:	e7f2      	b.n	80016d6 <__libc_init_array+0x1e>
 80016f0:	08002820 	.word	0x08002820
 80016f4:	08002820 	.word	0x08002820
 80016f8:	08002820 	.word	0x08002820
 80016fc:	08002824 	.word	0x08002824

08001700 <memset>:
 8001700:	4402      	add	r2, r0
 8001702:	4603      	mov	r3, r0
 8001704:	4293      	cmp	r3, r2
 8001706:	d100      	bne.n	800170a <memset+0xa>
 8001708:	4770      	bx	lr
 800170a:	f803 1b01 	strb.w	r1, [r3], #1
 800170e:	e7f9      	b.n	8001704 <memset+0x4>

08001710 <iprintf>:
 8001710:	b40f      	push	{r0, r1, r2, r3}
 8001712:	4b0a      	ldr	r3, [pc, #40]	; (800173c <iprintf+0x2c>)
 8001714:	b513      	push	{r0, r1, r4, lr}
 8001716:	681c      	ldr	r4, [r3, #0]
 8001718:	b124      	cbz	r4, 8001724 <iprintf+0x14>
 800171a:	69a3      	ldr	r3, [r4, #24]
 800171c:	b913      	cbnz	r3, 8001724 <iprintf+0x14>
 800171e:	4620      	mov	r0, r4
 8001720:	f000 fa5e 	bl	8001be0 <__sinit>
 8001724:	ab05      	add	r3, sp, #20
 8001726:	9a04      	ldr	r2, [sp, #16]
 8001728:	68a1      	ldr	r1, [r4, #8]
 800172a:	9301      	str	r3, [sp, #4]
 800172c:	4620      	mov	r0, r4
 800172e:	f000 fc67 	bl	8002000 <_vfiprintf_r>
 8001732:	b002      	add	sp, #8
 8001734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001738:	b004      	add	sp, #16
 800173a:	4770      	bx	lr
 800173c:	20000018 	.word	0x20000018

08001740 <_puts_r>:
 8001740:	b570      	push	{r4, r5, r6, lr}
 8001742:	460e      	mov	r6, r1
 8001744:	4605      	mov	r5, r0
 8001746:	b118      	cbz	r0, 8001750 <_puts_r+0x10>
 8001748:	6983      	ldr	r3, [r0, #24]
 800174a:	b90b      	cbnz	r3, 8001750 <_puts_r+0x10>
 800174c:	f000 fa48 	bl	8001be0 <__sinit>
 8001750:	69ab      	ldr	r3, [r5, #24]
 8001752:	68ac      	ldr	r4, [r5, #8]
 8001754:	b913      	cbnz	r3, 800175c <_puts_r+0x1c>
 8001756:	4628      	mov	r0, r5
 8001758:	f000 fa42 	bl	8001be0 <__sinit>
 800175c:	4b2c      	ldr	r3, [pc, #176]	; (8001810 <_puts_r+0xd0>)
 800175e:	429c      	cmp	r4, r3
 8001760:	d120      	bne.n	80017a4 <_puts_r+0x64>
 8001762:	686c      	ldr	r4, [r5, #4]
 8001764:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001766:	07db      	lsls	r3, r3, #31
 8001768:	d405      	bmi.n	8001776 <_puts_r+0x36>
 800176a:	89a3      	ldrh	r3, [r4, #12]
 800176c:	0598      	lsls	r0, r3, #22
 800176e:	d402      	bmi.n	8001776 <_puts_r+0x36>
 8001770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001772:	f000 fad3 	bl	8001d1c <__retarget_lock_acquire_recursive>
 8001776:	89a3      	ldrh	r3, [r4, #12]
 8001778:	0719      	lsls	r1, r3, #28
 800177a:	d51d      	bpl.n	80017b8 <_puts_r+0x78>
 800177c:	6923      	ldr	r3, [r4, #16]
 800177e:	b1db      	cbz	r3, 80017b8 <_puts_r+0x78>
 8001780:	3e01      	subs	r6, #1
 8001782:	68a3      	ldr	r3, [r4, #8]
 8001784:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001788:	3b01      	subs	r3, #1
 800178a:	60a3      	str	r3, [r4, #8]
 800178c:	bb39      	cbnz	r1, 80017de <_puts_r+0x9e>
 800178e:	2b00      	cmp	r3, #0
 8001790:	da38      	bge.n	8001804 <_puts_r+0xc4>
 8001792:	4622      	mov	r2, r4
 8001794:	210a      	movs	r1, #10
 8001796:	4628      	mov	r0, r5
 8001798:	f000 f848 	bl	800182c <__swbuf_r>
 800179c:	3001      	adds	r0, #1
 800179e:	d011      	beq.n	80017c4 <_puts_r+0x84>
 80017a0:	250a      	movs	r5, #10
 80017a2:	e011      	b.n	80017c8 <_puts_r+0x88>
 80017a4:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <_puts_r+0xd4>)
 80017a6:	429c      	cmp	r4, r3
 80017a8:	d101      	bne.n	80017ae <_puts_r+0x6e>
 80017aa:	68ac      	ldr	r4, [r5, #8]
 80017ac:	e7da      	b.n	8001764 <_puts_r+0x24>
 80017ae:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <_puts_r+0xd8>)
 80017b0:	429c      	cmp	r4, r3
 80017b2:	bf08      	it	eq
 80017b4:	68ec      	ldreq	r4, [r5, #12]
 80017b6:	e7d5      	b.n	8001764 <_puts_r+0x24>
 80017b8:	4621      	mov	r1, r4
 80017ba:	4628      	mov	r0, r5
 80017bc:	f000 f888 	bl	80018d0 <__swsetup_r>
 80017c0:	2800      	cmp	r0, #0
 80017c2:	d0dd      	beq.n	8001780 <_puts_r+0x40>
 80017c4:	f04f 35ff 	mov.w	r5, #4294967295
 80017c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80017ca:	07da      	lsls	r2, r3, #31
 80017cc:	d405      	bmi.n	80017da <_puts_r+0x9a>
 80017ce:	89a3      	ldrh	r3, [r4, #12]
 80017d0:	059b      	lsls	r3, r3, #22
 80017d2:	d402      	bmi.n	80017da <_puts_r+0x9a>
 80017d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80017d6:	f000 faa2 	bl	8001d1e <__retarget_lock_release_recursive>
 80017da:	4628      	mov	r0, r5
 80017dc:	bd70      	pop	{r4, r5, r6, pc}
 80017de:	2b00      	cmp	r3, #0
 80017e0:	da04      	bge.n	80017ec <_puts_r+0xac>
 80017e2:	69a2      	ldr	r2, [r4, #24]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	dc06      	bgt.n	80017f6 <_puts_r+0xb6>
 80017e8:	290a      	cmp	r1, #10
 80017ea:	d004      	beq.n	80017f6 <_puts_r+0xb6>
 80017ec:	6823      	ldr	r3, [r4, #0]
 80017ee:	1c5a      	adds	r2, r3, #1
 80017f0:	6022      	str	r2, [r4, #0]
 80017f2:	7019      	strb	r1, [r3, #0]
 80017f4:	e7c5      	b.n	8001782 <_puts_r+0x42>
 80017f6:	4622      	mov	r2, r4
 80017f8:	4628      	mov	r0, r5
 80017fa:	f000 f817 	bl	800182c <__swbuf_r>
 80017fe:	3001      	adds	r0, #1
 8001800:	d1bf      	bne.n	8001782 <_puts_r+0x42>
 8001802:	e7df      	b.n	80017c4 <_puts_r+0x84>
 8001804:	6823      	ldr	r3, [r4, #0]
 8001806:	250a      	movs	r5, #10
 8001808:	1c5a      	adds	r2, r3, #1
 800180a:	6022      	str	r2, [r4, #0]
 800180c:	701d      	strb	r5, [r3, #0]
 800180e:	e7db      	b.n	80017c8 <_puts_r+0x88>
 8001810:	080027ac 	.word	0x080027ac
 8001814:	080027cc 	.word	0x080027cc
 8001818:	0800278c 	.word	0x0800278c

0800181c <puts>:
 800181c:	4b02      	ldr	r3, [pc, #8]	; (8001828 <puts+0xc>)
 800181e:	4601      	mov	r1, r0
 8001820:	6818      	ldr	r0, [r3, #0]
 8001822:	f7ff bf8d 	b.w	8001740 <_puts_r>
 8001826:	bf00      	nop
 8001828:	20000018 	.word	0x20000018

0800182c <__swbuf_r>:
 800182c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800182e:	460e      	mov	r6, r1
 8001830:	4614      	mov	r4, r2
 8001832:	4605      	mov	r5, r0
 8001834:	b118      	cbz	r0, 800183e <__swbuf_r+0x12>
 8001836:	6983      	ldr	r3, [r0, #24]
 8001838:	b90b      	cbnz	r3, 800183e <__swbuf_r+0x12>
 800183a:	f000 f9d1 	bl	8001be0 <__sinit>
 800183e:	4b21      	ldr	r3, [pc, #132]	; (80018c4 <__swbuf_r+0x98>)
 8001840:	429c      	cmp	r4, r3
 8001842:	d12b      	bne.n	800189c <__swbuf_r+0x70>
 8001844:	686c      	ldr	r4, [r5, #4]
 8001846:	69a3      	ldr	r3, [r4, #24]
 8001848:	60a3      	str	r3, [r4, #8]
 800184a:	89a3      	ldrh	r3, [r4, #12]
 800184c:	071a      	lsls	r2, r3, #28
 800184e:	d52f      	bpl.n	80018b0 <__swbuf_r+0x84>
 8001850:	6923      	ldr	r3, [r4, #16]
 8001852:	b36b      	cbz	r3, 80018b0 <__swbuf_r+0x84>
 8001854:	6923      	ldr	r3, [r4, #16]
 8001856:	6820      	ldr	r0, [r4, #0]
 8001858:	1ac0      	subs	r0, r0, r3
 800185a:	6963      	ldr	r3, [r4, #20]
 800185c:	b2f6      	uxtb	r6, r6
 800185e:	4283      	cmp	r3, r0
 8001860:	4637      	mov	r7, r6
 8001862:	dc04      	bgt.n	800186e <__swbuf_r+0x42>
 8001864:	4621      	mov	r1, r4
 8001866:	4628      	mov	r0, r5
 8001868:	f000 f926 	bl	8001ab8 <_fflush_r>
 800186c:	bb30      	cbnz	r0, 80018bc <__swbuf_r+0x90>
 800186e:	68a3      	ldr	r3, [r4, #8]
 8001870:	3b01      	subs	r3, #1
 8001872:	60a3      	str	r3, [r4, #8]
 8001874:	6823      	ldr	r3, [r4, #0]
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	6022      	str	r2, [r4, #0]
 800187a:	701e      	strb	r6, [r3, #0]
 800187c:	6963      	ldr	r3, [r4, #20]
 800187e:	3001      	adds	r0, #1
 8001880:	4283      	cmp	r3, r0
 8001882:	d004      	beq.n	800188e <__swbuf_r+0x62>
 8001884:	89a3      	ldrh	r3, [r4, #12]
 8001886:	07db      	lsls	r3, r3, #31
 8001888:	d506      	bpl.n	8001898 <__swbuf_r+0x6c>
 800188a:	2e0a      	cmp	r6, #10
 800188c:	d104      	bne.n	8001898 <__swbuf_r+0x6c>
 800188e:	4621      	mov	r1, r4
 8001890:	4628      	mov	r0, r5
 8001892:	f000 f911 	bl	8001ab8 <_fflush_r>
 8001896:	b988      	cbnz	r0, 80018bc <__swbuf_r+0x90>
 8001898:	4638      	mov	r0, r7
 800189a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800189c:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <__swbuf_r+0x9c>)
 800189e:	429c      	cmp	r4, r3
 80018a0:	d101      	bne.n	80018a6 <__swbuf_r+0x7a>
 80018a2:	68ac      	ldr	r4, [r5, #8]
 80018a4:	e7cf      	b.n	8001846 <__swbuf_r+0x1a>
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <__swbuf_r+0xa0>)
 80018a8:	429c      	cmp	r4, r3
 80018aa:	bf08      	it	eq
 80018ac:	68ec      	ldreq	r4, [r5, #12]
 80018ae:	e7ca      	b.n	8001846 <__swbuf_r+0x1a>
 80018b0:	4621      	mov	r1, r4
 80018b2:	4628      	mov	r0, r5
 80018b4:	f000 f80c 	bl	80018d0 <__swsetup_r>
 80018b8:	2800      	cmp	r0, #0
 80018ba:	d0cb      	beq.n	8001854 <__swbuf_r+0x28>
 80018bc:	f04f 37ff 	mov.w	r7, #4294967295
 80018c0:	e7ea      	b.n	8001898 <__swbuf_r+0x6c>
 80018c2:	bf00      	nop
 80018c4:	080027ac 	.word	0x080027ac
 80018c8:	080027cc 	.word	0x080027cc
 80018cc:	0800278c 	.word	0x0800278c

080018d0 <__swsetup_r>:
 80018d0:	4b32      	ldr	r3, [pc, #200]	; (800199c <__swsetup_r+0xcc>)
 80018d2:	b570      	push	{r4, r5, r6, lr}
 80018d4:	681d      	ldr	r5, [r3, #0]
 80018d6:	4606      	mov	r6, r0
 80018d8:	460c      	mov	r4, r1
 80018da:	b125      	cbz	r5, 80018e6 <__swsetup_r+0x16>
 80018dc:	69ab      	ldr	r3, [r5, #24]
 80018de:	b913      	cbnz	r3, 80018e6 <__swsetup_r+0x16>
 80018e0:	4628      	mov	r0, r5
 80018e2:	f000 f97d 	bl	8001be0 <__sinit>
 80018e6:	4b2e      	ldr	r3, [pc, #184]	; (80019a0 <__swsetup_r+0xd0>)
 80018e8:	429c      	cmp	r4, r3
 80018ea:	d10f      	bne.n	800190c <__swsetup_r+0x3c>
 80018ec:	686c      	ldr	r4, [r5, #4]
 80018ee:	89a3      	ldrh	r3, [r4, #12]
 80018f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80018f4:	0719      	lsls	r1, r3, #28
 80018f6:	d42c      	bmi.n	8001952 <__swsetup_r+0x82>
 80018f8:	06dd      	lsls	r5, r3, #27
 80018fa:	d411      	bmi.n	8001920 <__swsetup_r+0x50>
 80018fc:	2309      	movs	r3, #9
 80018fe:	6033      	str	r3, [r6, #0]
 8001900:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001904:	81a3      	strh	r3, [r4, #12]
 8001906:	f04f 30ff 	mov.w	r0, #4294967295
 800190a:	e03e      	b.n	800198a <__swsetup_r+0xba>
 800190c:	4b25      	ldr	r3, [pc, #148]	; (80019a4 <__swsetup_r+0xd4>)
 800190e:	429c      	cmp	r4, r3
 8001910:	d101      	bne.n	8001916 <__swsetup_r+0x46>
 8001912:	68ac      	ldr	r4, [r5, #8]
 8001914:	e7eb      	b.n	80018ee <__swsetup_r+0x1e>
 8001916:	4b24      	ldr	r3, [pc, #144]	; (80019a8 <__swsetup_r+0xd8>)
 8001918:	429c      	cmp	r4, r3
 800191a:	bf08      	it	eq
 800191c:	68ec      	ldreq	r4, [r5, #12]
 800191e:	e7e6      	b.n	80018ee <__swsetup_r+0x1e>
 8001920:	0758      	lsls	r0, r3, #29
 8001922:	d512      	bpl.n	800194a <__swsetup_r+0x7a>
 8001924:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001926:	b141      	cbz	r1, 800193a <__swsetup_r+0x6a>
 8001928:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800192c:	4299      	cmp	r1, r3
 800192e:	d002      	beq.n	8001936 <__swsetup_r+0x66>
 8001930:	4630      	mov	r0, r6
 8001932:	f000 fa5b 	bl	8001dec <_free_r>
 8001936:	2300      	movs	r3, #0
 8001938:	6363      	str	r3, [r4, #52]	; 0x34
 800193a:	89a3      	ldrh	r3, [r4, #12]
 800193c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001940:	81a3      	strh	r3, [r4, #12]
 8001942:	2300      	movs	r3, #0
 8001944:	6063      	str	r3, [r4, #4]
 8001946:	6923      	ldr	r3, [r4, #16]
 8001948:	6023      	str	r3, [r4, #0]
 800194a:	89a3      	ldrh	r3, [r4, #12]
 800194c:	f043 0308 	orr.w	r3, r3, #8
 8001950:	81a3      	strh	r3, [r4, #12]
 8001952:	6923      	ldr	r3, [r4, #16]
 8001954:	b94b      	cbnz	r3, 800196a <__swsetup_r+0x9a>
 8001956:	89a3      	ldrh	r3, [r4, #12]
 8001958:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800195c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001960:	d003      	beq.n	800196a <__swsetup_r+0x9a>
 8001962:	4621      	mov	r1, r4
 8001964:	4630      	mov	r0, r6
 8001966:	f000 fa01 	bl	8001d6c <__smakebuf_r>
 800196a:	89a0      	ldrh	r0, [r4, #12]
 800196c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001970:	f010 0301 	ands.w	r3, r0, #1
 8001974:	d00a      	beq.n	800198c <__swsetup_r+0xbc>
 8001976:	2300      	movs	r3, #0
 8001978:	60a3      	str	r3, [r4, #8]
 800197a:	6963      	ldr	r3, [r4, #20]
 800197c:	425b      	negs	r3, r3
 800197e:	61a3      	str	r3, [r4, #24]
 8001980:	6923      	ldr	r3, [r4, #16]
 8001982:	b943      	cbnz	r3, 8001996 <__swsetup_r+0xc6>
 8001984:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001988:	d1ba      	bne.n	8001900 <__swsetup_r+0x30>
 800198a:	bd70      	pop	{r4, r5, r6, pc}
 800198c:	0781      	lsls	r1, r0, #30
 800198e:	bf58      	it	pl
 8001990:	6963      	ldrpl	r3, [r4, #20]
 8001992:	60a3      	str	r3, [r4, #8]
 8001994:	e7f4      	b.n	8001980 <__swsetup_r+0xb0>
 8001996:	2000      	movs	r0, #0
 8001998:	e7f7      	b.n	800198a <__swsetup_r+0xba>
 800199a:	bf00      	nop
 800199c:	20000018 	.word	0x20000018
 80019a0:	080027ac 	.word	0x080027ac
 80019a4:	080027cc 	.word	0x080027cc
 80019a8:	0800278c 	.word	0x0800278c

080019ac <__sflush_r>:
 80019ac:	898a      	ldrh	r2, [r1, #12]
 80019ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019b2:	4605      	mov	r5, r0
 80019b4:	0710      	lsls	r0, r2, #28
 80019b6:	460c      	mov	r4, r1
 80019b8:	d458      	bmi.n	8001a6c <__sflush_r+0xc0>
 80019ba:	684b      	ldr	r3, [r1, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	dc05      	bgt.n	80019cc <__sflush_r+0x20>
 80019c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	dc02      	bgt.n	80019cc <__sflush_r+0x20>
 80019c6:	2000      	movs	r0, #0
 80019c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80019ce:	2e00      	cmp	r6, #0
 80019d0:	d0f9      	beq.n	80019c6 <__sflush_r+0x1a>
 80019d2:	2300      	movs	r3, #0
 80019d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80019d8:	682f      	ldr	r7, [r5, #0]
 80019da:	602b      	str	r3, [r5, #0]
 80019dc:	d032      	beq.n	8001a44 <__sflush_r+0x98>
 80019de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80019e0:	89a3      	ldrh	r3, [r4, #12]
 80019e2:	075a      	lsls	r2, r3, #29
 80019e4:	d505      	bpl.n	80019f2 <__sflush_r+0x46>
 80019e6:	6863      	ldr	r3, [r4, #4]
 80019e8:	1ac0      	subs	r0, r0, r3
 80019ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80019ec:	b10b      	cbz	r3, 80019f2 <__sflush_r+0x46>
 80019ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019f0:	1ac0      	subs	r0, r0, r3
 80019f2:	2300      	movs	r3, #0
 80019f4:	4602      	mov	r2, r0
 80019f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80019f8:	6a21      	ldr	r1, [r4, #32]
 80019fa:	4628      	mov	r0, r5
 80019fc:	47b0      	blx	r6
 80019fe:	1c43      	adds	r3, r0, #1
 8001a00:	89a3      	ldrh	r3, [r4, #12]
 8001a02:	d106      	bne.n	8001a12 <__sflush_r+0x66>
 8001a04:	6829      	ldr	r1, [r5, #0]
 8001a06:	291d      	cmp	r1, #29
 8001a08:	d82c      	bhi.n	8001a64 <__sflush_r+0xb8>
 8001a0a:	4a2a      	ldr	r2, [pc, #168]	; (8001ab4 <__sflush_r+0x108>)
 8001a0c:	40ca      	lsrs	r2, r1
 8001a0e:	07d6      	lsls	r6, r2, #31
 8001a10:	d528      	bpl.n	8001a64 <__sflush_r+0xb8>
 8001a12:	2200      	movs	r2, #0
 8001a14:	6062      	str	r2, [r4, #4]
 8001a16:	04d9      	lsls	r1, r3, #19
 8001a18:	6922      	ldr	r2, [r4, #16]
 8001a1a:	6022      	str	r2, [r4, #0]
 8001a1c:	d504      	bpl.n	8001a28 <__sflush_r+0x7c>
 8001a1e:	1c42      	adds	r2, r0, #1
 8001a20:	d101      	bne.n	8001a26 <__sflush_r+0x7a>
 8001a22:	682b      	ldr	r3, [r5, #0]
 8001a24:	b903      	cbnz	r3, 8001a28 <__sflush_r+0x7c>
 8001a26:	6560      	str	r0, [r4, #84]	; 0x54
 8001a28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a2a:	602f      	str	r7, [r5, #0]
 8001a2c:	2900      	cmp	r1, #0
 8001a2e:	d0ca      	beq.n	80019c6 <__sflush_r+0x1a>
 8001a30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001a34:	4299      	cmp	r1, r3
 8001a36:	d002      	beq.n	8001a3e <__sflush_r+0x92>
 8001a38:	4628      	mov	r0, r5
 8001a3a:	f000 f9d7 	bl	8001dec <_free_r>
 8001a3e:	2000      	movs	r0, #0
 8001a40:	6360      	str	r0, [r4, #52]	; 0x34
 8001a42:	e7c1      	b.n	80019c8 <__sflush_r+0x1c>
 8001a44:	6a21      	ldr	r1, [r4, #32]
 8001a46:	2301      	movs	r3, #1
 8001a48:	4628      	mov	r0, r5
 8001a4a:	47b0      	blx	r6
 8001a4c:	1c41      	adds	r1, r0, #1
 8001a4e:	d1c7      	bne.n	80019e0 <__sflush_r+0x34>
 8001a50:	682b      	ldr	r3, [r5, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0c4      	beq.n	80019e0 <__sflush_r+0x34>
 8001a56:	2b1d      	cmp	r3, #29
 8001a58:	d001      	beq.n	8001a5e <__sflush_r+0xb2>
 8001a5a:	2b16      	cmp	r3, #22
 8001a5c:	d101      	bne.n	8001a62 <__sflush_r+0xb6>
 8001a5e:	602f      	str	r7, [r5, #0]
 8001a60:	e7b1      	b.n	80019c6 <__sflush_r+0x1a>
 8001a62:	89a3      	ldrh	r3, [r4, #12]
 8001a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a68:	81a3      	strh	r3, [r4, #12]
 8001a6a:	e7ad      	b.n	80019c8 <__sflush_r+0x1c>
 8001a6c:	690f      	ldr	r7, [r1, #16]
 8001a6e:	2f00      	cmp	r7, #0
 8001a70:	d0a9      	beq.n	80019c6 <__sflush_r+0x1a>
 8001a72:	0793      	lsls	r3, r2, #30
 8001a74:	680e      	ldr	r6, [r1, #0]
 8001a76:	bf08      	it	eq
 8001a78:	694b      	ldreq	r3, [r1, #20]
 8001a7a:	600f      	str	r7, [r1, #0]
 8001a7c:	bf18      	it	ne
 8001a7e:	2300      	movne	r3, #0
 8001a80:	eba6 0807 	sub.w	r8, r6, r7
 8001a84:	608b      	str	r3, [r1, #8]
 8001a86:	f1b8 0f00 	cmp.w	r8, #0
 8001a8a:	dd9c      	ble.n	80019c6 <__sflush_r+0x1a>
 8001a8c:	6a21      	ldr	r1, [r4, #32]
 8001a8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001a90:	4643      	mov	r3, r8
 8001a92:	463a      	mov	r2, r7
 8001a94:	4628      	mov	r0, r5
 8001a96:	47b0      	blx	r6
 8001a98:	2800      	cmp	r0, #0
 8001a9a:	dc06      	bgt.n	8001aaa <__sflush_r+0xfe>
 8001a9c:	89a3      	ldrh	r3, [r4, #12]
 8001a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aa2:	81a3      	strh	r3, [r4, #12]
 8001aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa8:	e78e      	b.n	80019c8 <__sflush_r+0x1c>
 8001aaa:	4407      	add	r7, r0
 8001aac:	eba8 0800 	sub.w	r8, r8, r0
 8001ab0:	e7e9      	b.n	8001a86 <__sflush_r+0xda>
 8001ab2:	bf00      	nop
 8001ab4:	20400001 	.word	0x20400001

08001ab8 <_fflush_r>:
 8001ab8:	b538      	push	{r3, r4, r5, lr}
 8001aba:	690b      	ldr	r3, [r1, #16]
 8001abc:	4605      	mov	r5, r0
 8001abe:	460c      	mov	r4, r1
 8001ac0:	b913      	cbnz	r3, 8001ac8 <_fflush_r+0x10>
 8001ac2:	2500      	movs	r5, #0
 8001ac4:	4628      	mov	r0, r5
 8001ac6:	bd38      	pop	{r3, r4, r5, pc}
 8001ac8:	b118      	cbz	r0, 8001ad2 <_fflush_r+0x1a>
 8001aca:	6983      	ldr	r3, [r0, #24]
 8001acc:	b90b      	cbnz	r3, 8001ad2 <_fflush_r+0x1a>
 8001ace:	f000 f887 	bl	8001be0 <__sinit>
 8001ad2:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <_fflush_r+0x6c>)
 8001ad4:	429c      	cmp	r4, r3
 8001ad6:	d11b      	bne.n	8001b10 <_fflush_r+0x58>
 8001ad8:	686c      	ldr	r4, [r5, #4]
 8001ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0ef      	beq.n	8001ac2 <_fflush_r+0xa>
 8001ae2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001ae4:	07d0      	lsls	r0, r2, #31
 8001ae6:	d404      	bmi.n	8001af2 <_fflush_r+0x3a>
 8001ae8:	0599      	lsls	r1, r3, #22
 8001aea:	d402      	bmi.n	8001af2 <_fflush_r+0x3a>
 8001aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001aee:	f000 f915 	bl	8001d1c <__retarget_lock_acquire_recursive>
 8001af2:	4628      	mov	r0, r5
 8001af4:	4621      	mov	r1, r4
 8001af6:	f7ff ff59 	bl	80019ac <__sflush_r>
 8001afa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001afc:	07da      	lsls	r2, r3, #31
 8001afe:	4605      	mov	r5, r0
 8001b00:	d4e0      	bmi.n	8001ac4 <_fflush_r+0xc>
 8001b02:	89a3      	ldrh	r3, [r4, #12]
 8001b04:	059b      	lsls	r3, r3, #22
 8001b06:	d4dd      	bmi.n	8001ac4 <_fflush_r+0xc>
 8001b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b0a:	f000 f908 	bl	8001d1e <__retarget_lock_release_recursive>
 8001b0e:	e7d9      	b.n	8001ac4 <_fflush_r+0xc>
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <_fflush_r+0x70>)
 8001b12:	429c      	cmp	r4, r3
 8001b14:	d101      	bne.n	8001b1a <_fflush_r+0x62>
 8001b16:	68ac      	ldr	r4, [r5, #8]
 8001b18:	e7df      	b.n	8001ada <_fflush_r+0x22>
 8001b1a:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <_fflush_r+0x74>)
 8001b1c:	429c      	cmp	r4, r3
 8001b1e:	bf08      	it	eq
 8001b20:	68ec      	ldreq	r4, [r5, #12]
 8001b22:	e7da      	b.n	8001ada <_fflush_r+0x22>
 8001b24:	080027ac 	.word	0x080027ac
 8001b28:	080027cc 	.word	0x080027cc
 8001b2c:	0800278c 	.word	0x0800278c

08001b30 <std>:
 8001b30:	2300      	movs	r3, #0
 8001b32:	b510      	push	{r4, lr}
 8001b34:	4604      	mov	r4, r0
 8001b36:	e9c0 3300 	strd	r3, r3, [r0]
 8001b3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001b3e:	6083      	str	r3, [r0, #8]
 8001b40:	8181      	strh	r1, [r0, #12]
 8001b42:	6643      	str	r3, [r0, #100]	; 0x64
 8001b44:	81c2      	strh	r2, [r0, #14]
 8001b46:	6183      	str	r3, [r0, #24]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	2208      	movs	r2, #8
 8001b4c:	305c      	adds	r0, #92	; 0x5c
 8001b4e:	f7ff fdd7 	bl	8001700 <memset>
 8001b52:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <std+0x38>)
 8001b54:	6263      	str	r3, [r4, #36]	; 0x24
 8001b56:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <std+0x3c>)
 8001b58:	62a3      	str	r3, [r4, #40]	; 0x28
 8001b5a:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <std+0x40>)
 8001b5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001b5e:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <std+0x44>)
 8001b60:	6224      	str	r4, [r4, #32]
 8001b62:	6323      	str	r3, [r4, #48]	; 0x30
 8001b64:	bd10      	pop	{r4, pc}
 8001b66:	bf00      	nop
 8001b68:	080025a9 	.word	0x080025a9
 8001b6c:	080025cb 	.word	0x080025cb
 8001b70:	08002603 	.word	0x08002603
 8001b74:	08002627 	.word	0x08002627

08001b78 <_cleanup_r>:
 8001b78:	4901      	ldr	r1, [pc, #4]	; (8001b80 <_cleanup_r+0x8>)
 8001b7a:	f000 b8af 	b.w	8001cdc <_fwalk_reent>
 8001b7e:	bf00      	nop
 8001b80:	08001ab9 	.word	0x08001ab9

08001b84 <__sfmoreglue>:
 8001b84:	b570      	push	{r4, r5, r6, lr}
 8001b86:	2268      	movs	r2, #104	; 0x68
 8001b88:	1e4d      	subs	r5, r1, #1
 8001b8a:	4355      	muls	r5, r2
 8001b8c:	460e      	mov	r6, r1
 8001b8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001b92:	f000 f997 	bl	8001ec4 <_malloc_r>
 8001b96:	4604      	mov	r4, r0
 8001b98:	b140      	cbz	r0, 8001bac <__sfmoreglue+0x28>
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	e9c0 1600 	strd	r1, r6, [r0]
 8001ba0:	300c      	adds	r0, #12
 8001ba2:	60a0      	str	r0, [r4, #8]
 8001ba4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001ba8:	f7ff fdaa 	bl	8001700 <memset>
 8001bac:	4620      	mov	r0, r4
 8001bae:	bd70      	pop	{r4, r5, r6, pc}

08001bb0 <__sfp_lock_acquire>:
 8001bb0:	4801      	ldr	r0, [pc, #4]	; (8001bb8 <__sfp_lock_acquire+0x8>)
 8001bb2:	f000 b8b3 	b.w	8001d1c <__retarget_lock_acquire_recursive>
 8001bb6:	bf00      	nop
 8001bb8:	200000e9 	.word	0x200000e9

08001bbc <__sfp_lock_release>:
 8001bbc:	4801      	ldr	r0, [pc, #4]	; (8001bc4 <__sfp_lock_release+0x8>)
 8001bbe:	f000 b8ae 	b.w	8001d1e <__retarget_lock_release_recursive>
 8001bc2:	bf00      	nop
 8001bc4:	200000e9 	.word	0x200000e9

08001bc8 <__sinit_lock_acquire>:
 8001bc8:	4801      	ldr	r0, [pc, #4]	; (8001bd0 <__sinit_lock_acquire+0x8>)
 8001bca:	f000 b8a7 	b.w	8001d1c <__retarget_lock_acquire_recursive>
 8001bce:	bf00      	nop
 8001bd0:	200000ea 	.word	0x200000ea

08001bd4 <__sinit_lock_release>:
 8001bd4:	4801      	ldr	r0, [pc, #4]	; (8001bdc <__sinit_lock_release+0x8>)
 8001bd6:	f000 b8a2 	b.w	8001d1e <__retarget_lock_release_recursive>
 8001bda:	bf00      	nop
 8001bdc:	200000ea 	.word	0x200000ea

08001be0 <__sinit>:
 8001be0:	b510      	push	{r4, lr}
 8001be2:	4604      	mov	r4, r0
 8001be4:	f7ff fff0 	bl	8001bc8 <__sinit_lock_acquire>
 8001be8:	69a3      	ldr	r3, [r4, #24]
 8001bea:	b11b      	cbz	r3, 8001bf4 <__sinit+0x14>
 8001bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001bf0:	f7ff bff0 	b.w	8001bd4 <__sinit_lock_release>
 8001bf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001bf8:	6523      	str	r3, [r4, #80]	; 0x50
 8001bfa:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <__sinit+0x68>)
 8001bfc:	4a13      	ldr	r2, [pc, #76]	; (8001c4c <__sinit+0x6c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	62a2      	str	r2, [r4, #40]	; 0x28
 8001c02:	42a3      	cmp	r3, r4
 8001c04:	bf04      	itt	eq
 8001c06:	2301      	moveq	r3, #1
 8001c08:	61a3      	streq	r3, [r4, #24]
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	f000 f820 	bl	8001c50 <__sfp>
 8001c10:	6060      	str	r0, [r4, #4]
 8001c12:	4620      	mov	r0, r4
 8001c14:	f000 f81c 	bl	8001c50 <__sfp>
 8001c18:	60a0      	str	r0, [r4, #8]
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	f000 f818 	bl	8001c50 <__sfp>
 8001c20:	2200      	movs	r2, #0
 8001c22:	60e0      	str	r0, [r4, #12]
 8001c24:	2104      	movs	r1, #4
 8001c26:	6860      	ldr	r0, [r4, #4]
 8001c28:	f7ff ff82 	bl	8001b30 <std>
 8001c2c:	68a0      	ldr	r0, [r4, #8]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	2109      	movs	r1, #9
 8001c32:	f7ff ff7d 	bl	8001b30 <std>
 8001c36:	68e0      	ldr	r0, [r4, #12]
 8001c38:	2202      	movs	r2, #2
 8001c3a:	2112      	movs	r1, #18
 8001c3c:	f7ff ff78 	bl	8001b30 <std>
 8001c40:	2301      	movs	r3, #1
 8001c42:	61a3      	str	r3, [r4, #24]
 8001c44:	e7d2      	b.n	8001bec <__sinit+0xc>
 8001c46:	bf00      	nop
 8001c48:	08002788 	.word	0x08002788
 8001c4c:	08001b79 	.word	0x08001b79

08001c50 <__sfp>:
 8001c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c52:	4607      	mov	r7, r0
 8001c54:	f7ff ffac 	bl	8001bb0 <__sfp_lock_acquire>
 8001c58:	4b1e      	ldr	r3, [pc, #120]	; (8001cd4 <__sfp+0x84>)
 8001c5a:	681e      	ldr	r6, [r3, #0]
 8001c5c:	69b3      	ldr	r3, [r6, #24]
 8001c5e:	b913      	cbnz	r3, 8001c66 <__sfp+0x16>
 8001c60:	4630      	mov	r0, r6
 8001c62:	f7ff ffbd 	bl	8001be0 <__sinit>
 8001c66:	3648      	adds	r6, #72	; 0x48
 8001c68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	d503      	bpl.n	8001c78 <__sfp+0x28>
 8001c70:	6833      	ldr	r3, [r6, #0]
 8001c72:	b30b      	cbz	r3, 8001cb8 <__sfp+0x68>
 8001c74:	6836      	ldr	r6, [r6, #0]
 8001c76:	e7f7      	b.n	8001c68 <__sfp+0x18>
 8001c78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001c7c:	b9d5      	cbnz	r5, 8001cb4 <__sfp+0x64>
 8001c7e:	4b16      	ldr	r3, [pc, #88]	; (8001cd8 <__sfp+0x88>)
 8001c80:	60e3      	str	r3, [r4, #12]
 8001c82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001c86:	6665      	str	r5, [r4, #100]	; 0x64
 8001c88:	f000 f847 	bl	8001d1a <__retarget_lock_init_recursive>
 8001c8c:	f7ff ff96 	bl	8001bbc <__sfp_lock_release>
 8001c90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001c94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001c98:	6025      	str	r5, [r4, #0]
 8001c9a:	61a5      	str	r5, [r4, #24]
 8001c9c:	2208      	movs	r2, #8
 8001c9e:	4629      	mov	r1, r5
 8001ca0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001ca4:	f7ff fd2c 	bl	8001700 <memset>
 8001ca8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001cac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001cb0:	4620      	mov	r0, r4
 8001cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cb4:	3468      	adds	r4, #104	; 0x68
 8001cb6:	e7d9      	b.n	8001c6c <__sfp+0x1c>
 8001cb8:	2104      	movs	r1, #4
 8001cba:	4638      	mov	r0, r7
 8001cbc:	f7ff ff62 	bl	8001b84 <__sfmoreglue>
 8001cc0:	4604      	mov	r4, r0
 8001cc2:	6030      	str	r0, [r6, #0]
 8001cc4:	2800      	cmp	r0, #0
 8001cc6:	d1d5      	bne.n	8001c74 <__sfp+0x24>
 8001cc8:	f7ff ff78 	bl	8001bbc <__sfp_lock_release>
 8001ccc:	230c      	movs	r3, #12
 8001cce:	603b      	str	r3, [r7, #0]
 8001cd0:	e7ee      	b.n	8001cb0 <__sfp+0x60>
 8001cd2:	bf00      	nop
 8001cd4:	08002788 	.word	0x08002788
 8001cd8:	ffff0001 	.word	0xffff0001

08001cdc <_fwalk_reent>:
 8001cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ce0:	4606      	mov	r6, r0
 8001ce2:	4688      	mov	r8, r1
 8001ce4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001ce8:	2700      	movs	r7, #0
 8001cea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001cee:	f1b9 0901 	subs.w	r9, r9, #1
 8001cf2:	d505      	bpl.n	8001d00 <_fwalk_reent+0x24>
 8001cf4:	6824      	ldr	r4, [r4, #0]
 8001cf6:	2c00      	cmp	r4, #0
 8001cf8:	d1f7      	bne.n	8001cea <_fwalk_reent+0xe>
 8001cfa:	4638      	mov	r0, r7
 8001cfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d00:	89ab      	ldrh	r3, [r5, #12]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d907      	bls.n	8001d16 <_fwalk_reent+0x3a>
 8001d06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	d003      	beq.n	8001d16 <_fwalk_reent+0x3a>
 8001d0e:	4629      	mov	r1, r5
 8001d10:	4630      	mov	r0, r6
 8001d12:	47c0      	blx	r8
 8001d14:	4307      	orrs	r7, r0
 8001d16:	3568      	adds	r5, #104	; 0x68
 8001d18:	e7e9      	b.n	8001cee <_fwalk_reent+0x12>

08001d1a <__retarget_lock_init_recursive>:
 8001d1a:	4770      	bx	lr

08001d1c <__retarget_lock_acquire_recursive>:
 8001d1c:	4770      	bx	lr

08001d1e <__retarget_lock_release_recursive>:
 8001d1e:	4770      	bx	lr

08001d20 <__swhatbuf_r>:
 8001d20:	b570      	push	{r4, r5, r6, lr}
 8001d22:	460e      	mov	r6, r1
 8001d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d28:	2900      	cmp	r1, #0
 8001d2a:	b096      	sub	sp, #88	; 0x58
 8001d2c:	4614      	mov	r4, r2
 8001d2e:	461d      	mov	r5, r3
 8001d30:	da08      	bge.n	8001d44 <__swhatbuf_r+0x24>
 8001d32:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001d36:	2200      	movs	r2, #0
 8001d38:	602a      	str	r2, [r5, #0]
 8001d3a:	061a      	lsls	r2, r3, #24
 8001d3c:	d410      	bmi.n	8001d60 <__swhatbuf_r+0x40>
 8001d3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d42:	e00e      	b.n	8001d62 <__swhatbuf_r+0x42>
 8001d44:	466a      	mov	r2, sp
 8001d46:	f000 fc95 	bl	8002674 <_fstat_r>
 8001d4a:	2800      	cmp	r0, #0
 8001d4c:	dbf1      	blt.n	8001d32 <__swhatbuf_r+0x12>
 8001d4e:	9a01      	ldr	r2, [sp, #4]
 8001d50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001d54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001d58:	425a      	negs	r2, r3
 8001d5a:	415a      	adcs	r2, r3
 8001d5c:	602a      	str	r2, [r5, #0]
 8001d5e:	e7ee      	b.n	8001d3e <__swhatbuf_r+0x1e>
 8001d60:	2340      	movs	r3, #64	; 0x40
 8001d62:	2000      	movs	r0, #0
 8001d64:	6023      	str	r3, [r4, #0]
 8001d66:	b016      	add	sp, #88	; 0x58
 8001d68:	bd70      	pop	{r4, r5, r6, pc}
	...

08001d6c <__smakebuf_r>:
 8001d6c:	898b      	ldrh	r3, [r1, #12]
 8001d6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001d70:	079d      	lsls	r5, r3, #30
 8001d72:	4606      	mov	r6, r0
 8001d74:	460c      	mov	r4, r1
 8001d76:	d507      	bpl.n	8001d88 <__smakebuf_r+0x1c>
 8001d78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001d7c:	6023      	str	r3, [r4, #0]
 8001d7e:	6123      	str	r3, [r4, #16]
 8001d80:	2301      	movs	r3, #1
 8001d82:	6163      	str	r3, [r4, #20]
 8001d84:	b002      	add	sp, #8
 8001d86:	bd70      	pop	{r4, r5, r6, pc}
 8001d88:	ab01      	add	r3, sp, #4
 8001d8a:	466a      	mov	r2, sp
 8001d8c:	f7ff ffc8 	bl	8001d20 <__swhatbuf_r>
 8001d90:	9900      	ldr	r1, [sp, #0]
 8001d92:	4605      	mov	r5, r0
 8001d94:	4630      	mov	r0, r6
 8001d96:	f000 f895 	bl	8001ec4 <_malloc_r>
 8001d9a:	b948      	cbnz	r0, 8001db0 <__smakebuf_r+0x44>
 8001d9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001da0:	059a      	lsls	r2, r3, #22
 8001da2:	d4ef      	bmi.n	8001d84 <__smakebuf_r+0x18>
 8001da4:	f023 0303 	bic.w	r3, r3, #3
 8001da8:	f043 0302 	orr.w	r3, r3, #2
 8001dac:	81a3      	strh	r3, [r4, #12]
 8001dae:	e7e3      	b.n	8001d78 <__smakebuf_r+0xc>
 8001db0:	4b0d      	ldr	r3, [pc, #52]	; (8001de8 <__smakebuf_r+0x7c>)
 8001db2:	62b3      	str	r3, [r6, #40]	; 0x28
 8001db4:	89a3      	ldrh	r3, [r4, #12]
 8001db6:	6020      	str	r0, [r4, #0]
 8001db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dbc:	81a3      	strh	r3, [r4, #12]
 8001dbe:	9b00      	ldr	r3, [sp, #0]
 8001dc0:	6163      	str	r3, [r4, #20]
 8001dc2:	9b01      	ldr	r3, [sp, #4]
 8001dc4:	6120      	str	r0, [r4, #16]
 8001dc6:	b15b      	cbz	r3, 8001de0 <__smakebuf_r+0x74>
 8001dc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001dcc:	4630      	mov	r0, r6
 8001dce:	f000 fc63 	bl	8002698 <_isatty_r>
 8001dd2:	b128      	cbz	r0, 8001de0 <__smakebuf_r+0x74>
 8001dd4:	89a3      	ldrh	r3, [r4, #12]
 8001dd6:	f023 0303 	bic.w	r3, r3, #3
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	81a3      	strh	r3, [r4, #12]
 8001de0:	89a0      	ldrh	r0, [r4, #12]
 8001de2:	4305      	orrs	r5, r0
 8001de4:	81a5      	strh	r5, [r4, #12]
 8001de6:	e7cd      	b.n	8001d84 <__smakebuf_r+0x18>
 8001de8:	08001b79 	.word	0x08001b79

08001dec <_free_r>:
 8001dec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001dee:	2900      	cmp	r1, #0
 8001df0:	d044      	beq.n	8001e7c <_free_r+0x90>
 8001df2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001df6:	9001      	str	r0, [sp, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f1a1 0404 	sub.w	r4, r1, #4
 8001dfe:	bfb8      	it	lt
 8001e00:	18e4      	addlt	r4, r4, r3
 8001e02:	f000 fc6b 	bl	80026dc <__malloc_lock>
 8001e06:	4a1e      	ldr	r2, [pc, #120]	; (8001e80 <_free_r+0x94>)
 8001e08:	9801      	ldr	r0, [sp, #4]
 8001e0a:	6813      	ldr	r3, [r2, #0]
 8001e0c:	b933      	cbnz	r3, 8001e1c <_free_r+0x30>
 8001e0e:	6063      	str	r3, [r4, #4]
 8001e10:	6014      	str	r4, [r2, #0]
 8001e12:	b003      	add	sp, #12
 8001e14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001e18:	f000 bc66 	b.w	80026e8 <__malloc_unlock>
 8001e1c:	42a3      	cmp	r3, r4
 8001e1e:	d908      	bls.n	8001e32 <_free_r+0x46>
 8001e20:	6825      	ldr	r5, [r4, #0]
 8001e22:	1961      	adds	r1, r4, r5
 8001e24:	428b      	cmp	r3, r1
 8001e26:	bf01      	itttt	eq
 8001e28:	6819      	ldreq	r1, [r3, #0]
 8001e2a:	685b      	ldreq	r3, [r3, #4]
 8001e2c:	1949      	addeq	r1, r1, r5
 8001e2e:	6021      	streq	r1, [r4, #0]
 8001e30:	e7ed      	b.n	8001e0e <_free_r+0x22>
 8001e32:	461a      	mov	r2, r3
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	b10b      	cbz	r3, 8001e3c <_free_r+0x50>
 8001e38:	42a3      	cmp	r3, r4
 8001e3a:	d9fa      	bls.n	8001e32 <_free_r+0x46>
 8001e3c:	6811      	ldr	r1, [r2, #0]
 8001e3e:	1855      	adds	r5, r2, r1
 8001e40:	42a5      	cmp	r5, r4
 8001e42:	d10b      	bne.n	8001e5c <_free_r+0x70>
 8001e44:	6824      	ldr	r4, [r4, #0]
 8001e46:	4421      	add	r1, r4
 8001e48:	1854      	adds	r4, r2, r1
 8001e4a:	42a3      	cmp	r3, r4
 8001e4c:	6011      	str	r1, [r2, #0]
 8001e4e:	d1e0      	bne.n	8001e12 <_free_r+0x26>
 8001e50:	681c      	ldr	r4, [r3, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	6053      	str	r3, [r2, #4]
 8001e56:	4421      	add	r1, r4
 8001e58:	6011      	str	r1, [r2, #0]
 8001e5a:	e7da      	b.n	8001e12 <_free_r+0x26>
 8001e5c:	d902      	bls.n	8001e64 <_free_r+0x78>
 8001e5e:	230c      	movs	r3, #12
 8001e60:	6003      	str	r3, [r0, #0]
 8001e62:	e7d6      	b.n	8001e12 <_free_r+0x26>
 8001e64:	6825      	ldr	r5, [r4, #0]
 8001e66:	1961      	adds	r1, r4, r5
 8001e68:	428b      	cmp	r3, r1
 8001e6a:	bf04      	itt	eq
 8001e6c:	6819      	ldreq	r1, [r3, #0]
 8001e6e:	685b      	ldreq	r3, [r3, #4]
 8001e70:	6063      	str	r3, [r4, #4]
 8001e72:	bf04      	itt	eq
 8001e74:	1949      	addeq	r1, r1, r5
 8001e76:	6021      	streq	r1, [r4, #0]
 8001e78:	6054      	str	r4, [r2, #4]
 8001e7a:	e7ca      	b.n	8001e12 <_free_r+0x26>
 8001e7c:	b003      	add	sp, #12
 8001e7e:	bd30      	pop	{r4, r5, pc}
 8001e80:	200000ec 	.word	0x200000ec

08001e84 <sbrk_aligned>:
 8001e84:	b570      	push	{r4, r5, r6, lr}
 8001e86:	4e0e      	ldr	r6, [pc, #56]	; (8001ec0 <sbrk_aligned+0x3c>)
 8001e88:	460c      	mov	r4, r1
 8001e8a:	6831      	ldr	r1, [r6, #0]
 8001e8c:	4605      	mov	r5, r0
 8001e8e:	b911      	cbnz	r1, 8001e96 <sbrk_aligned+0x12>
 8001e90:	f000 fb7a 	bl	8002588 <_sbrk_r>
 8001e94:	6030      	str	r0, [r6, #0]
 8001e96:	4621      	mov	r1, r4
 8001e98:	4628      	mov	r0, r5
 8001e9a:	f000 fb75 	bl	8002588 <_sbrk_r>
 8001e9e:	1c43      	adds	r3, r0, #1
 8001ea0:	d00a      	beq.n	8001eb8 <sbrk_aligned+0x34>
 8001ea2:	1cc4      	adds	r4, r0, #3
 8001ea4:	f024 0403 	bic.w	r4, r4, #3
 8001ea8:	42a0      	cmp	r0, r4
 8001eaa:	d007      	beq.n	8001ebc <sbrk_aligned+0x38>
 8001eac:	1a21      	subs	r1, r4, r0
 8001eae:	4628      	mov	r0, r5
 8001eb0:	f000 fb6a 	bl	8002588 <_sbrk_r>
 8001eb4:	3001      	adds	r0, #1
 8001eb6:	d101      	bne.n	8001ebc <sbrk_aligned+0x38>
 8001eb8:	f04f 34ff 	mov.w	r4, #4294967295
 8001ebc:	4620      	mov	r0, r4
 8001ebe:	bd70      	pop	{r4, r5, r6, pc}
 8001ec0:	200000f0 	.word	0x200000f0

08001ec4 <_malloc_r>:
 8001ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ec8:	1ccd      	adds	r5, r1, #3
 8001eca:	f025 0503 	bic.w	r5, r5, #3
 8001ece:	3508      	adds	r5, #8
 8001ed0:	2d0c      	cmp	r5, #12
 8001ed2:	bf38      	it	cc
 8001ed4:	250c      	movcc	r5, #12
 8001ed6:	2d00      	cmp	r5, #0
 8001ed8:	4607      	mov	r7, r0
 8001eda:	db01      	blt.n	8001ee0 <_malloc_r+0x1c>
 8001edc:	42a9      	cmp	r1, r5
 8001ede:	d905      	bls.n	8001eec <_malloc_r+0x28>
 8001ee0:	230c      	movs	r3, #12
 8001ee2:	603b      	str	r3, [r7, #0]
 8001ee4:	2600      	movs	r6, #0
 8001ee6:	4630      	mov	r0, r6
 8001ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001eec:	4e2e      	ldr	r6, [pc, #184]	; (8001fa8 <_malloc_r+0xe4>)
 8001eee:	f000 fbf5 	bl	80026dc <__malloc_lock>
 8001ef2:	6833      	ldr	r3, [r6, #0]
 8001ef4:	461c      	mov	r4, r3
 8001ef6:	bb34      	cbnz	r4, 8001f46 <_malloc_r+0x82>
 8001ef8:	4629      	mov	r1, r5
 8001efa:	4638      	mov	r0, r7
 8001efc:	f7ff ffc2 	bl	8001e84 <sbrk_aligned>
 8001f00:	1c43      	adds	r3, r0, #1
 8001f02:	4604      	mov	r4, r0
 8001f04:	d14d      	bne.n	8001fa2 <_malloc_r+0xde>
 8001f06:	6834      	ldr	r4, [r6, #0]
 8001f08:	4626      	mov	r6, r4
 8001f0a:	2e00      	cmp	r6, #0
 8001f0c:	d140      	bne.n	8001f90 <_malloc_r+0xcc>
 8001f0e:	6823      	ldr	r3, [r4, #0]
 8001f10:	4631      	mov	r1, r6
 8001f12:	4638      	mov	r0, r7
 8001f14:	eb04 0803 	add.w	r8, r4, r3
 8001f18:	f000 fb36 	bl	8002588 <_sbrk_r>
 8001f1c:	4580      	cmp	r8, r0
 8001f1e:	d13a      	bne.n	8001f96 <_malloc_r+0xd2>
 8001f20:	6821      	ldr	r1, [r4, #0]
 8001f22:	3503      	adds	r5, #3
 8001f24:	1a6d      	subs	r5, r5, r1
 8001f26:	f025 0503 	bic.w	r5, r5, #3
 8001f2a:	3508      	adds	r5, #8
 8001f2c:	2d0c      	cmp	r5, #12
 8001f2e:	bf38      	it	cc
 8001f30:	250c      	movcc	r5, #12
 8001f32:	4629      	mov	r1, r5
 8001f34:	4638      	mov	r0, r7
 8001f36:	f7ff ffa5 	bl	8001e84 <sbrk_aligned>
 8001f3a:	3001      	adds	r0, #1
 8001f3c:	d02b      	beq.n	8001f96 <_malloc_r+0xd2>
 8001f3e:	6823      	ldr	r3, [r4, #0]
 8001f40:	442b      	add	r3, r5
 8001f42:	6023      	str	r3, [r4, #0]
 8001f44:	e00e      	b.n	8001f64 <_malloc_r+0xa0>
 8001f46:	6822      	ldr	r2, [r4, #0]
 8001f48:	1b52      	subs	r2, r2, r5
 8001f4a:	d41e      	bmi.n	8001f8a <_malloc_r+0xc6>
 8001f4c:	2a0b      	cmp	r2, #11
 8001f4e:	d916      	bls.n	8001f7e <_malloc_r+0xba>
 8001f50:	1961      	adds	r1, r4, r5
 8001f52:	42a3      	cmp	r3, r4
 8001f54:	6025      	str	r5, [r4, #0]
 8001f56:	bf18      	it	ne
 8001f58:	6059      	strne	r1, [r3, #4]
 8001f5a:	6863      	ldr	r3, [r4, #4]
 8001f5c:	bf08      	it	eq
 8001f5e:	6031      	streq	r1, [r6, #0]
 8001f60:	5162      	str	r2, [r4, r5]
 8001f62:	604b      	str	r3, [r1, #4]
 8001f64:	4638      	mov	r0, r7
 8001f66:	f104 060b 	add.w	r6, r4, #11
 8001f6a:	f000 fbbd 	bl	80026e8 <__malloc_unlock>
 8001f6e:	f026 0607 	bic.w	r6, r6, #7
 8001f72:	1d23      	adds	r3, r4, #4
 8001f74:	1af2      	subs	r2, r6, r3
 8001f76:	d0b6      	beq.n	8001ee6 <_malloc_r+0x22>
 8001f78:	1b9b      	subs	r3, r3, r6
 8001f7a:	50a3      	str	r3, [r4, r2]
 8001f7c:	e7b3      	b.n	8001ee6 <_malloc_r+0x22>
 8001f7e:	6862      	ldr	r2, [r4, #4]
 8001f80:	42a3      	cmp	r3, r4
 8001f82:	bf0c      	ite	eq
 8001f84:	6032      	streq	r2, [r6, #0]
 8001f86:	605a      	strne	r2, [r3, #4]
 8001f88:	e7ec      	b.n	8001f64 <_malloc_r+0xa0>
 8001f8a:	4623      	mov	r3, r4
 8001f8c:	6864      	ldr	r4, [r4, #4]
 8001f8e:	e7b2      	b.n	8001ef6 <_malloc_r+0x32>
 8001f90:	4634      	mov	r4, r6
 8001f92:	6876      	ldr	r6, [r6, #4]
 8001f94:	e7b9      	b.n	8001f0a <_malloc_r+0x46>
 8001f96:	230c      	movs	r3, #12
 8001f98:	603b      	str	r3, [r7, #0]
 8001f9a:	4638      	mov	r0, r7
 8001f9c:	f000 fba4 	bl	80026e8 <__malloc_unlock>
 8001fa0:	e7a1      	b.n	8001ee6 <_malloc_r+0x22>
 8001fa2:	6025      	str	r5, [r4, #0]
 8001fa4:	e7de      	b.n	8001f64 <_malloc_r+0xa0>
 8001fa6:	bf00      	nop
 8001fa8:	200000ec 	.word	0x200000ec

08001fac <__sfputc_r>:
 8001fac:	6893      	ldr	r3, [r2, #8]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	b410      	push	{r4}
 8001fb4:	6093      	str	r3, [r2, #8]
 8001fb6:	da08      	bge.n	8001fca <__sfputc_r+0x1e>
 8001fb8:	6994      	ldr	r4, [r2, #24]
 8001fba:	42a3      	cmp	r3, r4
 8001fbc:	db01      	blt.n	8001fc2 <__sfputc_r+0x16>
 8001fbe:	290a      	cmp	r1, #10
 8001fc0:	d103      	bne.n	8001fca <__sfputc_r+0x1e>
 8001fc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001fc6:	f7ff bc31 	b.w	800182c <__swbuf_r>
 8001fca:	6813      	ldr	r3, [r2, #0]
 8001fcc:	1c58      	adds	r0, r3, #1
 8001fce:	6010      	str	r0, [r2, #0]
 8001fd0:	7019      	strb	r1, [r3, #0]
 8001fd2:	4608      	mov	r0, r1
 8001fd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <__sfputs_r>:
 8001fda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fdc:	4606      	mov	r6, r0
 8001fde:	460f      	mov	r7, r1
 8001fe0:	4614      	mov	r4, r2
 8001fe2:	18d5      	adds	r5, r2, r3
 8001fe4:	42ac      	cmp	r4, r5
 8001fe6:	d101      	bne.n	8001fec <__sfputs_r+0x12>
 8001fe8:	2000      	movs	r0, #0
 8001fea:	e007      	b.n	8001ffc <__sfputs_r+0x22>
 8001fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ff0:	463a      	mov	r2, r7
 8001ff2:	4630      	mov	r0, r6
 8001ff4:	f7ff ffda 	bl	8001fac <__sfputc_r>
 8001ff8:	1c43      	adds	r3, r0, #1
 8001ffa:	d1f3      	bne.n	8001fe4 <__sfputs_r+0xa>
 8001ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002000 <_vfiprintf_r>:
 8002000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002004:	460d      	mov	r5, r1
 8002006:	b09d      	sub	sp, #116	; 0x74
 8002008:	4614      	mov	r4, r2
 800200a:	4698      	mov	r8, r3
 800200c:	4606      	mov	r6, r0
 800200e:	b118      	cbz	r0, 8002018 <_vfiprintf_r+0x18>
 8002010:	6983      	ldr	r3, [r0, #24]
 8002012:	b90b      	cbnz	r3, 8002018 <_vfiprintf_r+0x18>
 8002014:	f7ff fde4 	bl	8001be0 <__sinit>
 8002018:	4b89      	ldr	r3, [pc, #548]	; (8002240 <_vfiprintf_r+0x240>)
 800201a:	429d      	cmp	r5, r3
 800201c:	d11b      	bne.n	8002056 <_vfiprintf_r+0x56>
 800201e:	6875      	ldr	r5, [r6, #4]
 8002020:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002022:	07d9      	lsls	r1, r3, #31
 8002024:	d405      	bmi.n	8002032 <_vfiprintf_r+0x32>
 8002026:	89ab      	ldrh	r3, [r5, #12]
 8002028:	059a      	lsls	r2, r3, #22
 800202a:	d402      	bmi.n	8002032 <_vfiprintf_r+0x32>
 800202c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800202e:	f7ff fe75 	bl	8001d1c <__retarget_lock_acquire_recursive>
 8002032:	89ab      	ldrh	r3, [r5, #12]
 8002034:	071b      	lsls	r3, r3, #28
 8002036:	d501      	bpl.n	800203c <_vfiprintf_r+0x3c>
 8002038:	692b      	ldr	r3, [r5, #16]
 800203a:	b9eb      	cbnz	r3, 8002078 <_vfiprintf_r+0x78>
 800203c:	4629      	mov	r1, r5
 800203e:	4630      	mov	r0, r6
 8002040:	f7ff fc46 	bl	80018d0 <__swsetup_r>
 8002044:	b1c0      	cbz	r0, 8002078 <_vfiprintf_r+0x78>
 8002046:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002048:	07dc      	lsls	r4, r3, #31
 800204a:	d50e      	bpl.n	800206a <_vfiprintf_r+0x6a>
 800204c:	f04f 30ff 	mov.w	r0, #4294967295
 8002050:	b01d      	add	sp, #116	; 0x74
 8002052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002056:	4b7b      	ldr	r3, [pc, #492]	; (8002244 <_vfiprintf_r+0x244>)
 8002058:	429d      	cmp	r5, r3
 800205a:	d101      	bne.n	8002060 <_vfiprintf_r+0x60>
 800205c:	68b5      	ldr	r5, [r6, #8]
 800205e:	e7df      	b.n	8002020 <_vfiprintf_r+0x20>
 8002060:	4b79      	ldr	r3, [pc, #484]	; (8002248 <_vfiprintf_r+0x248>)
 8002062:	429d      	cmp	r5, r3
 8002064:	bf08      	it	eq
 8002066:	68f5      	ldreq	r5, [r6, #12]
 8002068:	e7da      	b.n	8002020 <_vfiprintf_r+0x20>
 800206a:	89ab      	ldrh	r3, [r5, #12]
 800206c:	0598      	lsls	r0, r3, #22
 800206e:	d4ed      	bmi.n	800204c <_vfiprintf_r+0x4c>
 8002070:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002072:	f7ff fe54 	bl	8001d1e <__retarget_lock_release_recursive>
 8002076:	e7e9      	b.n	800204c <_vfiprintf_r+0x4c>
 8002078:	2300      	movs	r3, #0
 800207a:	9309      	str	r3, [sp, #36]	; 0x24
 800207c:	2320      	movs	r3, #32
 800207e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002082:	f8cd 800c 	str.w	r8, [sp, #12]
 8002086:	2330      	movs	r3, #48	; 0x30
 8002088:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800224c <_vfiprintf_r+0x24c>
 800208c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002090:	f04f 0901 	mov.w	r9, #1
 8002094:	4623      	mov	r3, r4
 8002096:	469a      	mov	sl, r3
 8002098:	f813 2b01 	ldrb.w	r2, [r3], #1
 800209c:	b10a      	cbz	r2, 80020a2 <_vfiprintf_r+0xa2>
 800209e:	2a25      	cmp	r2, #37	; 0x25
 80020a0:	d1f9      	bne.n	8002096 <_vfiprintf_r+0x96>
 80020a2:	ebba 0b04 	subs.w	fp, sl, r4
 80020a6:	d00b      	beq.n	80020c0 <_vfiprintf_r+0xc0>
 80020a8:	465b      	mov	r3, fp
 80020aa:	4622      	mov	r2, r4
 80020ac:	4629      	mov	r1, r5
 80020ae:	4630      	mov	r0, r6
 80020b0:	f7ff ff93 	bl	8001fda <__sfputs_r>
 80020b4:	3001      	adds	r0, #1
 80020b6:	f000 80aa 	beq.w	800220e <_vfiprintf_r+0x20e>
 80020ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80020bc:	445a      	add	r2, fp
 80020be:	9209      	str	r2, [sp, #36]	; 0x24
 80020c0:	f89a 3000 	ldrb.w	r3, [sl]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 80a2 	beq.w	800220e <_vfiprintf_r+0x20e>
 80020ca:	2300      	movs	r3, #0
 80020cc:	f04f 32ff 	mov.w	r2, #4294967295
 80020d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80020d4:	f10a 0a01 	add.w	sl, sl, #1
 80020d8:	9304      	str	r3, [sp, #16]
 80020da:	9307      	str	r3, [sp, #28]
 80020dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80020e0:	931a      	str	r3, [sp, #104]	; 0x68
 80020e2:	4654      	mov	r4, sl
 80020e4:	2205      	movs	r2, #5
 80020e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80020ea:	4858      	ldr	r0, [pc, #352]	; (800224c <_vfiprintf_r+0x24c>)
 80020ec:	f7fe f880 	bl	80001f0 <memchr>
 80020f0:	9a04      	ldr	r2, [sp, #16]
 80020f2:	b9d8      	cbnz	r0, 800212c <_vfiprintf_r+0x12c>
 80020f4:	06d1      	lsls	r1, r2, #27
 80020f6:	bf44      	itt	mi
 80020f8:	2320      	movmi	r3, #32
 80020fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80020fe:	0713      	lsls	r3, r2, #28
 8002100:	bf44      	itt	mi
 8002102:	232b      	movmi	r3, #43	; 0x2b
 8002104:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002108:	f89a 3000 	ldrb.w	r3, [sl]
 800210c:	2b2a      	cmp	r3, #42	; 0x2a
 800210e:	d015      	beq.n	800213c <_vfiprintf_r+0x13c>
 8002110:	9a07      	ldr	r2, [sp, #28]
 8002112:	4654      	mov	r4, sl
 8002114:	2000      	movs	r0, #0
 8002116:	f04f 0c0a 	mov.w	ip, #10
 800211a:	4621      	mov	r1, r4
 800211c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002120:	3b30      	subs	r3, #48	; 0x30
 8002122:	2b09      	cmp	r3, #9
 8002124:	d94e      	bls.n	80021c4 <_vfiprintf_r+0x1c4>
 8002126:	b1b0      	cbz	r0, 8002156 <_vfiprintf_r+0x156>
 8002128:	9207      	str	r2, [sp, #28]
 800212a:	e014      	b.n	8002156 <_vfiprintf_r+0x156>
 800212c:	eba0 0308 	sub.w	r3, r0, r8
 8002130:	fa09 f303 	lsl.w	r3, r9, r3
 8002134:	4313      	orrs	r3, r2
 8002136:	9304      	str	r3, [sp, #16]
 8002138:	46a2      	mov	sl, r4
 800213a:	e7d2      	b.n	80020e2 <_vfiprintf_r+0xe2>
 800213c:	9b03      	ldr	r3, [sp, #12]
 800213e:	1d19      	adds	r1, r3, #4
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	9103      	str	r1, [sp, #12]
 8002144:	2b00      	cmp	r3, #0
 8002146:	bfbb      	ittet	lt
 8002148:	425b      	neglt	r3, r3
 800214a:	f042 0202 	orrlt.w	r2, r2, #2
 800214e:	9307      	strge	r3, [sp, #28]
 8002150:	9307      	strlt	r3, [sp, #28]
 8002152:	bfb8      	it	lt
 8002154:	9204      	strlt	r2, [sp, #16]
 8002156:	7823      	ldrb	r3, [r4, #0]
 8002158:	2b2e      	cmp	r3, #46	; 0x2e
 800215a:	d10c      	bne.n	8002176 <_vfiprintf_r+0x176>
 800215c:	7863      	ldrb	r3, [r4, #1]
 800215e:	2b2a      	cmp	r3, #42	; 0x2a
 8002160:	d135      	bne.n	80021ce <_vfiprintf_r+0x1ce>
 8002162:	9b03      	ldr	r3, [sp, #12]
 8002164:	1d1a      	adds	r2, r3, #4
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	9203      	str	r2, [sp, #12]
 800216a:	2b00      	cmp	r3, #0
 800216c:	bfb8      	it	lt
 800216e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002172:	3402      	adds	r4, #2
 8002174:	9305      	str	r3, [sp, #20]
 8002176:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800225c <_vfiprintf_r+0x25c>
 800217a:	7821      	ldrb	r1, [r4, #0]
 800217c:	2203      	movs	r2, #3
 800217e:	4650      	mov	r0, sl
 8002180:	f7fe f836 	bl	80001f0 <memchr>
 8002184:	b140      	cbz	r0, 8002198 <_vfiprintf_r+0x198>
 8002186:	2340      	movs	r3, #64	; 0x40
 8002188:	eba0 000a 	sub.w	r0, r0, sl
 800218c:	fa03 f000 	lsl.w	r0, r3, r0
 8002190:	9b04      	ldr	r3, [sp, #16]
 8002192:	4303      	orrs	r3, r0
 8002194:	3401      	adds	r4, #1
 8002196:	9304      	str	r3, [sp, #16]
 8002198:	f814 1b01 	ldrb.w	r1, [r4], #1
 800219c:	482c      	ldr	r0, [pc, #176]	; (8002250 <_vfiprintf_r+0x250>)
 800219e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80021a2:	2206      	movs	r2, #6
 80021a4:	f7fe f824 	bl	80001f0 <memchr>
 80021a8:	2800      	cmp	r0, #0
 80021aa:	d03f      	beq.n	800222c <_vfiprintf_r+0x22c>
 80021ac:	4b29      	ldr	r3, [pc, #164]	; (8002254 <_vfiprintf_r+0x254>)
 80021ae:	bb1b      	cbnz	r3, 80021f8 <_vfiprintf_r+0x1f8>
 80021b0:	9b03      	ldr	r3, [sp, #12]
 80021b2:	3307      	adds	r3, #7
 80021b4:	f023 0307 	bic.w	r3, r3, #7
 80021b8:	3308      	adds	r3, #8
 80021ba:	9303      	str	r3, [sp, #12]
 80021bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80021be:	443b      	add	r3, r7
 80021c0:	9309      	str	r3, [sp, #36]	; 0x24
 80021c2:	e767      	b.n	8002094 <_vfiprintf_r+0x94>
 80021c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80021c8:	460c      	mov	r4, r1
 80021ca:	2001      	movs	r0, #1
 80021cc:	e7a5      	b.n	800211a <_vfiprintf_r+0x11a>
 80021ce:	2300      	movs	r3, #0
 80021d0:	3401      	adds	r4, #1
 80021d2:	9305      	str	r3, [sp, #20]
 80021d4:	4619      	mov	r1, r3
 80021d6:	f04f 0c0a 	mov.w	ip, #10
 80021da:	4620      	mov	r0, r4
 80021dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80021e0:	3a30      	subs	r2, #48	; 0x30
 80021e2:	2a09      	cmp	r2, #9
 80021e4:	d903      	bls.n	80021ee <_vfiprintf_r+0x1ee>
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d0c5      	beq.n	8002176 <_vfiprintf_r+0x176>
 80021ea:	9105      	str	r1, [sp, #20]
 80021ec:	e7c3      	b.n	8002176 <_vfiprintf_r+0x176>
 80021ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80021f2:	4604      	mov	r4, r0
 80021f4:	2301      	movs	r3, #1
 80021f6:	e7f0      	b.n	80021da <_vfiprintf_r+0x1da>
 80021f8:	ab03      	add	r3, sp, #12
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	462a      	mov	r2, r5
 80021fe:	4b16      	ldr	r3, [pc, #88]	; (8002258 <_vfiprintf_r+0x258>)
 8002200:	a904      	add	r1, sp, #16
 8002202:	4630      	mov	r0, r6
 8002204:	f3af 8000 	nop.w
 8002208:	4607      	mov	r7, r0
 800220a:	1c78      	adds	r0, r7, #1
 800220c:	d1d6      	bne.n	80021bc <_vfiprintf_r+0x1bc>
 800220e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002210:	07d9      	lsls	r1, r3, #31
 8002212:	d405      	bmi.n	8002220 <_vfiprintf_r+0x220>
 8002214:	89ab      	ldrh	r3, [r5, #12]
 8002216:	059a      	lsls	r2, r3, #22
 8002218:	d402      	bmi.n	8002220 <_vfiprintf_r+0x220>
 800221a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800221c:	f7ff fd7f 	bl	8001d1e <__retarget_lock_release_recursive>
 8002220:	89ab      	ldrh	r3, [r5, #12]
 8002222:	065b      	lsls	r3, r3, #25
 8002224:	f53f af12 	bmi.w	800204c <_vfiprintf_r+0x4c>
 8002228:	9809      	ldr	r0, [sp, #36]	; 0x24
 800222a:	e711      	b.n	8002050 <_vfiprintf_r+0x50>
 800222c:	ab03      	add	r3, sp, #12
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	462a      	mov	r2, r5
 8002232:	4b09      	ldr	r3, [pc, #36]	; (8002258 <_vfiprintf_r+0x258>)
 8002234:	a904      	add	r1, sp, #16
 8002236:	4630      	mov	r0, r6
 8002238:	f000 f880 	bl	800233c <_printf_i>
 800223c:	e7e4      	b.n	8002208 <_vfiprintf_r+0x208>
 800223e:	bf00      	nop
 8002240:	080027ac 	.word	0x080027ac
 8002244:	080027cc 	.word	0x080027cc
 8002248:	0800278c 	.word	0x0800278c
 800224c:	080027ec 	.word	0x080027ec
 8002250:	080027f6 	.word	0x080027f6
 8002254:	00000000 	.word	0x00000000
 8002258:	08001fdb 	.word	0x08001fdb
 800225c:	080027f2 	.word	0x080027f2

08002260 <_printf_common>:
 8002260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002264:	4616      	mov	r6, r2
 8002266:	4699      	mov	r9, r3
 8002268:	688a      	ldr	r2, [r1, #8]
 800226a:	690b      	ldr	r3, [r1, #16]
 800226c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002270:	4293      	cmp	r3, r2
 8002272:	bfb8      	it	lt
 8002274:	4613      	movlt	r3, r2
 8002276:	6033      	str	r3, [r6, #0]
 8002278:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800227c:	4607      	mov	r7, r0
 800227e:	460c      	mov	r4, r1
 8002280:	b10a      	cbz	r2, 8002286 <_printf_common+0x26>
 8002282:	3301      	adds	r3, #1
 8002284:	6033      	str	r3, [r6, #0]
 8002286:	6823      	ldr	r3, [r4, #0]
 8002288:	0699      	lsls	r1, r3, #26
 800228a:	bf42      	ittt	mi
 800228c:	6833      	ldrmi	r3, [r6, #0]
 800228e:	3302      	addmi	r3, #2
 8002290:	6033      	strmi	r3, [r6, #0]
 8002292:	6825      	ldr	r5, [r4, #0]
 8002294:	f015 0506 	ands.w	r5, r5, #6
 8002298:	d106      	bne.n	80022a8 <_printf_common+0x48>
 800229a:	f104 0a19 	add.w	sl, r4, #25
 800229e:	68e3      	ldr	r3, [r4, #12]
 80022a0:	6832      	ldr	r2, [r6, #0]
 80022a2:	1a9b      	subs	r3, r3, r2
 80022a4:	42ab      	cmp	r3, r5
 80022a6:	dc26      	bgt.n	80022f6 <_printf_common+0x96>
 80022a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80022ac:	1e13      	subs	r3, r2, #0
 80022ae:	6822      	ldr	r2, [r4, #0]
 80022b0:	bf18      	it	ne
 80022b2:	2301      	movne	r3, #1
 80022b4:	0692      	lsls	r2, r2, #26
 80022b6:	d42b      	bmi.n	8002310 <_printf_common+0xb0>
 80022b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80022bc:	4649      	mov	r1, r9
 80022be:	4638      	mov	r0, r7
 80022c0:	47c0      	blx	r8
 80022c2:	3001      	adds	r0, #1
 80022c4:	d01e      	beq.n	8002304 <_printf_common+0xa4>
 80022c6:	6823      	ldr	r3, [r4, #0]
 80022c8:	68e5      	ldr	r5, [r4, #12]
 80022ca:	6832      	ldr	r2, [r6, #0]
 80022cc:	f003 0306 	and.w	r3, r3, #6
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	bf08      	it	eq
 80022d4:	1aad      	subeq	r5, r5, r2
 80022d6:	68a3      	ldr	r3, [r4, #8]
 80022d8:	6922      	ldr	r2, [r4, #16]
 80022da:	bf0c      	ite	eq
 80022dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80022e0:	2500      	movne	r5, #0
 80022e2:	4293      	cmp	r3, r2
 80022e4:	bfc4      	itt	gt
 80022e6:	1a9b      	subgt	r3, r3, r2
 80022e8:	18ed      	addgt	r5, r5, r3
 80022ea:	2600      	movs	r6, #0
 80022ec:	341a      	adds	r4, #26
 80022ee:	42b5      	cmp	r5, r6
 80022f0:	d11a      	bne.n	8002328 <_printf_common+0xc8>
 80022f2:	2000      	movs	r0, #0
 80022f4:	e008      	b.n	8002308 <_printf_common+0xa8>
 80022f6:	2301      	movs	r3, #1
 80022f8:	4652      	mov	r2, sl
 80022fa:	4649      	mov	r1, r9
 80022fc:	4638      	mov	r0, r7
 80022fe:	47c0      	blx	r8
 8002300:	3001      	adds	r0, #1
 8002302:	d103      	bne.n	800230c <_printf_common+0xac>
 8002304:	f04f 30ff 	mov.w	r0, #4294967295
 8002308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800230c:	3501      	adds	r5, #1
 800230e:	e7c6      	b.n	800229e <_printf_common+0x3e>
 8002310:	18e1      	adds	r1, r4, r3
 8002312:	1c5a      	adds	r2, r3, #1
 8002314:	2030      	movs	r0, #48	; 0x30
 8002316:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800231a:	4422      	add	r2, r4
 800231c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002320:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002324:	3302      	adds	r3, #2
 8002326:	e7c7      	b.n	80022b8 <_printf_common+0x58>
 8002328:	2301      	movs	r3, #1
 800232a:	4622      	mov	r2, r4
 800232c:	4649      	mov	r1, r9
 800232e:	4638      	mov	r0, r7
 8002330:	47c0      	blx	r8
 8002332:	3001      	adds	r0, #1
 8002334:	d0e6      	beq.n	8002304 <_printf_common+0xa4>
 8002336:	3601      	adds	r6, #1
 8002338:	e7d9      	b.n	80022ee <_printf_common+0x8e>
	...

0800233c <_printf_i>:
 800233c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002340:	7e0f      	ldrb	r7, [r1, #24]
 8002342:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002344:	2f78      	cmp	r7, #120	; 0x78
 8002346:	4691      	mov	r9, r2
 8002348:	4680      	mov	r8, r0
 800234a:	460c      	mov	r4, r1
 800234c:	469a      	mov	sl, r3
 800234e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002352:	d807      	bhi.n	8002364 <_printf_i+0x28>
 8002354:	2f62      	cmp	r7, #98	; 0x62
 8002356:	d80a      	bhi.n	800236e <_printf_i+0x32>
 8002358:	2f00      	cmp	r7, #0
 800235a:	f000 80d8 	beq.w	800250e <_printf_i+0x1d2>
 800235e:	2f58      	cmp	r7, #88	; 0x58
 8002360:	f000 80a3 	beq.w	80024aa <_printf_i+0x16e>
 8002364:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002368:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800236c:	e03a      	b.n	80023e4 <_printf_i+0xa8>
 800236e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002372:	2b15      	cmp	r3, #21
 8002374:	d8f6      	bhi.n	8002364 <_printf_i+0x28>
 8002376:	a101      	add	r1, pc, #4	; (adr r1, 800237c <_printf_i+0x40>)
 8002378:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800237c:	080023d5 	.word	0x080023d5
 8002380:	080023e9 	.word	0x080023e9
 8002384:	08002365 	.word	0x08002365
 8002388:	08002365 	.word	0x08002365
 800238c:	08002365 	.word	0x08002365
 8002390:	08002365 	.word	0x08002365
 8002394:	080023e9 	.word	0x080023e9
 8002398:	08002365 	.word	0x08002365
 800239c:	08002365 	.word	0x08002365
 80023a0:	08002365 	.word	0x08002365
 80023a4:	08002365 	.word	0x08002365
 80023a8:	080024f5 	.word	0x080024f5
 80023ac:	08002419 	.word	0x08002419
 80023b0:	080024d7 	.word	0x080024d7
 80023b4:	08002365 	.word	0x08002365
 80023b8:	08002365 	.word	0x08002365
 80023bc:	08002517 	.word	0x08002517
 80023c0:	08002365 	.word	0x08002365
 80023c4:	08002419 	.word	0x08002419
 80023c8:	08002365 	.word	0x08002365
 80023cc:	08002365 	.word	0x08002365
 80023d0:	080024df 	.word	0x080024df
 80023d4:	682b      	ldr	r3, [r5, #0]
 80023d6:	1d1a      	adds	r2, r3, #4
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	602a      	str	r2, [r5, #0]
 80023dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80023e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80023e4:	2301      	movs	r3, #1
 80023e6:	e0a3      	b.n	8002530 <_printf_i+0x1f4>
 80023e8:	6820      	ldr	r0, [r4, #0]
 80023ea:	6829      	ldr	r1, [r5, #0]
 80023ec:	0606      	lsls	r6, r0, #24
 80023ee:	f101 0304 	add.w	r3, r1, #4
 80023f2:	d50a      	bpl.n	800240a <_printf_i+0xce>
 80023f4:	680e      	ldr	r6, [r1, #0]
 80023f6:	602b      	str	r3, [r5, #0]
 80023f8:	2e00      	cmp	r6, #0
 80023fa:	da03      	bge.n	8002404 <_printf_i+0xc8>
 80023fc:	232d      	movs	r3, #45	; 0x2d
 80023fe:	4276      	negs	r6, r6
 8002400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002404:	485e      	ldr	r0, [pc, #376]	; (8002580 <_printf_i+0x244>)
 8002406:	230a      	movs	r3, #10
 8002408:	e019      	b.n	800243e <_printf_i+0x102>
 800240a:	680e      	ldr	r6, [r1, #0]
 800240c:	602b      	str	r3, [r5, #0]
 800240e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002412:	bf18      	it	ne
 8002414:	b236      	sxthne	r6, r6
 8002416:	e7ef      	b.n	80023f8 <_printf_i+0xbc>
 8002418:	682b      	ldr	r3, [r5, #0]
 800241a:	6820      	ldr	r0, [r4, #0]
 800241c:	1d19      	adds	r1, r3, #4
 800241e:	6029      	str	r1, [r5, #0]
 8002420:	0601      	lsls	r1, r0, #24
 8002422:	d501      	bpl.n	8002428 <_printf_i+0xec>
 8002424:	681e      	ldr	r6, [r3, #0]
 8002426:	e002      	b.n	800242e <_printf_i+0xf2>
 8002428:	0646      	lsls	r6, r0, #25
 800242a:	d5fb      	bpl.n	8002424 <_printf_i+0xe8>
 800242c:	881e      	ldrh	r6, [r3, #0]
 800242e:	4854      	ldr	r0, [pc, #336]	; (8002580 <_printf_i+0x244>)
 8002430:	2f6f      	cmp	r7, #111	; 0x6f
 8002432:	bf0c      	ite	eq
 8002434:	2308      	moveq	r3, #8
 8002436:	230a      	movne	r3, #10
 8002438:	2100      	movs	r1, #0
 800243a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800243e:	6865      	ldr	r5, [r4, #4]
 8002440:	60a5      	str	r5, [r4, #8]
 8002442:	2d00      	cmp	r5, #0
 8002444:	bfa2      	ittt	ge
 8002446:	6821      	ldrge	r1, [r4, #0]
 8002448:	f021 0104 	bicge.w	r1, r1, #4
 800244c:	6021      	strge	r1, [r4, #0]
 800244e:	b90e      	cbnz	r6, 8002454 <_printf_i+0x118>
 8002450:	2d00      	cmp	r5, #0
 8002452:	d04d      	beq.n	80024f0 <_printf_i+0x1b4>
 8002454:	4615      	mov	r5, r2
 8002456:	fbb6 f1f3 	udiv	r1, r6, r3
 800245a:	fb03 6711 	mls	r7, r3, r1, r6
 800245e:	5dc7      	ldrb	r7, [r0, r7]
 8002460:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002464:	4637      	mov	r7, r6
 8002466:	42bb      	cmp	r3, r7
 8002468:	460e      	mov	r6, r1
 800246a:	d9f4      	bls.n	8002456 <_printf_i+0x11a>
 800246c:	2b08      	cmp	r3, #8
 800246e:	d10b      	bne.n	8002488 <_printf_i+0x14c>
 8002470:	6823      	ldr	r3, [r4, #0]
 8002472:	07de      	lsls	r6, r3, #31
 8002474:	d508      	bpl.n	8002488 <_printf_i+0x14c>
 8002476:	6923      	ldr	r3, [r4, #16]
 8002478:	6861      	ldr	r1, [r4, #4]
 800247a:	4299      	cmp	r1, r3
 800247c:	bfde      	ittt	le
 800247e:	2330      	movle	r3, #48	; 0x30
 8002480:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002484:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002488:	1b52      	subs	r2, r2, r5
 800248a:	6122      	str	r2, [r4, #16]
 800248c:	f8cd a000 	str.w	sl, [sp]
 8002490:	464b      	mov	r3, r9
 8002492:	aa03      	add	r2, sp, #12
 8002494:	4621      	mov	r1, r4
 8002496:	4640      	mov	r0, r8
 8002498:	f7ff fee2 	bl	8002260 <_printf_common>
 800249c:	3001      	adds	r0, #1
 800249e:	d14c      	bne.n	800253a <_printf_i+0x1fe>
 80024a0:	f04f 30ff 	mov.w	r0, #4294967295
 80024a4:	b004      	add	sp, #16
 80024a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024aa:	4835      	ldr	r0, [pc, #212]	; (8002580 <_printf_i+0x244>)
 80024ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80024b0:	6829      	ldr	r1, [r5, #0]
 80024b2:	6823      	ldr	r3, [r4, #0]
 80024b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80024b8:	6029      	str	r1, [r5, #0]
 80024ba:	061d      	lsls	r5, r3, #24
 80024bc:	d514      	bpl.n	80024e8 <_printf_i+0x1ac>
 80024be:	07df      	lsls	r7, r3, #31
 80024c0:	bf44      	itt	mi
 80024c2:	f043 0320 	orrmi.w	r3, r3, #32
 80024c6:	6023      	strmi	r3, [r4, #0]
 80024c8:	b91e      	cbnz	r6, 80024d2 <_printf_i+0x196>
 80024ca:	6823      	ldr	r3, [r4, #0]
 80024cc:	f023 0320 	bic.w	r3, r3, #32
 80024d0:	6023      	str	r3, [r4, #0]
 80024d2:	2310      	movs	r3, #16
 80024d4:	e7b0      	b.n	8002438 <_printf_i+0xfc>
 80024d6:	6823      	ldr	r3, [r4, #0]
 80024d8:	f043 0320 	orr.w	r3, r3, #32
 80024dc:	6023      	str	r3, [r4, #0]
 80024de:	2378      	movs	r3, #120	; 0x78
 80024e0:	4828      	ldr	r0, [pc, #160]	; (8002584 <_printf_i+0x248>)
 80024e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80024e6:	e7e3      	b.n	80024b0 <_printf_i+0x174>
 80024e8:	0659      	lsls	r1, r3, #25
 80024ea:	bf48      	it	mi
 80024ec:	b2b6      	uxthmi	r6, r6
 80024ee:	e7e6      	b.n	80024be <_printf_i+0x182>
 80024f0:	4615      	mov	r5, r2
 80024f2:	e7bb      	b.n	800246c <_printf_i+0x130>
 80024f4:	682b      	ldr	r3, [r5, #0]
 80024f6:	6826      	ldr	r6, [r4, #0]
 80024f8:	6961      	ldr	r1, [r4, #20]
 80024fa:	1d18      	adds	r0, r3, #4
 80024fc:	6028      	str	r0, [r5, #0]
 80024fe:	0635      	lsls	r5, r6, #24
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	d501      	bpl.n	8002508 <_printf_i+0x1cc>
 8002504:	6019      	str	r1, [r3, #0]
 8002506:	e002      	b.n	800250e <_printf_i+0x1d2>
 8002508:	0670      	lsls	r0, r6, #25
 800250a:	d5fb      	bpl.n	8002504 <_printf_i+0x1c8>
 800250c:	8019      	strh	r1, [r3, #0]
 800250e:	2300      	movs	r3, #0
 8002510:	6123      	str	r3, [r4, #16]
 8002512:	4615      	mov	r5, r2
 8002514:	e7ba      	b.n	800248c <_printf_i+0x150>
 8002516:	682b      	ldr	r3, [r5, #0]
 8002518:	1d1a      	adds	r2, r3, #4
 800251a:	602a      	str	r2, [r5, #0]
 800251c:	681d      	ldr	r5, [r3, #0]
 800251e:	6862      	ldr	r2, [r4, #4]
 8002520:	2100      	movs	r1, #0
 8002522:	4628      	mov	r0, r5
 8002524:	f7fd fe64 	bl	80001f0 <memchr>
 8002528:	b108      	cbz	r0, 800252e <_printf_i+0x1f2>
 800252a:	1b40      	subs	r0, r0, r5
 800252c:	6060      	str	r0, [r4, #4]
 800252e:	6863      	ldr	r3, [r4, #4]
 8002530:	6123      	str	r3, [r4, #16]
 8002532:	2300      	movs	r3, #0
 8002534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002538:	e7a8      	b.n	800248c <_printf_i+0x150>
 800253a:	6923      	ldr	r3, [r4, #16]
 800253c:	462a      	mov	r2, r5
 800253e:	4649      	mov	r1, r9
 8002540:	4640      	mov	r0, r8
 8002542:	47d0      	blx	sl
 8002544:	3001      	adds	r0, #1
 8002546:	d0ab      	beq.n	80024a0 <_printf_i+0x164>
 8002548:	6823      	ldr	r3, [r4, #0]
 800254a:	079b      	lsls	r3, r3, #30
 800254c:	d413      	bmi.n	8002576 <_printf_i+0x23a>
 800254e:	68e0      	ldr	r0, [r4, #12]
 8002550:	9b03      	ldr	r3, [sp, #12]
 8002552:	4298      	cmp	r0, r3
 8002554:	bfb8      	it	lt
 8002556:	4618      	movlt	r0, r3
 8002558:	e7a4      	b.n	80024a4 <_printf_i+0x168>
 800255a:	2301      	movs	r3, #1
 800255c:	4632      	mov	r2, r6
 800255e:	4649      	mov	r1, r9
 8002560:	4640      	mov	r0, r8
 8002562:	47d0      	blx	sl
 8002564:	3001      	adds	r0, #1
 8002566:	d09b      	beq.n	80024a0 <_printf_i+0x164>
 8002568:	3501      	adds	r5, #1
 800256a:	68e3      	ldr	r3, [r4, #12]
 800256c:	9903      	ldr	r1, [sp, #12]
 800256e:	1a5b      	subs	r3, r3, r1
 8002570:	42ab      	cmp	r3, r5
 8002572:	dcf2      	bgt.n	800255a <_printf_i+0x21e>
 8002574:	e7eb      	b.n	800254e <_printf_i+0x212>
 8002576:	2500      	movs	r5, #0
 8002578:	f104 0619 	add.w	r6, r4, #25
 800257c:	e7f5      	b.n	800256a <_printf_i+0x22e>
 800257e:	bf00      	nop
 8002580:	080027fd 	.word	0x080027fd
 8002584:	0800280e 	.word	0x0800280e

08002588 <_sbrk_r>:
 8002588:	b538      	push	{r3, r4, r5, lr}
 800258a:	4d06      	ldr	r5, [pc, #24]	; (80025a4 <_sbrk_r+0x1c>)
 800258c:	2300      	movs	r3, #0
 800258e:	4604      	mov	r4, r0
 8002590:	4608      	mov	r0, r1
 8002592:	602b      	str	r3, [r5, #0]
 8002594:	f7fe f838 	bl	8000608 <_sbrk>
 8002598:	1c43      	adds	r3, r0, #1
 800259a:	d102      	bne.n	80025a2 <_sbrk_r+0x1a>
 800259c:	682b      	ldr	r3, [r5, #0]
 800259e:	b103      	cbz	r3, 80025a2 <_sbrk_r+0x1a>
 80025a0:	6023      	str	r3, [r4, #0]
 80025a2:	bd38      	pop	{r3, r4, r5, pc}
 80025a4:	200000f4 	.word	0x200000f4

080025a8 <__sread>:
 80025a8:	b510      	push	{r4, lr}
 80025aa:	460c      	mov	r4, r1
 80025ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025b0:	f000 f8a0 	bl	80026f4 <_read_r>
 80025b4:	2800      	cmp	r0, #0
 80025b6:	bfab      	itete	ge
 80025b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80025ba:	89a3      	ldrhlt	r3, [r4, #12]
 80025bc:	181b      	addge	r3, r3, r0
 80025be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80025c2:	bfac      	ite	ge
 80025c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80025c6:	81a3      	strhlt	r3, [r4, #12]
 80025c8:	bd10      	pop	{r4, pc}

080025ca <__swrite>:
 80025ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025ce:	461f      	mov	r7, r3
 80025d0:	898b      	ldrh	r3, [r1, #12]
 80025d2:	05db      	lsls	r3, r3, #23
 80025d4:	4605      	mov	r5, r0
 80025d6:	460c      	mov	r4, r1
 80025d8:	4616      	mov	r6, r2
 80025da:	d505      	bpl.n	80025e8 <__swrite+0x1e>
 80025dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025e0:	2302      	movs	r3, #2
 80025e2:	2200      	movs	r2, #0
 80025e4:	f000 f868 	bl	80026b8 <_lseek_r>
 80025e8:	89a3      	ldrh	r3, [r4, #12]
 80025ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80025ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025f2:	81a3      	strh	r3, [r4, #12]
 80025f4:	4632      	mov	r2, r6
 80025f6:	463b      	mov	r3, r7
 80025f8:	4628      	mov	r0, r5
 80025fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80025fe:	f000 b817 	b.w	8002630 <_write_r>

08002602 <__sseek>:
 8002602:	b510      	push	{r4, lr}
 8002604:	460c      	mov	r4, r1
 8002606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800260a:	f000 f855 	bl	80026b8 <_lseek_r>
 800260e:	1c43      	adds	r3, r0, #1
 8002610:	89a3      	ldrh	r3, [r4, #12]
 8002612:	bf15      	itete	ne
 8002614:	6560      	strne	r0, [r4, #84]	; 0x54
 8002616:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800261a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800261e:	81a3      	strheq	r3, [r4, #12]
 8002620:	bf18      	it	ne
 8002622:	81a3      	strhne	r3, [r4, #12]
 8002624:	bd10      	pop	{r4, pc}

08002626 <__sclose>:
 8002626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800262a:	f000 b813 	b.w	8002654 <_close_r>
	...

08002630 <_write_r>:
 8002630:	b538      	push	{r3, r4, r5, lr}
 8002632:	4d07      	ldr	r5, [pc, #28]	; (8002650 <_write_r+0x20>)
 8002634:	4604      	mov	r4, r0
 8002636:	4608      	mov	r0, r1
 8002638:	4611      	mov	r1, r2
 800263a:	2200      	movs	r2, #0
 800263c:	602a      	str	r2, [r5, #0]
 800263e:	461a      	mov	r2, r3
 8002640:	f7fd ff92 	bl	8000568 <_write>
 8002644:	1c43      	adds	r3, r0, #1
 8002646:	d102      	bne.n	800264e <_write_r+0x1e>
 8002648:	682b      	ldr	r3, [r5, #0]
 800264a:	b103      	cbz	r3, 800264e <_write_r+0x1e>
 800264c:	6023      	str	r3, [r4, #0]
 800264e:	bd38      	pop	{r3, r4, r5, pc}
 8002650:	200000f4 	.word	0x200000f4

08002654 <_close_r>:
 8002654:	b538      	push	{r3, r4, r5, lr}
 8002656:	4d06      	ldr	r5, [pc, #24]	; (8002670 <_close_r+0x1c>)
 8002658:	2300      	movs	r3, #0
 800265a:	4604      	mov	r4, r0
 800265c:	4608      	mov	r0, r1
 800265e:	602b      	str	r3, [r5, #0]
 8002660:	f7fd ff9e 	bl	80005a0 <_close>
 8002664:	1c43      	adds	r3, r0, #1
 8002666:	d102      	bne.n	800266e <_close_r+0x1a>
 8002668:	682b      	ldr	r3, [r5, #0]
 800266a:	b103      	cbz	r3, 800266e <_close_r+0x1a>
 800266c:	6023      	str	r3, [r4, #0]
 800266e:	bd38      	pop	{r3, r4, r5, pc}
 8002670:	200000f4 	.word	0x200000f4

08002674 <_fstat_r>:
 8002674:	b538      	push	{r3, r4, r5, lr}
 8002676:	4d07      	ldr	r5, [pc, #28]	; (8002694 <_fstat_r+0x20>)
 8002678:	2300      	movs	r3, #0
 800267a:	4604      	mov	r4, r0
 800267c:	4608      	mov	r0, r1
 800267e:	4611      	mov	r1, r2
 8002680:	602b      	str	r3, [r5, #0]
 8002682:	f7fd ff99 	bl	80005b8 <_fstat>
 8002686:	1c43      	adds	r3, r0, #1
 8002688:	d102      	bne.n	8002690 <_fstat_r+0x1c>
 800268a:	682b      	ldr	r3, [r5, #0]
 800268c:	b103      	cbz	r3, 8002690 <_fstat_r+0x1c>
 800268e:	6023      	str	r3, [r4, #0]
 8002690:	bd38      	pop	{r3, r4, r5, pc}
 8002692:	bf00      	nop
 8002694:	200000f4 	.word	0x200000f4

08002698 <_isatty_r>:
 8002698:	b538      	push	{r3, r4, r5, lr}
 800269a:	4d06      	ldr	r5, [pc, #24]	; (80026b4 <_isatty_r+0x1c>)
 800269c:	2300      	movs	r3, #0
 800269e:	4604      	mov	r4, r0
 80026a0:	4608      	mov	r0, r1
 80026a2:	602b      	str	r3, [r5, #0]
 80026a4:	f7fd ff98 	bl	80005d8 <_isatty>
 80026a8:	1c43      	adds	r3, r0, #1
 80026aa:	d102      	bne.n	80026b2 <_isatty_r+0x1a>
 80026ac:	682b      	ldr	r3, [r5, #0]
 80026ae:	b103      	cbz	r3, 80026b2 <_isatty_r+0x1a>
 80026b0:	6023      	str	r3, [r4, #0]
 80026b2:	bd38      	pop	{r3, r4, r5, pc}
 80026b4:	200000f4 	.word	0x200000f4

080026b8 <_lseek_r>:
 80026b8:	b538      	push	{r3, r4, r5, lr}
 80026ba:	4d07      	ldr	r5, [pc, #28]	; (80026d8 <_lseek_r+0x20>)
 80026bc:	4604      	mov	r4, r0
 80026be:	4608      	mov	r0, r1
 80026c0:	4611      	mov	r1, r2
 80026c2:	2200      	movs	r2, #0
 80026c4:	602a      	str	r2, [r5, #0]
 80026c6:	461a      	mov	r2, r3
 80026c8:	f7fd ff91 	bl	80005ee <_lseek>
 80026cc:	1c43      	adds	r3, r0, #1
 80026ce:	d102      	bne.n	80026d6 <_lseek_r+0x1e>
 80026d0:	682b      	ldr	r3, [r5, #0]
 80026d2:	b103      	cbz	r3, 80026d6 <_lseek_r+0x1e>
 80026d4:	6023      	str	r3, [r4, #0]
 80026d6:	bd38      	pop	{r3, r4, r5, pc}
 80026d8:	200000f4 	.word	0x200000f4

080026dc <__malloc_lock>:
 80026dc:	4801      	ldr	r0, [pc, #4]	; (80026e4 <__malloc_lock+0x8>)
 80026de:	f7ff bb1d 	b.w	8001d1c <__retarget_lock_acquire_recursive>
 80026e2:	bf00      	nop
 80026e4:	200000e8 	.word	0x200000e8

080026e8 <__malloc_unlock>:
 80026e8:	4801      	ldr	r0, [pc, #4]	; (80026f0 <__malloc_unlock+0x8>)
 80026ea:	f7ff bb18 	b.w	8001d1e <__retarget_lock_release_recursive>
 80026ee:	bf00      	nop
 80026f0:	200000e8 	.word	0x200000e8

080026f4 <_read_r>:
 80026f4:	b538      	push	{r3, r4, r5, lr}
 80026f6:	4d07      	ldr	r5, [pc, #28]	; (8002714 <_read_r+0x20>)
 80026f8:	4604      	mov	r4, r0
 80026fa:	4608      	mov	r0, r1
 80026fc:	4611      	mov	r1, r2
 80026fe:	2200      	movs	r2, #0
 8002700:	602a      	str	r2, [r5, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	f7fd ff13 	bl	800052e <_read>
 8002708:	1c43      	adds	r3, r0, #1
 800270a:	d102      	bne.n	8002712 <_read_r+0x1e>
 800270c:	682b      	ldr	r3, [r5, #0]
 800270e:	b103      	cbz	r3, 8002712 <_read_r+0x1e>
 8002710:	6023      	str	r3, [r4, #0]
 8002712:	bd38      	pop	{r3, r4, r5, pc}
 8002714:	200000f4 	.word	0x200000f4

08002718 <_init>:
 8002718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800271a:	bf00      	nop
 800271c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800271e:	bc08      	pop	{r3}
 8002720:	469e      	mov	lr, r3
 8002722:	4770      	bx	lr

08002724 <_fini>:
 8002724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002726:	bf00      	nop
 8002728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800272a:	bc08      	pop	{r3}
 800272c:	469e      	mov	lr, r3
 800272e:	4770      	bx	lr
