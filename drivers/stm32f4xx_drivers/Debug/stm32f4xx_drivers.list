
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a40  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08000be8  08000be8  00010be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000cb4  08000cb4  00010cbc  2**0
                  CONTENTS
  4 .ARM          00000000  08000cb4  08000cb4  00010cbc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cb4  08000cbc  00010cbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cb4  08000cb4  00010cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cb8  08000cb8  00010cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010cbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010cbc  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010cbc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000012ee  00000000  00000000  00010cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000042c  00000000  00000000  00011fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000130  00000000  00000000  00012408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000f8  00000000  00000000  00012538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000219b  00000000  00000000  00012630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001674  00000000  00000000  000147cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009013  00000000  00000000  00015e3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001ee52  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000428  00000000  00000000  0001eea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000bd0 	.word	0x08000bd0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000bd0 	.word	0x08000bd0

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <delay>:

#include<string.h>
#include "stm32f407xx.h"

void delay(void)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000 ; i ++);
 80001fe:	2300      	movs	r3, #0
 8000200:	607b      	str	r3, [r7, #4]
 8000202:	e002      	b.n	800020a <delay+0x12>
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	3301      	adds	r3, #1
 8000208:	607b      	str	r3, [r7, #4]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a04      	ldr	r2, [pc, #16]	; (8000220 <delay+0x28>)
 800020e:	4293      	cmp	r3, r2
 8000210:	d9f8      	bls.n	8000204 <delay+0xc>
}
 8000212:	bf00      	nop
 8000214:	bf00      	nop
 8000216:	370c      	adds	r7, #12
 8000218:	46bd      	mov	sp, r7
 800021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021e:	4770      	bx	lr
 8000220:	0007a11f 	.word	0x0007a11f

08000224 <SPI2_GPIOInits>:
 *

 */

void SPI2_GPIOInits(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 800022a:	4b11      	ldr	r3, [pc, #68]	; (8000270 <SPI2_GPIOInits+0x4c>)
 800022c:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800022e:	2302      	movs	r3, #2
 8000230:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000232:	2305      	movs	r3, #5
 8000234:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000236:	2300      	movs	r3, #0
 8000238:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800023a:	2300      	movs	r3, #0
 800023c:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800023e:	2302      	movs	r3, #2
 8000240:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000242:	230d      	movs	r3, #13
 8000244:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	4618      	mov	r0, r3
 800024a:	f000 f9a7 	bl	800059c <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 800024e:	230f      	movs	r3, #15
 8000250:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	4618      	mov	r0, r3
 8000256:	f000 f9a1 	bl	800059c <GPIO_Init>
	//SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
	//GPIO_Init(&SPIPins);


	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800025a:	230c      	movs	r3, #12
 800025c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	4618      	mov	r0, r3
 8000262:	f000 f99b 	bl	800059c <GPIO_Init>


}
 8000266:	bf00      	nop
 8000268:	3710      	adds	r7, #16
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	40020400 	.word	0x40020400

08000274 <SPI2_Inits>:

void SPI2_Inits(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b088      	sub	sp, #32
 8000278:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 800027a:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <SPI2_Inits+0x38>)
 800027c:	603b      	str	r3, [r7, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800027e:	2301      	movs	r3, #1
 8000280:	717b      	strb	r3, [r7, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000282:	2301      	movs	r3, #1
 8000284:	713b      	strb	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32;
 8000286:	2304      	movs	r3, #4
 8000288:	71bb      	strb	r3, [r7, #6]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 800028a:	2300      	movs	r3, #0
 800028c:	71fb      	strb	r3, [r7, #7]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800028e:	2300      	movs	r3, #0
 8000290:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000292:	2300      	movs	r3, #0
 8000294:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //Hardware slave management enabled for NSS pin
 8000296:	2300      	movs	r3, #0
 8000298:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI2handle);
 800029a:	463b      	mov	r3, r7
 800029c:	4618      	mov	r0, r3
 800029e:	f000 fb87 	bl	80009b0 <SPI_Init>
}
 80002a2:	bf00      	nop
 80002a4:	3720      	adds	r7, #32
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	40003800 	.word	0x40003800

080002b0 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 80002b6:	4b09      	ldr	r3, [pc, #36]	; (80002dc <GPIO_ButtonInit+0x2c>)
 80002b8:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 80002ba:	2300      	movs	r3, #0
 80002bc:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80002be:	2300      	movs	r3, #0
 80002c0:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002c2:	2302      	movs	r3, #2
 80002c4:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002c6:	2300      	movs	r3, #0
 80002c8:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 f965 	bl	800059c <GPIO_Init>

}
 80002d2:	bf00      	nop
 80002d4:	3710      	adds	r7, #16
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	40020000 	.word	0x40020000

080002e0 <main>:


int main(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b0b4      	sub	sp, #208	; 0xd0
 80002e4:	af00      	add	r7, sp, #0
	char user_data[] = "An Arduino Uno board is best suited for beginners who have just started using microcontrollers, on the other hand, Arduino Mega board is for enthusiasts who require a lot of I/O pins for their projects";
 80002e6:	4a21      	ldr	r2, [pc, #132]	; (800036c <main+0x8c>)
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	4611      	mov	r1, r2
 80002ec:	22ca      	movs	r2, #202	; 0xca
 80002ee:	4618      	mov	r0, r3
 80002f0:	f000 fc60 	bl	8000bb4 <memcpy>

	GPIO_ButtonInit();
 80002f4:	f7ff ffdc 	bl	80002b0 <GPIO_ButtonInit>

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 80002f8:	f7ff ff94 	bl	8000224 <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 80002fc:	f7ff ffba 	bl	8000274 <SPI2_Inits>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI2,ENABLE);
 8000300:	2101      	movs	r1, #1
 8000302:	481b      	ldr	r0, [pc, #108]	; (8000370 <main+0x90>)
 8000304:	f000 fc16 	bl	8000b34 <SPI_SSOEConfig>

	while(1)
	{
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000308:	bf00      	nop
 800030a:	2100      	movs	r1, #0
 800030c:	4819      	ldr	r0, [pc, #100]	; (8000374 <main+0x94>)
 800030e:	f000 fae1 	bl	80008d4 <GPIO_ReadFromInputPin>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d0f8      	beq.n	800030a <main+0x2a>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000318:	f7ff ff6e 	bl	80001f8 <delay>

		//enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,ENABLE);
 800031c:	2101      	movs	r1, #1
 800031e:	4814      	ldr	r0, [pc, #80]	; (8000370 <main+0x90>)
 8000320:	f000 fbd8 	bl	8000ad4 <SPI_PeripheralControl>

		//first send length information
		uint8_t dataLen = strlen(user_data);
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	4618      	mov	r0, r3
 8000328:	f7ff ff5e 	bl	80001e8 <strlen>
 800032c:	4603      	mov	r3, r0
 800032e:	b2db      	uxtb	r3, r3
 8000330:	70fb      	strb	r3, [r7, #3]
		SPI_SendData(SPI2,&dataLen,1);
 8000332:	1cfb      	adds	r3, r7, #3
 8000334:	2201      	movs	r2, #1
 8000336:	4619      	mov	r1, r3
 8000338:	480d      	ldr	r0, [pc, #52]	; (8000370 <main+0x90>)
 800033a:	f000 fb94 	bl	8000a66 <SPI_SendData>

		//to send data
		SPI_SendData(SPI2,(uint8_t*)user_data,strlen(user_data));
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	4618      	mov	r0, r3
 8000342:	f7ff ff51 	bl	80001e8 <strlen>
 8000346:	4602      	mov	r2, r0
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	4619      	mov	r1, r3
 800034c:	4808      	ldr	r0, [pc, #32]	; (8000370 <main+0x90>)
 800034e:	f000 fb8a 	bl	8000a66 <SPI_SendData>

		//lets confirm SPI is not busy
		while( SPI_GetFlagStatus(SPI2,SPI_BUSY_FLAG) );
 8000352:	bf00      	nop
 8000354:	2180      	movs	r1, #128	; 0x80
 8000356:	4806      	ldr	r0, [pc, #24]	; (8000370 <main+0x90>)
 8000358:	f000 fbd8 	bl	8000b0c <SPI_GetFlagStatus>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d1f8      	bne.n	8000354 <main+0x74>

		//Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,DISABLE);
 8000362:	2100      	movs	r1, #0
 8000364:	4802      	ldr	r0, [pc, #8]	; (8000370 <main+0x90>)
 8000366:	f000 fbb5 	bl	8000ad4 <SPI_PeripheralControl>
	{
 800036a:	e7cd      	b.n	8000308 <main+0x28>
 800036c:	08000be8 	.word	0x08000be8
 8000370:	40003800 	.word	0x40003800
 8000374:	40020000 	.word	0x40020000

08000378 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000378:	480d      	ldr	r0, [pc, #52]	; (80003b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800037a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800037c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000380:	480c      	ldr	r0, [pc, #48]	; (80003b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000382:	490d      	ldr	r1, [pc, #52]	; (80003b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000384:	4a0d      	ldr	r2, [pc, #52]	; (80003bc <LoopForever+0xe>)
  movs r3, #0
 8000386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000388:	e002      	b.n	8000390 <LoopCopyDataInit>

0800038a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800038a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800038c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800038e:	3304      	adds	r3, #4

08000390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000394:	d3f9      	bcc.n	800038a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000396:	4a0a      	ldr	r2, [pc, #40]	; (80003c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000398:	4c0a      	ldr	r4, [pc, #40]	; (80003c4 <LoopForever+0x16>)
  movs r3, #0
 800039a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800039c:	e001      	b.n	80003a2 <LoopFillZerobss>

0800039e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800039e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a0:	3204      	adds	r2, #4

080003a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a4:	d3fb      	bcc.n	800039e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003a6:	f000 fbe1 	bl	8000b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003aa:	f7ff ff99 	bl	80002e0 <main>

080003ae <LoopForever>:

LoopForever:
    b LoopForever
 80003ae:	e7fe      	b.n	80003ae <LoopForever>
  ldr   r0, =_estack
 80003b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003bc:	08000cbc 	.word	0x08000cbc
  ldr r2, =_sbss
 80003c0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003c4:	2000001c 	.word	0x2000001c

080003c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003c8:	e7fe      	b.n	80003c8 <ADC_IRQHandler>
	...

080003cc <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
 80003d4:	460b      	mov	r3, r1
 80003d6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80003d8:	78fb      	ldrb	r3, [r7, #3]
 80003da:	2b01      	cmp	r3, #1
 80003dc:	d162      	bne.n	80004a4 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	4a64      	ldr	r2, [pc, #400]	; (8000574 <GPIO_PeriClockControl+0x1a8>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d106      	bne.n	80003f4 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80003e6:	4b64      	ldr	r3, [pc, #400]	; (8000578 <GPIO_PeriClockControl+0x1ac>)
 80003e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ea:	4a63      	ldr	r2, [pc, #396]	; (8000578 <GPIO_PeriClockControl+0x1ac>)
 80003ec:	f043 0301 	orr.w	r3, r3, #1
 80003f0:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOI_PCLK_DI();
		}
	}

}
 80003f2:	e0b9      	b.n	8000568 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	4a61      	ldr	r2, [pc, #388]	; (800057c <GPIO_PeriClockControl+0x1b0>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d106      	bne.n	800040a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003fc:	4b5e      	ldr	r3, [pc, #376]	; (8000578 <GPIO_PeriClockControl+0x1ac>)
 80003fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000400:	4a5d      	ldr	r2, [pc, #372]	; (8000578 <GPIO_PeriClockControl+0x1ac>)
 8000402:	f043 0302 	orr.w	r3, r3, #2
 8000406:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000408:	e0ae      	b.n	8000568 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	4a5c      	ldr	r2, [pc, #368]	; (8000580 <GPIO_PeriClockControl+0x1b4>)
 800040e:	4293      	cmp	r3, r2
 8000410:	d106      	bne.n	8000420 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000412:	4b59      	ldr	r3, [pc, #356]	; (8000578 <GPIO_PeriClockControl+0x1ac>)
 8000414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000416:	4a58      	ldr	r2, [pc, #352]	; (8000578 <GPIO_PeriClockControl+0x1ac>)
 8000418:	f043 0304 	orr.w	r3, r3, #4
 800041c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800041e:	e0a3      	b.n	8000568 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4a58      	ldr	r2, [pc, #352]	; (8000584 <GPIO_PeriClockControl+0x1b8>)
 8000424:	4293      	cmp	r3, r2
 8000426:	d106      	bne.n	8000436 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000428:	4b53      	ldr	r3, [pc, #332]	; (8000578 <GPIO_PeriClockControl+0x1ac>)
 800042a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042c:	4a52      	ldr	r2, [pc, #328]	; (8000578 <GPIO_PeriClockControl+0x1ac>)
 800042e:	f043 0308 	orr.w	r3, r3, #8
 8000432:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000434:	e098      	b.n	8000568 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	4a53      	ldr	r2, [pc, #332]	; (8000588 <GPIO_PeriClockControl+0x1bc>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d106      	bne.n	800044c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800043e:	4b4e      	ldr	r3, [pc, #312]	; (8000578 <GPIO_PeriClockControl+0x1ac>)
 8000440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000442:	4a4d      	ldr	r2, [pc, #308]	; (8000578 <GPIO_PeriClockControl+0x1ac>)
 8000444:	f043 0310 	orr.w	r3, r3, #16
 8000448:	6313      	str	r3, [r2, #48]	; 0x30
}
 800044a:	e08d      	b.n	8000568 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	4a4f      	ldr	r2, [pc, #316]	; (800058c <GPIO_PeriClockControl+0x1c0>)
 8000450:	4293      	cmp	r3, r2
 8000452:	d106      	bne.n	8000462 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000454:	4b48      	ldr	r3, [pc, #288]	; (8000578 <GPIO_PeriClockControl+0x1ac>)
 8000456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000458:	4a47      	ldr	r2, [pc, #284]	; (8000578 <GPIO_PeriClockControl+0x1ac>)
 800045a:	f043 0320 	orr.w	r3, r3, #32
 800045e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000460:	e082      	b.n	8000568 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	4a4a      	ldr	r2, [pc, #296]	; (8000590 <GPIO_PeriClockControl+0x1c4>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d106      	bne.n	8000478 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800046a:	4b43      	ldr	r3, [pc, #268]	; (8000578 <GPIO_PeriClockControl+0x1ac>)
 800046c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046e:	4a42      	ldr	r2, [pc, #264]	; (8000578 <GPIO_PeriClockControl+0x1ac>)
 8000470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000474:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000476:	e077      	b.n	8000568 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	4a46      	ldr	r2, [pc, #280]	; (8000594 <GPIO_PeriClockControl+0x1c8>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d106      	bne.n	800048e <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000480:	4b3d      	ldr	r3, [pc, #244]	; (8000578 <GPIO_PeriClockControl+0x1ac>)
 8000482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000484:	4a3c      	ldr	r2, [pc, #240]	; (8000578 <GPIO_PeriClockControl+0x1ac>)
 8000486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800048a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800048c:	e06c      	b.n	8000568 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4a41      	ldr	r2, [pc, #260]	; (8000598 <GPIO_PeriClockControl+0x1cc>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d168      	bne.n	8000568 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000496:	4b38      	ldr	r3, [pc, #224]	; (8000578 <GPIO_PeriClockControl+0x1ac>)
 8000498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800049a:	4a37      	ldr	r2, [pc, #220]	; (8000578 <GPIO_PeriClockControl+0x1ac>)
 800049c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a2:	e061      	b.n	8000568 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	4a33      	ldr	r2, [pc, #204]	; (8000574 <GPIO_PeriClockControl+0x1a8>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d106      	bne.n	80004ba <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 80004ac:	4b32      	ldr	r3, [pc, #200]	; (8000578 <GPIO_PeriClockControl+0x1ac>)
 80004ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b0:	4a31      	ldr	r2, [pc, #196]	; (8000578 <GPIO_PeriClockControl+0x1ac>)
 80004b2:	f023 0301 	bic.w	r3, r3, #1
 80004b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004b8:	e056      	b.n	8000568 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4a2f      	ldr	r2, [pc, #188]	; (800057c <GPIO_PeriClockControl+0x1b0>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d106      	bne.n	80004d0 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 80004c2:	4b2d      	ldr	r3, [pc, #180]	; (8000578 <GPIO_PeriClockControl+0x1ac>)
 80004c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c6:	4a2c      	ldr	r2, [pc, #176]	; (8000578 <GPIO_PeriClockControl+0x1ac>)
 80004c8:	f023 0302 	bic.w	r3, r3, #2
 80004cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ce:	e04b      	b.n	8000568 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4a2b      	ldr	r2, [pc, #172]	; (8000580 <GPIO_PeriClockControl+0x1b4>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d106      	bne.n	80004e6 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 80004d8:	4b27      	ldr	r3, [pc, #156]	; (8000578 <GPIO_PeriClockControl+0x1ac>)
 80004da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004dc:	4a26      	ldr	r2, [pc, #152]	; (8000578 <GPIO_PeriClockControl+0x1ac>)
 80004de:	f023 0304 	bic.w	r3, r3, #4
 80004e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004e4:	e040      	b.n	8000568 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4a26      	ldr	r2, [pc, #152]	; (8000584 <GPIO_PeriClockControl+0x1b8>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d106      	bne.n	80004fc <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 80004ee:	4b22      	ldr	r3, [pc, #136]	; (8000578 <GPIO_PeriClockControl+0x1ac>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	4a21      	ldr	r2, [pc, #132]	; (8000578 <GPIO_PeriClockControl+0x1ac>)
 80004f4:	f023 0308 	bic.w	r3, r3, #8
 80004f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004fa:	e035      	b.n	8000568 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4a22      	ldr	r2, [pc, #136]	; (8000588 <GPIO_PeriClockControl+0x1bc>)
 8000500:	4293      	cmp	r3, r2
 8000502:	d106      	bne.n	8000512 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000504:	4b1c      	ldr	r3, [pc, #112]	; (8000578 <GPIO_PeriClockControl+0x1ac>)
 8000506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000508:	4a1b      	ldr	r2, [pc, #108]	; (8000578 <GPIO_PeriClockControl+0x1ac>)
 800050a:	f023 0310 	bic.w	r3, r3, #16
 800050e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000510:	e02a      	b.n	8000568 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	4a1d      	ldr	r2, [pc, #116]	; (800058c <GPIO_PeriClockControl+0x1c0>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d106      	bne.n	8000528 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 800051a:	4b17      	ldr	r3, [pc, #92]	; (8000578 <GPIO_PeriClockControl+0x1ac>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4a16      	ldr	r2, [pc, #88]	; (8000578 <GPIO_PeriClockControl+0x1ac>)
 8000520:	f023 0320 	bic.w	r3, r3, #32
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000526:	e01f      	b.n	8000568 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	4a19      	ldr	r2, [pc, #100]	; (8000590 <GPIO_PeriClockControl+0x1c4>)
 800052c:	4293      	cmp	r3, r2
 800052e:	d106      	bne.n	800053e <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000530:	4b11      	ldr	r3, [pc, #68]	; (8000578 <GPIO_PeriClockControl+0x1ac>)
 8000532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000534:	4a10      	ldr	r2, [pc, #64]	; (8000578 <GPIO_PeriClockControl+0x1ac>)
 8000536:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800053a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800053c:	e014      	b.n	8000568 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4a14      	ldr	r2, [pc, #80]	; (8000594 <GPIO_PeriClockControl+0x1c8>)
 8000542:	4293      	cmp	r3, r2
 8000544:	d106      	bne.n	8000554 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000546:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <GPIO_PeriClockControl+0x1ac>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	4a0b      	ldr	r2, [pc, #44]	; (8000578 <GPIO_PeriClockControl+0x1ac>)
 800054c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000552:	e009      	b.n	8000568 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	4a10      	ldr	r2, [pc, #64]	; (8000598 <GPIO_PeriClockControl+0x1cc>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d105      	bne.n	8000568 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <GPIO_PeriClockControl+0x1ac>)
 800055e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000560:	4a05      	ldr	r2, [pc, #20]	; (8000578 <GPIO_PeriClockControl+0x1ac>)
 8000562:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000566:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000568:	bf00      	nop
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr
 8000574:	40020000 	.word	0x40020000
 8000578:	40023800 	.word	0x40023800
 800057c:	40020400 	.word	0x40020400
 8000580:	40020800 	.word	0x40020800
 8000584:	40020c00 	.word	0x40020c00
 8000588:	40021000 	.word	0x40021000
 800058c:	40021400 	.word	0x40021400
 8000590:	40021800 	.word	0x40021800
 8000594:	40021c00 	.word	0x40021c00
 8000598:	40022000 	.word	0x40022000

0800059c <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2101      	movs	r1, #1
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff ff0c 	bl	80003cc <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	795b      	ldrb	r3, [r3, #5]
 80005b8:	2b03      	cmp	r3, #3
 80005ba:	d820      	bhi.n	80005fe <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	795b      	ldrb	r3, [r3, #5]
 80005c0:	461a      	mov	r2, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	791b      	ldrb	r3, [r3, #4]
 80005c6:	005b      	lsls	r3, r3, #1
 80005c8:	fa02 f303 	lsl.w	r3, r2, r3
 80005cc:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	791b      	ldrb	r3, [r3, #4]
 80005d8:	005b      	lsls	r3, r3, #1
 80005da:	2103      	movs	r1, #3
 80005dc:	fa01 f303 	lsl.w	r3, r1, r3
 80005e0:	43db      	mvns	r3, r3
 80005e2:	4619      	mov	r1, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	400a      	ands	r2, r1
 80005ea:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	6819      	ldr	r1, [r3, #0]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	697a      	ldr	r2, [r7, #20]
 80005f8:	430a      	orrs	r2, r1
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	e0cb      	b.n	8000796 <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	795b      	ldrb	r3, [r3, #5]
 8000602:	2b04      	cmp	r3, #4
 8000604:	d117      	bne.n	8000636 <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000606:	4b4b      	ldr	r3, [pc, #300]	; (8000734 <GPIO_Init+0x198>)
 8000608:	68db      	ldr	r3, [r3, #12]
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	7912      	ldrb	r2, [r2, #4]
 800060e:	4611      	mov	r1, r2
 8000610:	2201      	movs	r2, #1
 8000612:	408a      	lsls	r2, r1
 8000614:	4611      	mov	r1, r2
 8000616:	4a47      	ldr	r2, [pc, #284]	; (8000734 <GPIO_Init+0x198>)
 8000618:	430b      	orrs	r3, r1
 800061a:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800061c:	4b45      	ldr	r3, [pc, #276]	; (8000734 <GPIO_Init+0x198>)
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	7912      	ldrb	r2, [r2, #4]
 8000624:	4611      	mov	r1, r2
 8000626:	2201      	movs	r2, #1
 8000628:	408a      	lsls	r2, r1
 800062a:	43d2      	mvns	r2, r2
 800062c:	4611      	mov	r1, r2
 800062e:	4a41      	ldr	r2, [pc, #260]	; (8000734 <GPIO_Init+0x198>)
 8000630:	400b      	ands	r3, r1
 8000632:	6093      	str	r3, [r2, #8]
 8000634:	e035      	b.n	80006a2 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	795b      	ldrb	r3, [r3, #5]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d117      	bne.n	800066e <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800063e:	4b3d      	ldr	r3, [pc, #244]	; (8000734 <GPIO_Init+0x198>)
 8000640:	689b      	ldr	r3, [r3, #8]
 8000642:	687a      	ldr	r2, [r7, #4]
 8000644:	7912      	ldrb	r2, [r2, #4]
 8000646:	4611      	mov	r1, r2
 8000648:	2201      	movs	r2, #1
 800064a:	408a      	lsls	r2, r1
 800064c:	4611      	mov	r1, r2
 800064e:	4a39      	ldr	r2, [pc, #228]	; (8000734 <GPIO_Init+0x198>)
 8000650:	430b      	orrs	r3, r1
 8000652:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000654:	4b37      	ldr	r3, [pc, #220]	; (8000734 <GPIO_Init+0x198>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	687a      	ldr	r2, [r7, #4]
 800065a:	7912      	ldrb	r2, [r2, #4]
 800065c:	4611      	mov	r1, r2
 800065e:	2201      	movs	r2, #1
 8000660:	408a      	lsls	r2, r1
 8000662:	43d2      	mvns	r2, r2
 8000664:	4611      	mov	r1, r2
 8000666:	4a33      	ldr	r2, [pc, #204]	; (8000734 <GPIO_Init+0x198>)
 8000668:	400b      	ands	r3, r1
 800066a:	60d3      	str	r3, [r2, #12]
 800066c:	e019      	b.n	80006a2 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	795b      	ldrb	r3, [r3, #5]
 8000672:	2b06      	cmp	r3, #6
 8000674:	d115      	bne.n	80006a2 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000676:	4b2f      	ldr	r3, [pc, #188]	; (8000734 <GPIO_Init+0x198>)
 8000678:	689b      	ldr	r3, [r3, #8]
 800067a:	687a      	ldr	r2, [r7, #4]
 800067c:	7912      	ldrb	r2, [r2, #4]
 800067e:	4611      	mov	r1, r2
 8000680:	2201      	movs	r2, #1
 8000682:	408a      	lsls	r2, r1
 8000684:	4611      	mov	r1, r2
 8000686:	4a2b      	ldr	r2, [pc, #172]	; (8000734 <GPIO_Init+0x198>)
 8000688:	430b      	orrs	r3, r1
 800068a:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800068c:	4b29      	ldr	r3, [pc, #164]	; (8000734 <GPIO_Init+0x198>)
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	7912      	ldrb	r2, [r2, #4]
 8000694:	4611      	mov	r1, r2
 8000696:	2201      	movs	r2, #1
 8000698:	408a      	lsls	r2, r1
 800069a:	4611      	mov	r1, r2
 800069c:	4a25      	ldr	r2, [pc, #148]	; (8000734 <GPIO_Init+0x198>)
 800069e:	430b      	orrs	r3, r1
 80006a0:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	791b      	ldrb	r3, [r3, #4]
 80006a6:	089b      	lsrs	r3, r3, #2
 80006a8:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	791b      	ldrb	r3, [r3, #4]
 80006ae:	f003 0303 	and.w	r3, r3, #3
 80006b2:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a1f      	ldr	r2, [pc, #124]	; (8000738 <GPIO_Init+0x19c>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d04e      	beq.n	800075c <GPIO_Init+0x1c0>
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a1e      	ldr	r2, [pc, #120]	; (800073c <GPIO_Init+0x1a0>)
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d032      	beq.n	800072e <GPIO_Init+0x192>
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a1c      	ldr	r2, [pc, #112]	; (8000740 <GPIO_Init+0x1a4>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d02b      	beq.n	800072a <GPIO_Init+0x18e>
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a1b      	ldr	r2, [pc, #108]	; (8000744 <GPIO_Init+0x1a8>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d024      	beq.n	8000726 <GPIO_Init+0x18a>
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a19      	ldr	r2, [pc, #100]	; (8000748 <GPIO_Init+0x1ac>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d01d      	beq.n	8000722 <GPIO_Init+0x186>
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a18      	ldr	r2, [pc, #96]	; (800074c <GPIO_Init+0x1b0>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d016      	beq.n	800071e <GPIO_Init+0x182>
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a16      	ldr	r2, [pc, #88]	; (8000750 <GPIO_Init+0x1b4>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d00f      	beq.n	800071a <GPIO_Init+0x17e>
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a15      	ldr	r2, [pc, #84]	; (8000754 <GPIO_Init+0x1b8>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d008      	beq.n	8000716 <GPIO_Init+0x17a>
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a13      	ldr	r2, [pc, #76]	; (8000758 <GPIO_Init+0x1bc>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d101      	bne.n	8000712 <GPIO_Init+0x176>
 800070e:	2308      	movs	r3, #8
 8000710:	e025      	b.n	800075e <GPIO_Init+0x1c2>
 8000712:	2300      	movs	r3, #0
 8000714:	e023      	b.n	800075e <GPIO_Init+0x1c2>
 8000716:	2307      	movs	r3, #7
 8000718:	e021      	b.n	800075e <GPIO_Init+0x1c2>
 800071a:	2306      	movs	r3, #6
 800071c:	e01f      	b.n	800075e <GPIO_Init+0x1c2>
 800071e:	2305      	movs	r3, #5
 8000720:	e01d      	b.n	800075e <GPIO_Init+0x1c2>
 8000722:	2304      	movs	r3, #4
 8000724:	e01b      	b.n	800075e <GPIO_Init+0x1c2>
 8000726:	2303      	movs	r3, #3
 8000728:	e019      	b.n	800075e <GPIO_Init+0x1c2>
 800072a:	2302      	movs	r3, #2
 800072c:	e017      	b.n	800075e <GPIO_Init+0x1c2>
 800072e:	2301      	movs	r3, #1
 8000730:	e015      	b.n	800075e <GPIO_Init+0x1c2>
 8000732:	bf00      	nop
 8000734:	40013c00 	.word	0x40013c00
 8000738:	40020000 	.word	0x40020000
 800073c:	40020400 	.word	0x40020400
 8000740:	40020800 	.word	0x40020800
 8000744:	40020c00 	.word	0x40020c00
 8000748:	40021000 	.word	0x40021000
 800074c:	40021400 	.word	0x40021400
 8000750:	40021800 	.word	0x40021800
 8000754:	40021c00 	.word	0x40021c00
 8000758:	40022000 	.word	0x40022000
 800075c:	2300      	movs	r3, #0
 800075e:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000760:	4b59      	ldr	r3, [pc, #356]	; (80008c8 <GPIO_Init+0x32c>)
 8000762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000764:	4a58      	ldr	r2, [pc, #352]	; (80008c8 <GPIO_Init+0x32c>)
 8000766:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800076a:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 800076c:	7c7a      	ldrb	r2, [r7, #17]
 800076e:	7cbb      	ldrb	r3, [r7, #18]
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	fa02 f103 	lsl.w	r1, r2, r3
 8000776:	4a55      	ldr	r2, [pc, #340]	; (80008cc <GPIO_Init+0x330>)
 8000778:	7cfb      	ldrb	r3, [r7, #19]
 800077a:	3302      	adds	r3, #2
 800077c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000780:	4b53      	ldr	r3, [pc, #332]	; (80008d0 <GPIO_Init+0x334>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	7912      	ldrb	r2, [r2, #4]
 8000788:	4611      	mov	r1, r2
 800078a:	2201      	movs	r2, #1
 800078c:	408a      	lsls	r2, r1
 800078e:	4611      	mov	r1, r2
 8000790:	4a4f      	ldr	r2, [pc, #316]	; (80008d0 <GPIO_Init+0x334>)
 8000792:	430b      	orrs	r3, r1
 8000794:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	799b      	ldrb	r3, [r3, #6]
 800079a:	461a      	mov	r2, r3
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	791b      	ldrb	r3, [r3, #4]
 80007a0:	005b      	lsls	r3, r3, #1
 80007a2:	fa02 f303 	lsl.w	r3, r2, r3
 80007a6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	689a      	ldr	r2, [r3, #8]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	791b      	ldrb	r3, [r3, #4]
 80007b2:	005b      	lsls	r3, r3, #1
 80007b4:	2103      	movs	r1, #3
 80007b6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ba:	43db      	mvns	r3, r3
 80007bc:	4619      	mov	r1, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	400a      	ands	r2, r1
 80007c4:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	6899      	ldr	r1, [r3, #8]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	697a      	ldr	r2, [r7, #20]
 80007d2:	430a      	orrs	r2, r1
 80007d4:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	79db      	ldrb	r3, [r3, #7]
 80007da:	461a      	mov	r2, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	791b      	ldrb	r3, [r3, #4]
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	fa02 f303 	lsl.w	r3, r2, r3
 80007e6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	68da      	ldr	r2, [r3, #12]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	791b      	ldrb	r3, [r3, #4]
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	2103      	movs	r1, #3
 80007f6:	fa01 f303 	lsl.w	r3, r1, r3
 80007fa:	43db      	mvns	r3, r3
 80007fc:	4619      	mov	r1, r3
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	400a      	ands	r2, r1
 8000804:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	68d9      	ldr	r1, [r3, #12]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	697a      	ldr	r2, [r7, #20]
 8000812:	430a      	orrs	r2, r1
 8000814:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	7a1b      	ldrb	r3, [r3, #8]
 800081a:	461a      	mov	r2, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	791b      	ldrb	r3, [r3, #4]
 8000820:	fa02 f303 	lsl.w	r3, r2, r3
 8000824:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	685a      	ldr	r2, [r3, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	791b      	ldrb	r3, [r3, #4]
 8000830:	4619      	mov	r1, r3
 8000832:	2301      	movs	r3, #1
 8000834:	408b      	lsls	r3, r1
 8000836:	43db      	mvns	r3, r3
 8000838:	4619      	mov	r1, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	400a      	ands	r2, r1
 8000840:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	6859      	ldr	r1, [r3, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	697a      	ldr	r2, [r7, #20]
 800084e:	430a      	orrs	r2, r1
 8000850:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	795b      	ldrb	r3, [r3, #5]
 8000856:	2b02      	cmp	r3, #2
 8000858:	d131      	bne.n	80008be <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	791b      	ldrb	r3, [r3, #4]
 800085e:	08db      	lsrs	r3, r3, #3
 8000860:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	791b      	ldrb	r3, [r3, #4]
 8000866:	f003 0307 	and.w	r3, r3, #7
 800086a:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	7c3a      	ldrb	r2, [r7, #16]
 8000872:	3208      	adds	r2, #8
 8000874:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000878:	7bfb      	ldrb	r3, [r7, #15]
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	220f      	movs	r2, #15
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	43db      	mvns	r3, r3
 8000884:	4618      	mov	r0, r3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	7c3a      	ldrb	r2, [r7, #16]
 800088c:	4001      	ands	r1, r0
 800088e:	3208      	adds	r2, #8
 8000890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	7c3a      	ldrb	r2, [r7, #16]
 800089a:	3208      	adds	r2, #8
 800089c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	7a5b      	ldrb	r3, [r3, #9]
 80008a4:	461a      	mov	r2, r3
 80008a6:	7bfb      	ldrb	r3, [r7, #15]
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	4618      	mov	r0, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	7c3a      	ldrb	r2, [r7, #16]
 80008b6:	4301      	orrs	r1, r0
 80008b8:	3208      	adds	r2, #8
 80008ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 80008be:	bf00      	nop
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40013800 	.word	0x40013800
 80008d0:	40013c00 	.word	0x40013c00

080008d4 <GPIO_ReadFromInputPin>:
 *
 * @Note              -

 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	460b      	mov	r3, r1
 80008de:	70fb      	strb	r3, [r7, #3]
   uint8_t value;

   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	691a      	ldr	r2, [r3, #16]
 80008e4:	78fb      	ldrb	r3, [r7, #3]
 80008e6:	fa22 f303 	lsr.w	r3, r2, r3
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	73fb      	strb	r3, [r7, #15]

   return value;
 80008f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3714      	adds	r7, #20
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <SPI_PeriClockControl>:
 *
 * @Note              -

 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	460b      	mov	r3, r1
 800090a:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 800090c:	78fb      	ldrb	r3, [r7, #3]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d120      	bne.n	8000954 <SPI_PeriClockControl+0x54>
	{
		if(pSPIx == SPI1)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4a22      	ldr	r2, [pc, #136]	; (80009a0 <SPI_PeriClockControl+0xa0>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d106      	bne.n	8000928 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 800091a:	4b22      	ldr	r3, [pc, #136]	; (80009a4 <SPI_PeriClockControl+0xa4>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091e:	4a21      	ldr	r2, [pc, #132]	; (80009a4 <SPI_PeriClockControl+0xa4>)
 8000920:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000924:	6453      	str	r3, [r2, #68]	; 0x44
        }else if (pSPIx == SPI3)
        {
            SPI3_PCLK_DI();
        }
	}
}
 8000926:	e035      	b.n	8000994 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI2)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4a1f      	ldr	r2, [pc, #124]	; (80009a8 <SPI_PeriClockControl+0xa8>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d106      	bne.n	800093e <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000930:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <SPI_PeriClockControl+0xa4>)
 8000932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000934:	4a1b      	ldr	r2, [pc, #108]	; (80009a4 <SPI_PeriClockControl+0xa4>)
 8000936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800093a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800093c:	e02a      	b.n	8000994 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI3)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4a1a      	ldr	r2, [pc, #104]	; (80009ac <SPI_PeriClockControl+0xac>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d126      	bne.n	8000994 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 8000946:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <SPI_PeriClockControl+0xa4>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	4a16      	ldr	r2, [pc, #88]	; (80009a4 <SPI_PeriClockControl+0xa4>)
 800094c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000950:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000952:	e01f      	b.n	8000994 <SPI_PeriClockControl+0x94>
        if(pSPIx == SPI1)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a12      	ldr	r2, [pc, #72]	; (80009a0 <SPI_PeriClockControl+0xa0>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d106      	bne.n	800096a <SPI_PeriClockControl+0x6a>
            SPI1_PCLK_DI();
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <SPI_PeriClockControl+0xa4>)
 800095e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000960:	4a10      	ldr	r2, [pc, #64]	; (80009a4 <SPI_PeriClockControl+0xa4>)
 8000962:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000966:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000968:	e014      	b.n	8000994 <SPI_PeriClockControl+0x94>
        }else if (pSPIx == SPI2)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <SPI_PeriClockControl+0xa8>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d106      	bne.n	8000980 <SPI_PeriClockControl+0x80>
            SPI2_PCLK_DI();
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <SPI_PeriClockControl+0xa4>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	4a0b      	ldr	r2, [pc, #44]	; (80009a4 <SPI_PeriClockControl+0xa4>)
 8000978:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800097c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800097e:	e009      	b.n	8000994 <SPI_PeriClockControl+0x94>
        }else if (pSPIx == SPI3)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <SPI_PeriClockControl+0xac>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d105      	bne.n	8000994 <SPI_PeriClockControl+0x94>
            SPI3_PCLK_DI();
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <SPI_PeriClockControl+0xa4>)
 800098a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098c:	4a05      	ldr	r2, [pc, #20]	; (80009a4 <SPI_PeriClockControl+0xa4>)
 800098e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000992:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	40013000 	.word	0x40013000
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40003800 	.word	0x40003800
 80009ac:	40003c00 	.word	0x40003c00

080009b0 <SPI_Init>:
 *
 * @Note              -

 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]

	//peripheral clock enable

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2101      	movs	r1, #1
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff ff9e 	bl	8000900 <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR ;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	791b      	ldrb	r3, [r3, #4]
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	461a      	mov	r2, r3
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	795b      	ldrb	r3, [r3, #5]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d104      	bne.n	80009e8 <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	e014      	b.n	8000a12 <SPI_Init+0x62>

	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	795b      	ldrb	r3, [r3, #5]
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	d104      	bne.n	80009fa <SPI_Init+0x4a>
	{
		//bidi mode should be set
		tempreg |= ( 1 << SPI_CR1_BIDIMODE);
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	e00b      	b.n	8000a12 <SPI_Init+0x62>
	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	795b      	ldrb	r3, [r3, #5]
 80009fe:	2b03      	cmp	r3, #3
 8000a00:	d107      	bne.n	8000a12 <SPI_Init+0x62>
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a08:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= ( 1 << SPI_CR1_RXONLY);
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a10:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	799b      	ldrb	r3, [r3, #6]
 8000a16:	00db      	lsls	r3, r3, #3
 8000a18:	461a      	mov	r2, r3
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	60fb      	str	r3, [r7, #12]

	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	79db      	ldrb	r3, [r3, #7]
 8000a24:	02db      	lsls	r3, r3, #11
 8000a26:	461a      	mov	r2, r3
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	60fb      	str	r3, [r7, #12]

	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	7a1b      	ldrb	r3, [r3, #8]
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	461a      	mov	r2, r3
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	60fb      	str	r3, [r7, #12]

	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	7a5b      	ldrb	r3, [r3, #9]
 8000a40:	461a      	mov	r2, r3
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	7a9b      	ldrb	r3, [r3, #10]
 8000a4c:	025b      	lsls	r3, r3, #9
 8000a4e:	461a      	mov	r2, r3
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	68fa      	ldr	r2, [r7, #12]
 8000a5c:	601a      	str	r2, [r3, #0]

}
 8000a5e:	bf00      	nop
 8000a60:	3710      	adds	r7, #16
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <SPI_SendData>:
 *
 * @Note              - This is blocking call

 */
void SPI_SendData(SPI_RegDef_t *pSPIx,uint8_t *pTxBuffer, uint32_t Len)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b084      	sub	sp, #16
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	60f8      	str	r0, [r7, #12]
 8000a6e:	60b9      	str	r1, [r7, #8]
 8000a70:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8000a72:	e027      	b.n	8000ac4 <SPI_SendData+0x5e>
	{
		//1. wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG)  == FLAG_RESET );
 8000a74:	bf00      	nop
 8000a76:	2102      	movs	r1, #2
 8000a78:	68f8      	ldr	r0, [r7, #12]
 8000a7a:	f000 f847 	bl	8000b0c <SPI_GetFlagStatus>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d0f8      	beq.n	8000a76 <SPI_SendData+0x10>

		//2. check the DFF bit in CR1
		if( (pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) )
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d00e      	beq.n	8000aae <SPI_SendData+0x48>
		{
			//16 bit DFF
			//1. load the data in to the DR
			pSPIx->DR =   *((uint16_t*)pTxBuffer);
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	881b      	ldrh	r3, [r3, #0]
 8000a94:	461a      	mov	r2, r3
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	60da      	str	r2, [r3, #12]
			Len--;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	3b01      	subs	r3, #1
 8000a9e:	607b      	str	r3, [r7, #4]
			Len--;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	e00a      	b.n	8000ac4 <SPI_SendData+0x5e>
		}else
		{
			//8 bit DFF
			pSPIx->DR =   *pTxBuffer;
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	60da      	str	r2, [r3, #12]
			Len--;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3b01      	subs	r3, #1
 8000abc:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d1d4      	bne.n	8000a74 <SPI_SendData+0xe>
		}
	}

}
 8000aca:	bf00      	nop
 8000acc:	bf00      	nop
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <SPI_PeripheralControl>:
 *
 * @Note              -

 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	460b      	mov	r3, r1
 8000ade:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000ae0:	78fb      	ldrb	r3, [r7, #3]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d106      	bne.n	8000af4 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SPE);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
	}


}
 8000af2:	e005      	b.n	8000b00 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	601a      	str	r2, [r3, #0]
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <SPI_GetFlagStatus>:


}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx , uint32_t FlagName)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	689a      	ldr	r2, [r3, #8]
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000b22:	2301      	movs	r3, #1
 8000b24:	e000      	b.n	8000b28 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000b26:	2300      	movs	r3, #0
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <SPI_SSOEConfig>:
 *
 * @Note              -

 */
void  SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000b40:	78fb      	ldrb	r3, [r7, #3]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d106      	bne.n	8000b54 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (1 << SPI_CR2_SSOE);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f043 0204 	orr.w	r2, r3, #4
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	605a      	str	r2, [r3, #4]
	{
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
	}


}
 8000b52:	e005      	b.n	8000b60 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f023 0204 	bic.w	r2, r3, #4
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	605a      	str	r2, [r3, #4]
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <__libc_init_array>:
 8000b6c:	b570      	push	{r4, r5, r6, lr}
 8000b6e:	4d0d      	ldr	r5, [pc, #52]	; (8000ba4 <__libc_init_array+0x38>)
 8000b70:	4c0d      	ldr	r4, [pc, #52]	; (8000ba8 <__libc_init_array+0x3c>)
 8000b72:	1b64      	subs	r4, r4, r5
 8000b74:	10a4      	asrs	r4, r4, #2
 8000b76:	2600      	movs	r6, #0
 8000b78:	42a6      	cmp	r6, r4
 8000b7a:	d109      	bne.n	8000b90 <__libc_init_array+0x24>
 8000b7c:	4d0b      	ldr	r5, [pc, #44]	; (8000bac <__libc_init_array+0x40>)
 8000b7e:	4c0c      	ldr	r4, [pc, #48]	; (8000bb0 <__libc_init_array+0x44>)
 8000b80:	f000 f826 	bl	8000bd0 <_init>
 8000b84:	1b64      	subs	r4, r4, r5
 8000b86:	10a4      	asrs	r4, r4, #2
 8000b88:	2600      	movs	r6, #0
 8000b8a:	42a6      	cmp	r6, r4
 8000b8c:	d105      	bne.n	8000b9a <__libc_init_array+0x2e>
 8000b8e:	bd70      	pop	{r4, r5, r6, pc}
 8000b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b94:	4798      	blx	r3
 8000b96:	3601      	adds	r6, #1
 8000b98:	e7ee      	b.n	8000b78 <__libc_init_array+0xc>
 8000b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b9e:	4798      	blx	r3
 8000ba0:	3601      	adds	r6, #1
 8000ba2:	e7f2      	b.n	8000b8a <__libc_init_array+0x1e>
 8000ba4:	08000cb4 	.word	0x08000cb4
 8000ba8:	08000cb4 	.word	0x08000cb4
 8000bac:	08000cb4 	.word	0x08000cb4
 8000bb0:	08000cb8 	.word	0x08000cb8

08000bb4 <memcpy>:
 8000bb4:	440a      	add	r2, r1
 8000bb6:	4291      	cmp	r1, r2
 8000bb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bbc:	d100      	bne.n	8000bc0 <memcpy+0xc>
 8000bbe:	4770      	bx	lr
 8000bc0:	b510      	push	{r4, lr}
 8000bc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000bc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000bca:	4291      	cmp	r1, r2
 8000bcc:	d1f9      	bne.n	8000bc2 <memcpy+0xe>
 8000bce:	bd10      	pop	{r4, pc}

08000bd0 <_init>:
 8000bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bd2:	bf00      	nop
 8000bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bd6:	bc08      	pop	{r3}
 8000bd8:	469e      	mov	lr, r3
 8000bda:	4770      	bx	lr

08000bdc <_fini>:
 8000bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bde:	bf00      	nop
 8000be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000be2:	bc08      	pop	{r3}
 8000be4:	469e      	mov	lr, r3
 8000be6:	4770      	bx	lr
