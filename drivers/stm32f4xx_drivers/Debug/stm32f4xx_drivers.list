
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e00  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000fa8  08000fa8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000fa8  08000fa8  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08000fa8  08000fa8  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fa8  08000fa8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fa8  08000fa8  00010fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fac  08000fac  00010fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08000fb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00000064  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000007c  2000007c  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001524  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000518  00000000  00000000  0002156c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000168  00000000  00000000  00021a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000130  00000000  00000000  00021bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002913  00000000  00000000  00021d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001a03  00000000  00000000  00024633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a7a5  00000000  00000000  00026036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000307db  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000004fc  00000000  00000000  0003082c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000018 	.word	0x20000018
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000f90 	.word	0x08000f90

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000001c 	.word	0x2000001c
 80001e4:	08000f90 	.word	0x08000f90

080001e8 <delay>:
#define MY_ADDR 0x61;

#define SLAVE_ADDR  0x68

void delay(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e002      	b.n	80001fa <delay+0x12>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a04      	ldr	r2, [pc, #16]	; (8000210 <delay+0x28>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d9f8      	bls.n	80001f4 <delay+0xc>
}
 8000202:	bf00      	nop
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr
 8000210:	0003d08f 	.word	0x0003d08f

08000214 <I2C1_GPIOInits>:
 * PB6-> SCL
 * PB7 -> SDA
 */

void I2C1_GPIOInits(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 800021a:	4b0e      	ldr	r3, [pc, #56]	; (8000254 <I2C1_GPIOInits+0x40>)
 800021c:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800021e:	2302      	movs	r3, #2
 8000220:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000222:	2301      	movs	r3, #1
 8000224:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000226:	2301      	movs	r3, #1
 8000228:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 800022a:	2304      	movs	r3, #4
 800022c:	737b      	strb	r3, [r7, #13]
	I2CPins. GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800022e:	2302      	movs	r3, #2
 8000230:	72bb      	strb	r3, [r7, #10]

	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000232:	2306      	movs	r3, #6
 8000234:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	4618      	mov	r0, r3
 800023a:	f000 f9a1 	bl	8000580 <GPIO_Init>


	//sda
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 800023e:	2307      	movs	r3, #7
 8000240:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	4618      	mov	r0, r3
 8000246:	f000 f99b 	bl	8000580 <GPIO_Init>


}
 800024a:	bf00      	nop
 800024c:	3710      	adds	r7, #16
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40020400 	.word	0x40020400

08000258 <I2C1_Inits>:

void I2C1_Inits(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 800025c:	4b09      	ldr	r3, [pc, #36]	; (8000284 <I2C1_Inits+0x2c>)
 800025e:	4a0a      	ldr	r2, [pc, #40]	; (8000288 <I2C1_Inits+0x30>)
 8000260:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000262:	4b08      	ldr	r3, [pc, #32]	; (8000284 <I2C1_Inits+0x2c>)
 8000264:	2201      	movs	r2, #1
 8000266:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000268:	4b06      	ldr	r3, [pc, #24]	; (8000284 <I2C1_Inits+0x2c>)
 800026a:	2261      	movs	r2, #97	; 0x61
 800026c:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 800026e:	4b05      	ldr	r3, [pc, #20]	; (8000284 <I2C1_Inits+0x2c>)
 8000270:	2200      	movs	r2, #0
 8000272:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000274:	4b03      	ldr	r3, [pc, #12]	; (8000284 <I2C1_Inits+0x2c>)
 8000276:	4a05      	ldr	r2, [pc, #20]	; (800028c <I2C1_Inits+0x34>)
 8000278:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 800027a:	4802      	ldr	r0, [pc, #8]	; (8000284 <I2C1_Inits+0x2c>)
 800027c:	f000 fc8c 	bl	8000b98 <I2C_Init>

}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000034 	.word	0x20000034
 8000288:	40005400 	.word	0x40005400
 800028c:	000186a0 	.word	0x000186a0

08000290 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 8000296:	4b09      	ldr	r3, [pc, #36]	; (80002bc <GPIO_ButtonInit+0x2c>)
 8000298:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 800029a:	2300      	movs	r3, #0
 800029c:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800029e:	2300      	movs	r3, #0
 80002a0:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002a2:	2302      	movs	r3, #2
 80002a4:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002a6:	2300      	movs	r3, #0
 80002a8:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	4618      	mov	r0, r3
 80002ae:	f000 f967 	bl	8000580 <GPIO_Init>

}
 80002b2:	bf00      	nop
 80002b4:	3710      	adds	r7, #16
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	40020000 	.word	0x40020000

080002c0 <main>:


int main(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af02      	add	r7, sp, #8

	//initialise_monitor_handles();

	//printf("Application is running\n");

	GPIO_ButtonInit();
 80002c6:	f7ff ffe3 	bl	8000290 <GPIO_ButtonInit>

	//i2c pin inits
	I2C1_GPIOInits();
 80002ca:	f7ff ffa3 	bl	8000214 <I2C1_GPIOInits>

	//i2c peripheral configuration
	I2C1_Inits();
 80002ce:	f7ff ffc3 	bl	8000258 <I2C1_Inits>

	//enable the i2c peripheral
	I2C_PeripheralControl(I2C1,ENABLE);
 80002d2:	2101      	movs	r1, #1
 80002d4:	481d      	ldr	r0, [pc, #116]	; (800034c <main+0x8c>)
 80002d6:	f000 fb90 	bl	80009fa <I2C_PeripheralControl>

	//ack bit is made 1 after PE=1
	I2C_ManageAcking(I2C1,I2C_ACK_ENABLE);
 80002da:	2101      	movs	r1, #1
 80002dc:	481b      	ldr	r0, [pc, #108]	; (800034c <main+0x8c>)
 80002de:	f000 fe16 	bl	8000f0e <I2C_ManageAcking>

	while(1)
	{
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 80002e2:	bf00      	nop
 80002e4:	2100      	movs	r1, #0
 80002e6:	481a      	ldr	r0, [pc, #104]	; (8000350 <main+0x90>)
 80002e8:	f000 fae6 	bl	80008b8 <GPIO_ReadFromInputPin>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d0f8      	beq.n	80002e4 <main+0x24>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 80002f2:	f7ff ff79 	bl	80001e8 <delay>

		commandcode = 0x51;
 80002f6:	2351      	movs	r3, #81	; 0x51
 80002f8:	71fb      	strb	r3, [r7, #7]

		I2C_MasterSendData(&I2C1Handle,&commandcode,1,SLAVE_ADDR,I2C_ENABLE_SR);
 80002fa:	1df9      	adds	r1, r7, #7
 80002fc:	2301      	movs	r3, #1
 80002fe:	9300      	str	r3, [sp, #0]
 8000300:	2368      	movs	r3, #104	; 0x68
 8000302:	2201      	movs	r2, #1
 8000304:	4813      	ldr	r0, [pc, #76]	; (8000354 <main+0x94>)
 8000306:	f000 fd0d 	bl	8000d24 <I2C_MasterSendData>

		I2C_MasterReceiveData(&I2C1Handle,&len,1,SLAVE_ADDR,I2C_ENABLE_SR);
 800030a:	1db9      	adds	r1, r7, #6
 800030c:	2301      	movs	r3, #1
 800030e:	9300      	str	r3, [sp, #0]
 8000310:	2368      	movs	r3, #104	; 0x68
 8000312:	2201      	movs	r2, #1
 8000314:	480f      	ldr	r0, [pc, #60]	; (8000354 <main+0x94>)
 8000316:	f000 fd68 	bl	8000dea <I2C_MasterReceiveData>

		commandcode = 0x52;
 800031a:	2352      	movs	r3, #82	; 0x52
 800031c:	71fb      	strb	r3, [r7, #7]
		I2C_MasterSendData(&I2C1Handle,&commandcode,1,SLAVE_ADDR,I2C_ENABLE_SR);
 800031e:	1df9      	adds	r1, r7, #7
 8000320:	2301      	movs	r3, #1
 8000322:	9300      	str	r3, [sp, #0]
 8000324:	2368      	movs	r3, #104	; 0x68
 8000326:	2201      	movs	r2, #1
 8000328:	480a      	ldr	r0, [pc, #40]	; (8000354 <main+0x94>)
 800032a:	f000 fcfb 	bl	8000d24 <I2C_MasterSendData>


		I2C_MasterReceiveData(&I2C1Handle,rcv_buf,len,SLAVE_ADDR,I2C_DISABLE_SR);
 800032e:	79ba      	ldrb	r2, [r7, #6]
 8000330:	2300      	movs	r3, #0
 8000332:	9300      	str	r3, [sp, #0]
 8000334:	2368      	movs	r3, #104	; 0x68
 8000336:	4908      	ldr	r1, [pc, #32]	; (8000358 <main+0x98>)
 8000338:	4806      	ldr	r0, [pc, #24]	; (8000354 <main+0x94>)
 800033a:	f000 fd56 	bl	8000dea <I2C_MasterReceiveData>

		rcv_buf[len+1] = '\0';
 800033e:	79bb      	ldrb	r3, [r7, #6]
 8000340:	3301      	adds	r3, #1
 8000342:	4a05      	ldr	r2, [pc, #20]	; (8000358 <main+0x98>)
 8000344:	2100      	movs	r1, #0
 8000346:	54d1      	strb	r1, [r2, r3]
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000348:	e7cb      	b.n	80002e2 <main+0x22>
 800034a:	bf00      	nop
 800034c:	40005400 	.word	0x40005400
 8000350:	40020000 	.word	0x40020000
 8000354:	20000034 	.word	0x20000034
 8000358:	2000005c 	.word	0x2000005c

0800035c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800035c:	480d      	ldr	r0, [pc, #52]	; (8000394 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800035e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000360:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000364:	480c      	ldr	r0, [pc, #48]	; (8000398 <LoopForever+0x6>)
  ldr r1, =_edata
 8000366:	490d      	ldr	r1, [pc, #52]	; (800039c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000368:	4a0d      	ldr	r2, [pc, #52]	; (80003a0 <LoopForever+0xe>)
  movs r3, #0
 800036a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800036c:	e002      	b.n	8000374 <LoopCopyDataInit>

0800036e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800036e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000372:	3304      	adds	r3, #4

08000374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000378:	d3f9      	bcc.n	800036e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037a:	4a0a      	ldr	r2, [pc, #40]	; (80003a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800037c:	4c0a      	ldr	r4, [pc, #40]	; (80003a8 <LoopForever+0x16>)
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000380:	e001      	b.n	8000386 <LoopFillZerobss>

08000382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000384:	3204      	adds	r2, #4

08000386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000388:	d3fb      	bcc.n	8000382 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800038a:	f000 fddd 	bl	8000f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800038e:	f7ff ff97 	bl	80002c0 <main>

08000392 <LoopForever>:

LoopForever:
    b LoopForever
 8000392:	e7fe      	b.n	8000392 <LoopForever>
  ldr   r0, =_estack
 8000394:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800039c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80003a0:	08000fb0 	.word	0x08000fb0
  ldr r2, =_sbss
 80003a4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80003a8:	2000007c 	.word	0x2000007c

080003ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003ac:	e7fe      	b.n	80003ac <ADC_IRQHandler>
	...

080003b0 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	460b      	mov	r3, r1
 80003ba:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80003bc:	78fb      	ldrb	r3, [r7, #3]
 80003be:	2b01      	cmp	r3, #1
 80003c0:	d162      	bne.n	8000488 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4a64      	ldr	r2, [pc, #400]	; (8000558 <GPIO_PeriClockControl+0x1a8>)
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d106      	bne.n	80003d8 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80003ca:	4b64      	ldr	r3, [pc, #400]	; (800055c <GPIO_PeriClockControl+0x1ac>)
 80003cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ce:	4a63      	ldr	r2, [pc, #396]	; (800055c <GPIO_PeriClockControl+0x1ac>)
 80003d0:	f043 0301 	orr.w	r3, r3, #1
 80003d4:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOI_PCLK_DI();
		}
	}

}
 80003d6:	e0b9      	b.n	800054c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	4a61      	ldr	r2, [pc, #388]	; (8000560 <GPIO_PeriClockControl+0x1b0>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	d106      	bne.n	80003ee <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003e0:	4b5e      	ldr	r3, [pc, #376]	; (800055c <GPIO_PeriClockControl+0x1ac>)
 80003e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e4:	4a5d      	ldr	r2, [pc, #372]	; (800055c <GPIO_PeriClockControl+0x1ac>)
 80003e6:	f043 0302 	orr.w	r3, r3, #2
 80003ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ec:	e0ae      	b.n	800054c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4a5c      	ldr	r2, [pc, #368]	; (8000564 <GPIO_PeriClockControl+0x1b4>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d106      	bne.n	8000404 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003f6:	4b59      	ldr	r3, [pc, #356]	; (800055c <GPIO_PeriClockControl+0x1ac>)
 80003f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fa:	4a58      	ldr	r2, [pc, #352]	; (800055c <GPIO_PeriClockControl+0x1ac>)
 80003fc:	f043 0304 	orr.w	r3, r3, #4
 8000400:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000402:	e0a3      	b.n	800054c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	4a58      	ldr	r2, [pc, #352]	; (8000568 <GPIO_PeriClockControl+0x1b8>)
 8000408:	4293      	cmp	r3, r2
 800040a:	d106      	bne.n	800041a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800040c:	4b53      	ldr	r3, [pc, #332]	; (800055c <GPIO_PeriClockControl+0x1ac>)
 800040e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000410:	4a52      	ldr	r2, [pc, #328]	; (800055c <GPIO_PeriClockControl+0x1ac>)
 8000412:	f043 0308 	orr.w	r3, r3, #8
 8000416:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000418:	e098      	b.n	800054c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4a53      	ldr	r2, [pc, #332]	; (800056c <GPIO_PeriClockControl+0x1bc>)
 800041e:	4293      	cmp	r3, r2
 8000420:	d106      	bne.n	8000430 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000422:	4b4e      	ldr	r3, [pc, #312]	; (800055c <GPIO_PeriClockControl+0x1ac>)
 8000424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000426:	4a4d      	ldr	r2, [pc, #308]	; (800055c <GPIO_PeriClockControl+0x1ac>)
 8000428:	f043 0310 	orr.w	r3, r3, #16
 800042c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800042e:	e08d      	b.n	800054c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4a4f      	ldr	r2, [pc, #316]	; (8000570 <GPIO_PeriClockControl+0x1c0>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d106      	bne.n	8000446 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000438:	4b48      	ldr	r3, [pc, #288]	; (800055c <GPIO_PeriClockControl+0x1ac>)
 800043a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800043c:	4a47      	ldr	r2, [pc, #284]	; (800055c <GPIO_PeriClockControl+0x1ac>)
 800043e:	f043 0320 	orr.w	r3, r3, #32
 8000442:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000444:	e082      	b.n	800054c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4a4a      	ldr	r2, [pc, #296]	; (8000574 <GPIO_PeriClockControl+0x1c4>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d106      	bne.n	800045c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800044e:	4b43      	ldr	r3, [pc, #268]	; (800055c <GPIO_PeriClockControl+0x1ac>)
 8000450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000452:	4a42      	ldr	r2, [pc, #264]	; (800055c <GPIO_PeriClockControl+0x1ac>)
 8000454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000458:	6313      	str	r3, [r2, #48]	; 0x30
}
 800045a:	e077      	b.n	800054c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4a46      	ldr	r2, [pc, #280]	; (8000578 <GPIO_PeriClockControl+0x1c8>)
 8000460:	4293      	cmp	r3, r2
 8000462:	d106      	bne.n	8000472 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000464:	4b3d      	ldr	r3, [pc, #244]	; (800055c <GPIO_PeriClockControl+0x1ac>)
 8000466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000468:	4a3c      	ldr	r2, [pc, #240]	; (800055c <GPIO_PeriClockControl+0x1ac>)
 800046a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800046e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000470:	e06c      	b.n	800054c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	4a41      	ldr	r2, [pc, #260]	; (800057c <GPIO_PeriClockControl+0x1cc>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d168      	bne.n	800054c <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 800047a:	4b38      	ldr	r3, [pc, #224]	; (800055c <GPIO_PeriClockControl+0x1ac>)
 800047c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047e:	4a37      	ldr	r2, [pc, #220]	; (800055c <GPIO_PeriClockControl+0x1ac>)
 8000480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000484:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000486:	e061      	b.n	800054c <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4a33      	ldr	r2, [pc, #204]	; (8000558 <GPIO_PeriClockControl+0x1a8>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d106      	bne.n	800049e <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000490:	4b32      	ldr	r3, [pc, #200]	; (800055c <GPIO_PeriClockControl+0x1ac>)
 8000492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000494:	4a31      	ldr	r2, [pc, #196]	; (800055c <GPIO_PeriClockControl+0x1ac>)
 8000496:	f023 0301 	bic.w	r3, r3, #1
 800049a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800049c:	e056      	b.n	800054c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4a2f      	ldr	r2, [pc, #188]	; (8000560 <GPIO_PeriClockControl+0x1b0>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d106      	bne.n	80004b4 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 80004a6:	4b2d      	ldr	r3, [pc, #180]	; (800055c <GPIO_PeriClockControl+0x1ac>)
 80004a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004aa:	4a2c      	ldr	r2, [pc, #176]	; (800055c <GPIO_PeriClockControl+0x1ac>)
 80004ac:	f023 0302 	bic.w	r3, r3, #2
 80004b0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004b2:	e04b      	b.n	800054c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	4a2b      	ldr	r2, [pc, #172]	; (8000564 <GPIO_PeriClockControl+0x1b4>)
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d106      	bne.n	80004ca <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 80004bc:	4b27      	ldr	r3, [pc, #156]	; (800055c <GPIO_PeriClockControl+0x1ac>)
 80004be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c0:	4a26      	ldr	r2, [pc, #152]	; (800055c <GPIO_PeriClockControl+0x1ac>)
 80004c2:	f023 0304 	bic.w	r3, r3, #4
 80004c6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004c8:	e040      	b.n	800054c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4a26      	ldr	r2, [pc, #152]	; (8000568 <GPIO_PeriClockControl+0x1b8>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d106      	bne.n	80004e0 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 80004d2:	4b22      	ldr	r3, [pc, #136]	; (800055c <GPIO_PeriClockControl+0x1ac>)
 80004d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d6:	4a21      	ldr	r2, [pc, #132]	; (800055c <GPIO_PeriClockControl+0x1ac>)
 80004d8:	f023 0308 	bic.w	r3, r3, #8
 80004dc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004de:	e035      	b.n	800054c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	4a22      	ldr	r2, [pc, #136]	; (800056c <GPIO_PeriClockControl+0x1bc>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d106      	bne.n	80004f6 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 80004e8:	4b1c      	ldr	r3, [pc, #112]	; (800055c <GPIO_PeriClockControl+0x1ac>)
 80004ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ec:	4a1b      	ldr	r2, [pc, #108]	; (800055c <GPIO_PeriClockControl+0x1ac>)
 80004ee:	f023 0310 	bic.w	r3, r3, #16
 80004f2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004f4:	e02a      	b.n	800054c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4a1d      	ldr	r2, [pc, #116]	; (8000570 <GPIO_PeriClockControl+0x1c0>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d106      	bne.n	800050c <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 80004fe:	4b17      	ldr	r3, [pc, #92]	; (800055c <GPIO_PeriClockControl+0x1ac>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	4a16      	ldr	r2, [pc, #88]	; (800055c <GPIO_PeriClockControl+0x1ac>)
 8000504:	f023 0320 	bic.w	r3, r3, #32
 8000508:	6313      	str	r3, [r2, #48]	; 0x30
}
 800050a:	e01f      	b.n	800054c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4a19      	ldr	r2, [pc, #100]	; (8000574 <GPIO_PeriClockControl+0x1c4>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d106      	bne.n	8000522 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000514:	4b11      	ldr	r3, [pc, #68]	; (800055c <GPIO_PeriClockControl+0x1ac>)
 8000516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000518:	4a10      	ldr	r2, [pc, #64]	; (800055c <GPIO_PeriClockControl+0x1ac>)
 800051a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800051e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000520:	e014      	b.n	800054c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4a14      	ldr	r2, [pc, #80]	; (8000578 <GPIO_PeriClockControl+0x1c8>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d106      	bne.n	8000538 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 800052a:	4b0c      	ldr	r3, [pc, #48]	; (800055c <GPIO_PeriClockControl+0x1ac>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4a0b      	ldr	r2, [pc, #44]	; (800055c <GPIO_PeriClockControl+0x1ac>)
 8000530:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000536:	e009      	b.n	800054c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4a10      	ldr	r2, [pc, #64]	; (800057c <GPIO_PeriClockControl+0x1cc>)
 800053c:	4293      	cmp	r3, r2
 800053e:	d105      	bne.n	800054c <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000540:	4b06      	ldr	r3, [pc, #24]	; (800055c <GPIO_PeriClockControl+0x1ac>)
 8000542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000544:	4a05      	ldr	r2, [pc, #20]	; (800055c <GPIO_PeriClockControl+0x1ac>)
 8000546:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800054a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800054c:	bf00      	nop
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	40020000 	.word	0x40020000
 800055c:	40023800 	.word	0x40023800
 8000560:	40020400 	.word	0x40020400
 8000564:	40020800 	.word	0x40020800
 8000568:	40020c00 	.word	0x40020c00
 800056c:	40021000 	.word	0x40021000
 8000570:	40021400 	.word	0x40021400
 8000574:	40021800 	.word	0x40021800
 8000578:	40021c00 	.word	0x40021c00
 800057c:	40022000 	.word	0x40022000

08000580 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2101      	movs	r1, #1
 8000592:	4618      	mov	r0, r3
 8000594:	f7ff ff0c 	bl	80003b0 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	795b      	ldrb	r3, [r3, #5]
 800059c:	2b03      	cmp	r3, #3
 800059e:	d820      	bhi.n	80005e2 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	795b      	ldrb	r3, [r3, #5]
 80005a4:	461a      	mov	r2, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	791b      	ldrb	r3, [r3, #4]
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	fa02 f303 	lsl.w	r3, r2, r3
 80005b0:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	791b      	ldrb	r3, [r3, #4]
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	2103      	movs	r1, #3
 80005c0:	fa01 f303 	lsl.w	r3, r1, r3
 80005c4:	43db      	mvns	r3, r3
 80005c6:	4619      	mov	r1, r3
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	400a      	ands	r2, r1
 80005ce:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	6819      	ldr	r1, [r3, #0]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	697a      	ldr	r2, [r7, #20]
 80005dc:	430a      	orrs	r2, r1
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	e0cb      	b.n	800077a <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	795b      	ldrb	r3, [r3, #5]
 80005e6:	2b04      	cmp	r3, #4
 80005e8:	d117      	bne.n	800061a <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ea:	4b4b      	ldr	r3, [pc, #300]	; (8000718 <GPIO_Init+0x198>)
 80005ec:	68db      	ldr	r3, [r3, #12]
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	7912      	ldrb	r2, [r2, #4]
 80005f2:	4611      	mov	r1, r2
 80005f4:	2201      	movs	r2, #1
 80005f6:	408a      	lsls	r2, r1
 80005f8:	4611      	mov	r1, r2
 80005fa:	4a47      	ldr	r2, [pc, #284]	; (8000718 <GPIO_Init+0x198>)
 80005fc:	430b      	orrs	r3, r1
 80005fe:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000600:	4b45      	ldr	r3, [pc, #276]	; (8000718 <GPIO_Init+0x198>)
 8000602:	689b      	ldr	r3, [r3, #8]
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	7912      	ldrb	r2, [r2, #4]
 8000608:	4611      	mov	r1, r2
 800060a:	2201      	movs	r2, #1
 800060c:	408a      	lsls	r2, r1
 800060e:	43d2      	mvns	r2, r2
 8000610:	4611      	mov	r1, r2
 8000612:	4a41      	ldr	r2, [pc, #260]	; (8000718 <GPIO_Init+0x198>)
 8000614:	400b      	ands	r3, r1
 8000616:	6093      	str	r3, [r2, #8]
 8000618:	e035      	b.n	8000686 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	795b      	ldrb	r3, [r3, #5]
 800061e:	2b05      	cmp	r3, #5
 8000620:	d117      	bne.n	8000652 <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000622:	4b3d      	ldr	r3, [pc, #244]	; (8000718 <GPIO_Init+0x198>)
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	7912      	ldrb	r2, [r2, #4]
 800062a:	4611      	mov	r1, r2
 800062c:	2201      	movs	r2, #1
 800062e:	408a      	lsls	r2, r1
 8000630:	4611      	mov	r1, r2
 8000632:	4a39      	ldr	r2, [pc, #228]	; (8000718 <GPIO_Init+0x198>)
 8000634:	430b      	orrs	r3, r1
 8000636:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000638:	4b37      	ldr	r3, [pc, #220]	; (8000718 <GPIO_Init+0x198>)
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	687a      	ldr	r2, [r7, #4]
 800063e:	7912      	ldrb	r2, [r2, #4]
 8000640:	4611      	mov	r1, r2
 8000642:	2201      	movs	r2, #1
 8000644:	408a      	lsls	r2, r1
 8000646:	43d2      	mvns	r2, r2
 8000648:	4611      	mov	r1, r2
 800064a:	4a33      	ldr	r2, [pc, #204]	; (8000718 <GPIO_Init+0x198>)
 800064c:	400b      	ands	r3, r1
 800064e:	60d3      	str	r3, [r2, #12]
 8000650:	e019      	b.n	8000686 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	795b      	ldrb	r3, [r3, #5]
 8000656:	2b06      	cmp	r3, #6
 8000658:	d115      	bne.n	8000686 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800065a:	4b2f      	ldr	r3, [pc, #188]	; (8000718 <GPIO_Init+0x198>)
 800065c:	689b      	ldr	r3, [r3, #8]
 800065e:	687a      	ldr	r2, [r7, #4]
 8000660:	7912      	ldrb	r2, [r2, #4]
 8000662:	4611      	mov	r1, r2
 8000664:	2201      	movs	r2, #1
 8000666:	408a      	lsls	r2, r1
 8000668:	4611      	mov	r1, r2
 800066a:	4a2b      	ldr	r2, [pc, #172]	; (8000718 <GPIO_Init+0x198>)
 800066c:	430b      	orrs	r3, r1
 800066e:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000670:	4b29      	ldr	r3, [pc, #164]	; (8000718 <GPIO_Init+0x198>)
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	7912      	ldrb	r2, [r2, #4]
 8000678:	4611      	mov	r1, r2
 800067a:	2201      	movs	r2, #1
 800067c:	408a      	lsls	r2, r1
 800067e:	4611      	mov	r1, r2
 8000680:	4a25      	ldr	r2, [pc, #148]	; (8000718 <GPIO_Init+0x198>)
 8000682:	430b      	orrs	r3, r1
 8000684:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	791b      	ldrb	r3, [r3, #4]
 800068a:	089b      	lsrs	r3, r3, #2
 800068c:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	791b      	ldrb	r3, [r3, #4]
 8000692:	f003 0303 	and.w	r3, r3, #3
 8000696:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a1f      	ldr	r2, [pc, #124]	; (800071c <GPIO_Init+0x19c>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d04e      	beq.n	8000740 <GPIO_Init+0x1c0>
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a1e      	ldr	r2, [pc, #120]	; (8000720 <GPIO_Init+0x1a0>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d032      	beq.n	8000712 <GPIO_Init+0x192>
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a1c      	ldr	r2, [pc, #112]	; (8000724 <GPIO_Init+0x1a4>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d02b      	beq.n	800070e <GPIO_Init+0x18e>
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a1b      	ldr	r2, [pc, #108]	; (8000728 <GPIO_Init+0x1a8>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d024      	beq.n	800070a <GPIO_Init+0x18a>
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a19      	ldr	r2, [pc, #100]	; (800072c <GPIO_Init+0x1ac>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d01d      	beq.n	8000706 <GPIO_Init+0x186>
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a18      	ldr	r2, [pc, #96]	; (8000730 <GPIO_Init+0x1b0>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d016      	beq.n	8000702 <GPIO_Init+0x182>
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a16      	ldr	r2, [pc, #88]	; (8000734 <GPIO_Init+0x1b4>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d00f      	beq.n	80006fe <GPIO_Init+0x17e>
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a15      	ldr	r2, [pc, #84]	; (8000738 <GPIO_Init+0x1b8>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d008      	beq.n	80006fa <GPIO_Init+0x17a>
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a13      	ldr	r2, [pc, #76]	; (800073c <GPIO_Init+0x1bc>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d101      	bne.n	80006f6 <GPIO_Init+0x176>
 80006f2:	2308      	movs	r3, #8
 80006f4:	e025      	b.n	8000742 <GPIO_Init+0x1c2>
 80006f6:	2300      	movs	r3, #0
 80006f8:	e023      	b.n	8000742 <GPIO_Init+0x1c2>
 80006fa:	2307      	movs	r3, #7
 80006fc:	e021      	b.n	8000742 <GPIO_Init+0x1c2>
 80006fe:	2306      	movs	r3, #6
 8000700:	e01f      	b.n	8000742 <GPIO_Init+0x1c2>
 8000702:	2305      	movs	r3, #5
 8000704:	e01d      	b.n	8000742 <GPIO_Init+0x1c2>
 8000706:	2304      	movs	r3, #4
 8000708:	e01b      	b.n	8000742 <GPIO_Init+0x1c2>
 800070a:	2303      	movs	r3, #3
 800070c:	e019      	b.n	8000742 <GPIO_Init+0x1c2>
 800070e:	2302      	movs	r3, #2
 8000710:	e017      	b.n	8000742 <GPIO_Init+0x1c2>
 8000712:	2301      	movs	r3, #1
 8000714:	e015      	b.n	8000742 <GPIO_Init+0x1c2>
 8000716:	bf00      	nop
 8000718:	40013c00 	.word	0x40013c00
 800071c:	40020000 	.word	0x40020000
 8000720:	40020400 	.word	0x40020400
 8000724:	40020800 	.word	0x40020800
 8000728:	40020c00 	.word	0x40020c00
 800072c:	40021000 	.word	0x40021000
 8000730:	40021400 	.word	0x40021400
 8000734:	40021800 	.word	0x40021800
 8000738:	40021c00 	.word	0x40021c00
 800073c:	40022000 	.word	0x40022000
 8000740:	2300      	movs	r3, #0
 8000742:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000744:	4b59      	ldr	r3, [pc, #356]	; (80008ac <GPIO_Init+0x32c>)
 8000746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000748:	4a58      	ldr	r2, [pc, #352]	; (80008ac <GPIO_Init+0x32c>)
 800074a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000750:	7c7a      	ldrb	r2, [r7, #17]
 8000752:	7cbb      	ldrb	r3, [r7, #18]
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	fa02 f103 	lsl.w	r1, r2, r3
 800075a:	4a55      	ldr	r2, [pc, #340]	; (80008b0 <GPIO_Init+0x330>)
 800075c:	7cfb      	ldrb	r3, [r7, #19]
 800075e:	3302      	adds	r3, #2
 8000760:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000764:	4b53      	ldr	r3, [pc, #332]	; (80008b4 <GPIO_Init+0x334>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	7912      	ldrb	r2, [r2, #4]
 800076c:	4611      	mov	r1, r2
 800076e:	2201      	movs	r2, #1
 8000770:	408a      	lsls	r2, r1
 8000772:	4611      	mov	r1, r2
 8000774:	4a4f      	ldr	r2, [pc, #316]	; (80008b4 <GPIO_Init+0x334>)
 8000776:	430b      	orrs	r3, r1
 8000778:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	799b      	ldrb	r3, [r3, #6]
 800077e:	461a      	mov	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	791b      	ldrb	r3, [r3, #4]
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	fa02 f303 	lsl.w	r3, r2, r3
 800078a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	689a      	ldr	r2, [r3, #8]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	791b      	ldrb	r3, [r3, #4]
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	2103      	movs	r1, #3
 800079a:	fa01 f303 	lsl.w	r3, r1, r3
 800079e:	43db      	mvns	r3, r3
 80007a0:	4619      	mov	r1, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	400a      	ands	r2, r1
 80007a8:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	6899      	ldr	r1, [r3, #8]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	697a      	ldr	r2, [r7, #20]
 80007b6:	430a      	orrs	r2, r1
 80007b8:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	79db      	ldrb	r3, [r3, #7]
 80007be:	461a      	mov	r2, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	791b      	ldrb	r3, [r3, #4]
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	68da      	ldr	r2, [r3, #12]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	791b      	ldrb	r3, [r3, #4]
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	2103      	movs	r1, #3
 80007da:	fa01 f303 	lsl.w	r3, r1, r3
 80007de:	43db      	mvns	r3, r3
 80007e0:	4619      	mov	r1, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	400a      	ands	r2, r1
 80007e8:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	68d9      	ldr	r1, [r3, #12]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	697a      	ldr	r2, [r7, #20]
 80007f6:	430a      	orrs	r2, r1
 80007f8:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	7a1b      	ldrb	r3, [r3, #8]
 80007fe:	461a      	mov	r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	791b      	ldrb	r3, [r3, #4]
 8000804:	fa02 f303 	lsl.w	r3, r2, r3
 8000808:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	685a      	ldr	r2, [r3, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	791b      	ldrb	r3, [r3, #4]
 8000814:	4619      	mov	r1, r3
 8000816:	2301      	movs	r3, #1
 8000818:	408b      	lsls	r3, r1
 800081a:	43db      	mvns	r3, r3
 800081c:	4619      	mov	r1, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	400a      	ands	r2, r1
 8000824:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	6859      	ldr	r1, [r3, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	697a      	ldr	r2, [r7, #20]
 8000832:	430a      	orrs	r2, r1
 8000834:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	795b      	ldrb	r3, [r3, #5]
 800083a:	2b02      	cmp	r3, #2
 800083c:	d131      	bne.n	80008a2 <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	791b      	ldrb	r3, [r3, #4]
 8000842:	08db      	lsrs	r3, r3, #3
 8000844:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	791b      	ldrb	r3, [r3, #4]
 800084a:	f003 0307 	and.w	r3, r3, #7
 800084e:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	7c3a      	ldrb	r2, [r7, #16]
 8000856:	3208      	adds	r2, #8
 8000858:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800085c:	7bfb      	ldrb	r3, [r7, #15]
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	220f      	movs	r2, #15
 8000862:	fa02 f303 	lsl.w	r3, r2, r3
 8000866:	43db      	mvns	r3, r3
 8000868:	4618      	mov	r0, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	7c3a      	ldrb	r2, [r7, #16]
 8000870:	4001      	ands	r1, r0
 8000872:	3208      	adds	r2, #8
 8000874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	7c3a      	ldrb	r2, [r7, #16]
 800087e:	3208      	adds	r2, #8
 8000880:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	7a5b      	ldrb	r3, [r3, #9]
 8000888:	461a      	mov	r2, r3
 800088a:	7bfb      	ldrb	r3, [r7, #15]
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	4618      	mov	r0, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	7c3a      	ldrb	r2, [r7, #16]
 800089a:	4301      	orrs	r1, r0
 800089c:	3208      	adds	r2, #8
 800089e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 80008a2:	bf00      	nop
 80008a4:	3718      	adds	r7, #24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40013800 	.word	0x40013800
 80008b4:	40013c00 	.word	0x40013c00

080008b8 <GPIO_ReadFromInputPin>:
 *
 * @Note              -

 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	460b      	mov	r3, r1
 80008c2:	70fb      	strb	r3, [r7, #3]
   uint8_t value;

   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	691a      	ldr	r2, [r3, #16]
 80008c8:	78fb      	ldrb	r3, [r7, #3]
 80008ca:	fa22 f303 	lsr.w	r3, r2, r3
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	f003 0301 	and.w	r3, r3, #1
 80008d4:	73fb      	strb	r3, [r7, #15]

   return value;
 80008d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3714      	adds	r7, #20
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <I2C_GenerateStartCondition>:
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr);
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle);
void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx);

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	601a      	str	r2, [r3, #0]
}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <I2C_ExecuteAddressPhaseWrite>:

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	460b      	mov	r3, r1
 800090e:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000910:	78fb      	ldrb	r3, [r7, #3]
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 8000916:	78fb      	ldrb	r3, [r7, #3]
 8000918:	f023 0301 	bic.w	r3, r3, #1
 800091c:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 800091e:	78fa      	ldrb	r2, [r7, #3]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	611a      	str	r2, [r3, #16]
}
 8000924:	bf00      	nop
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <I2C_ExecuteAddressPhaseRead>:

static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	460b      	mov	r3, r1
 800093a:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 800093c:	78fb      	ldrb	r3, [r7, #3]
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; //SlaveAddr is Slave address + r/nw bit=1
 8000942:	78fb      	ldrb	r3, [r7, #3]
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 800094a:	78fa      	ldrb	r2, [r7, #3]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	611a      	str	r2, [r3, #16]
}
 8000950:	bf00      	nop
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <I2C_ClearADDRFlag>:


static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle )
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	2b00      	cmp	r3, #0
 8000970:	d01f      	beq.n	80009b2 <I2C_ClearADDRFlag+0x56>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	7f1b      	ldrb	r3, [r3, #28]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d112      	bne.n	80009a0 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize  == 1)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	6a1b      	ldr	r3, [r3, #32]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d11f      	bne.n	80009c2 <I2C_ClearADDRFlag+0x66>
			{
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2100      	movs	r1, #0
 8000988:	4618      	mov	r0, r3
 800098a:	f000 fac0 	bl	8000f0e <I2C_ManageAcking>

				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	695b      	ldr	r3, [r3, #20]
 8000994:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}


}
 800099e:	e010      	b.n	80009c2 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	60fb      	str	r3, [r7, #12]
}
 80009b0:	e007      	b.n	80009c2 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	695b      	ldr	r3, [r3, #20]
 80009b8:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	60fb      	str	r3, [r7, #12]
}
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <I2C_GenerateStopCondition>:

void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 80009ca:	b480      	push	{r7}
 80009cc:	b083      	sub	sp, #12
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	601a      	str	r2, [r3, #0]
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <RCC_GetPLLOutputClk>:


uint32_t RCC_GetPLLOutputClk(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0
	return 0;
 80009ee:	2300      	movs	r3, #0

}
 80009f0:	4618      	mov	r0, r3
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <I2C_PeripheralControl>:
 *
 * @Note              -

 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 80009fa:	b480      	push	{r7}
 80009fc:	b083      	sub	sp, #12
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
 8000a02:	460b      	mov	r3, r1
 8000a04:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000a06:	78fb      	ldrb	r3, [r7, #3]
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d106      	bne.n	8000a1a <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f043 0201 	orr.w	r2, r3, #1
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << 0);
	}

}
 8000a18:	e005      	b.n	8000a26 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f023 0201 	bic.w	r2, r3, #1
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	601a      	str	r2, [r3, #0]
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
	...

08000a34 <I2C_PeriClockControl>:
 *
 * @Note              -

 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000a40:	78fb      	ldrb	r3, [r7, #3]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d120      	bne.n	8000a88 <I2C_PeriClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a22      	ldr	r2, [pc, #136]	; (8000ad4 <I2C_PeriClockControl+0xa0>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d106      	bne.n	8000a5c <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8000a4e:	4b22      	ldr	r3, [pc, #136]	; (8000ad8 <I2C_PeriClockControl+0xa4>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	4a21      	ldr	r2, [pc, #132]	; (8000ad8 <I2C_PeriClockControl+0xa4>)
 8000a54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a58:	6413      	str	r3, [r2, #64]	; 0x40
        {
            I2C3_PCLK_DI();
        }
	}

}
 8000a5a:	e035      	b.n	8000ac8 <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C2)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4a1f      	ldr	r2, [pc, #124]	; (8000adc <I2C_PeriClockControl+0xa8>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d106      	bne.n	8000a72 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000a64:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <I2C_PeriClockControl+0xa4>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	4a1b      	ldr	r2, [pc, #108]	; (8000ad8 <I2C_PeriClockControl+0xa4>)
 8000a6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a6e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a70:	e02a      	b.n	8000ac8 <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C3)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a1a      	ldr	r2, [pc, #104]	; (8000ae0 <I2C_PeriClockControl+0xac>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d126      	bne.n	8000ac8 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8000a7a:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <I2C_PeriClockControl+0xa4>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	4a16      	ldr	r2, [pc, #88]	; (8000ad8 <I2C_PeriClockControl+0xa4>)
 8000a80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a84:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a86:	e01f      	b.n	8000ac8 <I2C_PeriClockControl+0x94>
        if(pI2Cx == I2C1)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <I2C_PeriClockControl+0xa0>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d106      	bne.n	8000a9e <I2C_PeriClockControl+0x6a>
            I2C1_PCLK_DI();
 8000a90:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <I2C_PeriClockControl+0xa4>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a94:	4a10      	ldr	r2, [pc, #64]	; (8000ad8 <I2C_PeriClockControl+0xa4>)
 8000a96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000a9a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a9c:	e014      	b.n	8000ac8 <I2C_PeriClockControl+0x94>
        }else if (pI2Cx == I2C2)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4a0e      	ldr	r2, [pc, #56]	; (8000adc <I2C_PeriClockControl+0xa8>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d106      	bne.n	8000ab4 <I2C_PeriClockControl+0x80>
            I2C2_PCLK_DI();
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <I2C_PeriClockControl+0xa4>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ad8 <I2C_PeriClockControl+0xa4>)
 8000aac:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000ab0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ab2:	e009      	b.n	8000ac8 <I2C_PeriClockControl+0x94>
        }else if (pI2Cx == I2C3)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <I2C_PeriClockControl+0xac>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d105      	bne.n	8000ac8 <I2C_PeriClockControl+0x94>
            I2C3_PCLK_DI();
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <I2C_PeriClockControl+0xa4>)
 8000abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac0:	4a05      	ldr	r2, [pc, #20]	; (8000ad8 <I2C_PeriClockControl+0xa4>)
 8000ac2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000ac6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	40005400 	.word	0x40005400
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40005800 	.word	0x40005800
 8000ae0:	40005c00 	.word	0x40005c00

08000ae4 <RCC_GetPCLK1Value>:

uint32_t RCC_GetPCLK1Value(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
    uint32_t pclk1, SystemClk;
    uint8_t clksrc, temp, ahbp, apb1p;

    clksrc = ((RCC->CFGR >> 2) & 0x3);
 8000aea:	4b26      	ldr	r3, [pc, #152]	; (8000b84 <RCC_GetPCLK1Value+0xa0>)
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	089b      	lsrs	r3, r3, #2
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	f003 0303 	and.w	r3, r3, #3
 8000af6:	727b      	strb	r3, [r7, #9]

    //Get the system clock source
    if(clksrc == 0)
 8000af8:	7a7b      	ldrb	r3, [r7, #9]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d102      	bne.n	8000b04 <RCC_GetPCLK1Value+0x20>
    {
        //HSI oscillator used as system clock
        SystemClk = 16000000; //16MHz
 8000afe:	4b22      	ldr	r3, [pc, #136]	; (8000b88 <RCC_GetPCLK1Value+0xa4>)
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	e00b      	b.n	8000b1c <RCC_GetPCLK1Value+0x38>
    }else if(clksrc == 1)
 8000b04:	7a7b      	ldrb	r3, [r7, #9]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d102      	bne.n	8000b10 <RCC_GetPCLK1Value+0x2c>
    {
        //HSE oscillator used as system clock
        SystemClk = 8000000; //8MHz
 8000b0a:	4b20      	ldr	r3, [pc, #128]	; (8000b8c <RCC_GetPCLK1Value+0xa8>)
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	e005      	b.n	8000b1c <RCC_GetPCLK1Value+0x38>
    }else if(clksrc == 2)
 8000b10:	7a7b      	ldrb	r3, [r7, #9]
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d102      	bne.n	8000b1c <RCC_GetPCLK1Value+0x38>
    {
        //PLL used as system clock
        SystemClk = RCC_GetPLLOutputClk();
 8000b16:	f7ff ff68 	bl	80009ea <RCC_GetPLLOutputClk>
 8000b1a:	60f8      	str	r0, [r7, #12]
    }

    //for ahb
    temp = ((RCC->CFGR >> 4) & 0xF);
 8000b1c:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <RCC_GetPCLK1Value+0xa0>)
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	091b      	lsrs	r3, r3, #4
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	f003 030f 	and.w	r3, r3, #15
 8000b28:	723b      	strb	r3, [r7, #8]

    if(temp < 8)
 8000b2a:	7a3b      	ldrb	r3, [r7, #8]
 8000b2c:	2b07      	cmp	r3, #7
 8000b2e:	d802      	bhi.n	8000b36 <RCC_GetPCLK1Value+0x52>
    {
        ahbp = 1;
 8000b30:	2301      	movs	r3, #1
 8000b32:	72fb      	strb	r3, [r7, #11]
 8000b34:	e005      	b.n	8000b42 <RCC_GetPCLK1Value+0x5e>
    }else
    {
        ahbp = AHB_PreScaler[temp - 8];
 8000b36:	7a3b      	ldrb	r3, [r7, #8]
 8000b38:	3b08      	subs	r3, #8
 8000b3a:	4a15      	ldr	r2, [pc, #84]	; (8000b90 <RCC_GetPCLK1Value+0xac>)
 8000b3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b40:	72fb      	strb	r3, [r7, #11]
    }

    //for apb1
    temp = ((RCC->CFGR >> 10) & 0x7);
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <RCC_GetPCLK1Value+0xa0>)
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	0a9b      	lsrs	r3, r3, #10
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	723b      	strb	r3, [r7, #8]
    if(temp < 4)
 8000b50:	7a3b      	ldrb	r3, [r7, #8]
 8000b52:	2b03      	cmp	r3, #3
 8000b54:	d802      	bhi.n	8000b5c <RCC_GetPCLK1Value+0x78>
    {
        apb1p = 1;
 8000b56:	2301      	movs	r3, #1
 8000b58:	72bb      	strb	r3, [r7, #10]
 8000b5a:	e005      	b.n	8000b68 <RCC_GetPCLK1Value+0x84>
    }else
    {
        apb1p = APB1_PreScaler[temp - 4];
 8000b5c:	7a3b      	ldrb	r3, [r7, #8]
 8000b5e:	3b04      	subs	r3, #4
 8000b60:	4a0c      	ldr	r2, [pc, #48]	; (8000b94 <RCC_GetPCLK1Value+0xb0>)
 8000b62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b66:	72bb      	strb	r3, [r7, #10]
    }

    //calculate pclk1
    pclk1 = (SystemClk / ahbp) /apb1p;
 8000b68:	7afb      	ldrb	r3, [r7, #11]
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b70:	7abb      	ldrb	r3, [r7, #10]
 8000b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b76:	607b      	str	r3, [r7, #4]


    return pclk1;
 8000b78:	687b      	ldr	r3, [r7, #4]
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800
 8000b88:	00f42400 	.word	0x00f42400
 8000b8c:	007a1200 	.word	0x007a1200
 8000b90:	20000000 	.word	0x20000000
 8000b94:	20000010 	.word	0x20000010

08000b98 <I2C_Init>:
 *
 * @Note              -

 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2101      	movs	r1, #1
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff ff42 	bl	8000a34 <I2C_PeriClockControl>

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	7a5b      	ldrb	r3, [r3, #9]
 8000bb4:	029b      	lsls	r3, r3, #10
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U ;
 8000bca:	f7ff ff8b 	bl	8000ae4 <RCC_GetPCLK1Value>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	4a47      	ldr	r2, [pc, #284]	; (8000cf0 <I2C_Init+0x158>)
 8000bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd6:	0c9b      	lsrs	r3, r3, #18
 8000bd8:	68fa      	ldr	r2, [r7, #12]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000be8:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	7a1b      	ldrb	r3, [r3, #8]
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c02:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	68fa      	ldr	r2, [r7, #12]
 8000c0a:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	4a36      	ldr	r2, [pc, #216]	; (8000cf4 <I2C_Init+0x15c>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d80f      	bhi.n	8000c3e <I2C_Init+0xa6>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000c1e:	f7ff ff61 	bl	8000ae4 <RCC_GetPCLK1Value>
 8000c22:	4602      	mov	r2, r0
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2e:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000c30:	897b      	ldrh	r3, [r7, #10]
 8000c32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c36:	68fa      	ldr	r2, [r7, #12]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	e02d      	b.n	8000c9a <I2C_Init+0x102>
	}else
	{
		//mode is fast mode
		tempreg |= ( 1 << 15);
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c44:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	7a9b      	ldrb	r3, [r3, #10]
 8000c4a:	039b      	lsls	r3, r3, #14
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	7a9b      	ldrb	r3, [r3, #10]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d10b      	bne.n	8000c74 <I2C_Init+0xdc>
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000c5c:	f7ff ff42 	bl	8000ae4 <RCC_GetPCLK1Value>
 8000c60:	4601      	mov	r1, r0
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	685a      	ldr	r2, [r3, #4]
 8000c66:	4613      	mov	r3, r2
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	4413      	add	r3, r2
 8000c6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c70:	817b      	strh	r3, [r7, #10]
 8000c72:	e00c      	b.n	8000c8e <I2C_Init+0xf6>
		}else
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000c74:	f7ff ff36 	bl	8000ae4 <RCC_GetPCLK1Value>
 8000c78:	4601      	mov	r1, r0
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	685a      	ldr	r2, [r3, #4]
 8000c7e:	4613      	mov	r3, r2
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	4413      	add	r3, r2
 8000c84:	009a      	lsls	r2, r3, #2
 8000c86:	4413      	add	r3, r2
 8000c88:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c8c:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000c8e:	897b      	ldrh	r3, [r7, #10]
 8000c90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c94:	68fa      	ldr	r2, [r7, #12]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	4a13      	ldr	r2, [pc, #76]	; (8000cf4 <I2C_Init+0x15c>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d809      	bhi.n	8000cc0 <I2C_Init+0x128>
	{
		//mode is standard mode

		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 8000cac:	f7ff ff1a 	bl	8000ae4 <RCC_GetPCLK1Value>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	4a0f      	ldr	r2, [pc, #60]	; (8000cf0 <I2C_Init+0x158>)
 8000cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb8:	0c9b      	lsrs	r3, r3, #18
 8000cba:	3301      	adds	r3, #1
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	e00d      	b.n	8000cdc <I2C_Init+0x144>

	}else
	{
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 8000cc0:	f7ff ff10 	bl	8000ae4 <RCC_GetPCLK1Value>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000cca:	fb02 f303 	mul.w	r3, r2, r3
 8000cce:	0a5b      	lsrs	r3, r3, #9
 8000cd0:	4a09      	ldr	r2, [pc, #36]	; (8000cf8 <I2C_Init+0x160>)
 8000cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd6:	09db      	lsrs	r3, r3, #7
 8000cd8:	3301      	adds	r3, #1
 8000cda:	60fb      	str	r3, [r7, #12]

	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000ce6:	621a      	str	r2, [r3, #32]

}
 8000ce8:	bf00      	nop
 8000cea:	3710      	adds	r7, #16
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	431bde83 	.word	0x431bde83
 8000cf4:	000186a0 	.word	0x000186a0
 8000cf8:	00044b83 	.word	0x00044b83

08000cfc <I2C_GetFlagStatus>:
    }

}

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	695a      	ldr	r2, [r3, #20]
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e000      	b.n	8000d18 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000d16:	2300      	movs	r3, #0
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <I2C_MasterSendData>:



void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
 8000d30:	70fb      	strb	r3, [r7, #3]
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fdd4 	bl	80008e4 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   );
 8000d3c:	bf00      	nop
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2101      	movs	r1, #1
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff ffd9 	bl	8000cfc <I2C_GetFlagStatus>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d0f6      	beq.n	8000d3e <I2C_MasterSendData+0x1a>

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,SlaveAddr);
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	78fa      	ldrb	r2, [r7, #3]
 8000d56:	4611      	mov	r1, r2
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fdd3 	bl	8000904 <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in teh SR1
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 8000d5e:	bf00      	nop
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2102      	movs	r1, #2
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ffc8 	bl	8000cfc <I2C_GetFlagStatus>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d0f6      	beq.n	8000d60 <I2C_MasterSendData+0x3c>

	//5. clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 8000d72:	68f8      	ldr	r0, [r7, #12]
 8000d74:	f7ff fdf2 	bl	800095c <I2C_ClearADDRFlag>

	//6. send the data until len becomes 0

	while(Len > 0)
 8000d78:	e014      	b.n	8000da4 <I2C_MasterSendData+0x80>
	{
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) ); //Wait till TXE is set
 8000d7a:	bf00      	nop
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2180      	movs	r1, #128	; 0x80
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff ffba 	bl	8000cfc <I2C_GetFlagStatus>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d0f6      	beq.n	8000d7c <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	781a      	ldrb	r2, [r3, #0]
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	60bb      	str	r3, [r7, #8]
		Len--;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3b01      	subs	r3, #1
 8000da2:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d1e7      	bne.n	8000d7a <I2C_MasterSendData+0x56>

	//7. when Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) );
 8000daa:	bf00      	nop
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2180      	movs	r1, #128	; 0x80
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff ffa2 	bl	8000cfc <I2C_GetFlagStatus>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d0f6      	beq.n	8000dac <I2C_MasterSendData+0x88>

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_BTF) );
 8000dbe:	bf00      	nop
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2104      	movs	r1, #4
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff ff98 	bl	8000cfc <I2C_GetFlagStatus>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d0f6      	beq.n	8000dc0 <I2C_MasterSendData+0x9c>


	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR )
 8000dd2:	7e3b      	ldrb	r3, [r7, #24]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d104      	bne.n	8000de2 <I2C_MasterSendData+0xbe>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff fdf4 	bl	80009ca <I2C_GenerateStopCondition>

}
 8000de2:	bf00      	nop
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <I2C_MasterReceiveData>:

void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle,uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b086      	sub	sp, #24
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	60f8      	str	r0, [r7, #12]
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	4611      	mov	r1, r2
 8000df6:	461a      	mov	r2, r3
 8000df8:	460b      	mov	r3, r1
 8000dfa:	71fb      	strb	r3, [r7, #7]
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	71bb      	strb	r3, [r7, #6]

	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff fd6d 	bl	80008e4 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   );
 8000e0a:	bf00      	nop
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2101      	movs	r1, #1
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff ff72 	bl	8000cfc <I2C_GetFlagStatus>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d0f6      	beq.n	8000e0c <I2C_MasterReceiveData+0x22>

	//3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits )
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx,SlaveAddr);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	79ba      	ldrb	r2, [r7, #6]
 8000e24:	4611      	mov	r1, r2
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fd82 	bl	8000930 <I2C_ExecuteAddressPhaseRead>

	//4. wait until address phase is completed by checking the ADDR flag in teh SR1
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 8000e2c:	bf00      	nop
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2102      	movs	r1, #2
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff61 	bl	8000cfc <I2C_GetFlagStatus>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d0f6      	beq.n	8000e2e <I2C_MasterReceiveData+0x44>


	//procedure to read only 1 byte from slave
	if(Len == 1)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d121      	bne.n	8000e8a <I2C_MasterReceiveData+0xa0>
	{
		//Disable Acking
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f000 f85e 	bl	8000f0e <I2C_ManageAcking>


		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8000e52:	68f8      	ldr	r0, [r7, #12]
 8000e54:	f7ff fd82 	bl	800095c <I2C_ClearADDRFlag>

		//wait until  RXNE becomes 1
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE) );
 8000e58:	bf00      	nop
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2140      	movs	r1, #64	; 0x40
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff4b 	bl	8000cfc <I2C_GetFlagStatus>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d0f6      	beq.n	8000e5a <I2C_MasterReceiveData+0x70>

		//generate STOP condition
		if(Sr == I2C_DISABLE_SR )
 8000e6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d104      	bne.n	8000e7e <I2C_MasterReceiveData+0x94>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fda6 	bl	80009ca <I2C_GenerateStopCondition>

		//read data in to buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	691b      	ldr	r3, [r3, #16]
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	701a      	strb	r2, [r3, #0]

	}


    //procedure to read data from slave when Len > 1
	if(Len > 1)
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d930      	bls.n	8000ef2 <I2C_MasterReceiveData+0x108>
	{
		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8000e90:	68f8      	ldr	r0, [r7, #12]
 8000e92:	f7ff fd63 	bl	800095c <I2C_ClearADDRFlag>

		//read the data until Len becomes zero
		for ( uint32_t i = Len ; i > 0 ; i--)
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	617b      	str	r3, [r7, #20]
 8000e9a:	e027      	b.n	8000eec <I2C_MasterReceiveData+0x102>
		{
			//wait until RXNE becomes 1
			while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE) );
 8000e9c:	bf00      	nop
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2140      	movs	r1, #64	; 0x40
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff29 	bl	8000cfc <I2C_GetFlagStatus>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d0f6      	beq.n	8000e9e <I2C_MasterReceiveData+0xb4>

			if(i == 2) //if last 2 bytes are remaining
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d10e      	bne.n	8000ed4 <I2C_MasterReceiveData+0xea>
			{
				//Disable Acking
				I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 f826 	bl	8000f0e <I2C_ManageAcking>

				//generate STOP condition
				if(Sr == I2C_DISABLE_SR )
 8000ec2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d104      	bne.n	8000ed4 <I2C_MasterReceiveData+0xea>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fd7b 	bl	80009ca <I2C_GenerateStopCondition>

			}

			//read the data from data register in to buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	691b      	ldr	r3, [r3, #16]
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	701a      	strb	r2, [r3, #0]

			//increment the buffer address
			pRxBuffer++;
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	60bb      	str	r3, [r7, #8]
		for ( uint32_t i = Len ; i > 0 ; i--)
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d1d4      	bne.n	8000e9c <I2C_MasterReceiveData+0xb2>
		}

	}

	//re-enable ACKing
	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	7a5b      	ldrb	r3, [r3, #9]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d105      	bne.n	8000f06 <I2C_MasterReceiveData+0x11c>
	{
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_ENABLE);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2101      	movs	r1, #1
 8000f00:	4618      	mov	r0, r3
 8000f02:	f000 f804 	bl	8000f0e <I2C_ManageAcking>
	}

}
 8000f06:	bf00      	nop
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <I2C_ManageAcking>:


void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	b083      	sub	sp, #12
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
 8000f16:	460b      	mov	r3, r1
 8000f18:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 8000f1a:	78fb      	ldrb	r3, [r7, #3]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d106      	bne.n	8000f2e <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 8000f2c:	e005      	b.n	8000f3a <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	601a      	str	r2, [r3, #0]
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
	...

08000f48 <__libc_init_array>:
 8000f48:	b570      	push	{r4, r5, r6, lr}
 8000f4a:	4d0d      	ldr	r5, [pc, #52]	; (8000f80 <__libc_init_array+0x38>)
 8000f4c:	4c0d      	ldr	r4, [pc, #52]	; (8000f84 <__libc_init_array+0x3c>)
 8000f4e:	1b64      	subs	r4, r4, r5
 8000f50:	10a4      	asrs	r4, r4, #2
 8000f52:	2600      	movs	r6, #0
 8000f54:	42a6      	cmp	r6, r4
 8000f56:	d109      	bne.n	8000f6c <__libc_init_array+0x24>
 8000f58:	4d0b      	ldr	r5, [pc, #44]	; (8000f88 <__libc_init_array+0x40>)
 8000f5a:	4c0c      	ldr	r4, [pc, #48]	; (8000f8c <__libc_init_array+0x44>)
 8000f5c:	f000 f818 	bl	8000f90 <_init>
 8000f60:	1b64      	subs	r4, r4, r5
 8000f62:	10a4      	asrs	r4, r4, #2
 8000f64:	2600      	movs	r6, #0
 8000f66:	42a6      	cmp	r6, r4
 8000f68:	d105      	bne.n	8000f76 <__libc_init_array+0x2e>
 8000f6a:	bd70      	pop	{r4, r5, r6, pc}
 8000f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f70:	4798      	blx	r3
 8000f72:	3601      	adds	r6, #1
 8000f74:	e7ee      	b.n	8000f54 <__libc_init_array+0xc>
 8000f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f7a:	4798      	blx	r3
 8000f7c:	3601      	adds	r6, #1
 8000f7e:	e7f2      	b.n	8000f66 <__libc_init_array+0x1e>
 8000f80:	08000fa8 	.word	0x08000fa8
 8000f84:	08000fa8 	.word	0x08000fa8
 8000f88:	08000fa8 	.word	0x08000fa8
 8000f8c:	08000fac 	.word	0x08000fac

08000f90 <_init>:
 8000f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f92:	bf00      	nop
 8000f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f96:	bc08      	pop	{r3}
 8000f98:	469e      	mov	lr, r3
 8000f9a:	4770      	bx	lr

08000f9c <_fini>:
 8000f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f9e:	bf00      	nop
 8000fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fa2:	bc08      	pop	{r3}
 8000fa4:	469e      	mov	lr, r3
 8000fa6:	4770      	bx	lr
