
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000958  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000b00  08000b00  00010b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b0c  08000b0c  00010b14  2**0
                  CONTENTS
  4 .ARM          00000000  08000b0c  08000b0c  00010b14  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b0c  08000b14  00010b14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b0c  08000b0c  00010b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b10  08000b10  00010b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010b14  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010b14  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000122c  00000000  00000000  00010b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003e5  00000000  00000000  00011d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000118  00000000  00000000  00012158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000e0  00000000  00000000  00012270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000219b  00000000  00000000  00012350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000015d8  00000000  00000000  000144eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008fd7  00000000  00000000  00015ac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001ea9a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000038c  00000000  00000000  0001eaec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000ae8 	.word	0x08000ae8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000ae8 	.word	0x08000ae8

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <SPI2_GPIOInits>:

#include<string.h>
#include "stm32f407xx.h"

void SPI2_GPIOInits(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 80001fe:	4b0e      	ldr	r3, [pc, #56]	; (8000238 <SPI2_GPIOInits+0x40>)
 8000200:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000202:	2302      	movs	r3, #2
 8000204:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000206:	2305      	movs	r3, #5
 8000208:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800020a:	2300      	movs	r3, #0
 800020c:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800020e:	2300      	movs	r3, #0
 8000210:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000212:	2302      	movs	r3, #2
 8000214:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000216:	230d      	movs	r3, #13
 8000218:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	4618      	mov	r0, r3
 800021e:	f000 f96d 	bl	80004fc <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000222:	230f      	movs	r3, #15
 8000224:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f000 f967 	bl	80004fc <GPIO_Init>
	//NSS
	//SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
	//GPIO_Init(&SPIPins);


}
 800022e:	bf00      	nop
 8000230:	3710      	adds	r7, #16
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	40020400 	.word	0x40020400

0800023c <SPI2_Inits>:

void SPI2_Inits(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b088      	sub	sp, #32
 8000240:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 8000242:	4b0c      	ldr	r3, [pc, #48]	; (8000274 <SPI2_Inits+0x38>)
 8000244:	603b      	str	r3, [r7, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000246:	2301      	movs	r3, #1
 8000248:	717b      	strb	r3, [r7, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800024a:	2301      	movs	r3, #1
 800024c:	713b      	strb	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2;//generates sclk of 8MHz
 800024e:	2300      	movs	r3, #0
 8000250:	71bb      	strb	r3, [r7, #6]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000252:	2300      	movs	r3, #0
 8000254:	71fb      	strb	r3, [r7, #7]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_HIGH;
 8000256:	2301      	movs	r3, #1
 8000258:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 800025a:	2300      	movs	r3, #0
 800025c:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_EN; //software slave management enabled for NSS pin
 800025e:	2301      	movs	r3, #1
 8000260:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI2handle);
 8000262:	463b      	mov	r3, r7
 8000264:	4618      	mov	r0, r3
 8000266:	f000 fb3d 	bl	80008e4 <SPI_Init>
}
 800026a:	bf00      	nop
 800026c:	3720      	adds	r7, #32
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	40003800 	.word	0x40003800

08000278 <main>:

int main(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b084      	sub	sp, #16
 800027c:	af00      	add	r7, sp, #0
	char user_data[] = "Hello world";
 800027e:	4a14      	ldr	r2, [pc, #80]	; (80002d0 <main+0x58>)
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	ca07      	ldmia	r2, {r0, r1, r2}
 8000284:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 8000288:	f7ff ffb6 	bl	80001f8 <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 800028c:	f7ff ffd6 	bl	800023c <SPI2_Inits>

	//this makes NSS signal internally high and avoids MODF error
	SPI_SSIConfig(SPI2,ENABLE);
 8000290:	2101      	movs	r1, #1
 8000292:	4810      	ldr	r0, [pc, #64]	; (80002d4 <main+0x5c>)
 8000294:	f000 fbd4 	bl	8000a40 <SPI_SSIConfig>

	//enable the SPI2 peripheral
	SPI_PeripheralControl(SPI2,ENABLE);
 8000298:	2101      	movs	r1, #1
 800029a:	480e      	ldr	r0, [pc, #56]	; (80002d4 <main+0x5c>)
 800029c:	f000 fbb4 	bl	8000a08 <SPI_PeripheralControl>

	//to send data
	SPI_SendData(SPI2,(uint8_t*)user_data,strlen(user_data));
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	4618      	mov	r0, r3
 80002a4:	f7ff ffa0 	bl	80001e8 <strlen>
 80002a8:	4602      	mov	r2, r0
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	4619      	mov	r1, r3
 80002ae:	4809      	ldr	r0, [pc, #36]	; (80002d4 <main+0x5c>)
 80002b0:	f000 fb73 	bl	800099a <SPI_SendData>

	//lets confirm SPI is not busy
	while( SPI_GetFlagStatus(SPI2,SPI_BUSY_FLAG) );
 80002b4:	bf00      	nop
 80002b6:	2180      	movs	r1, #128	; 0x80
 80002b8:	4806      	ldr	r0, [pc, #24]	; (80002d4 <main+0x5c>)
 80002ba:	f000 fbdd 	bl	8000a78 <SPI_GetFlagStatus>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d1f8      	bne.n	80002b6 <main+0x3e>

	//Disable the SPI2 peripheral
	SPI_PeripheralControl(SPI2,DISABLE);
 80002c4:	2100      	movs	r1, #0
 80002c6:	4803      	ldr	r0, [pc, #12]	; (80002d4 <main+0x5c>)
 80002c8:	f000 fb9e 	bl	8000a08 <SPI_PeripheralControl>

	while(1);
 80002cc:	e7fe      	b.n	80002cc <main+0x54>
 80002ce:	bf00      	nop
 80002d0:	08000b00 	.word	0x08000b00
 80002d4:	40003800 	.word	0x40003800

080002d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d8:	480d      	ldr	r0, [pc, #52]	; (8000310 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e0:	480c      	ldr	r0, [pc, #48]	; (8000314 <LoopForever+0x6>)
  ldr r1, =_edata
 80002e2:	490d      	ldr	r1, [pc, #52]	; (8000318 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002e4:	4a0d      	ldr	r2, [pc, #52]	; (800031c <LoopForever+0xe>)
  movs r3, #0
 80002e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e8:	e002      	b.n	80002f0 <LoopCopyDataInit>

080002ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ee:	3304      	adds	r3, #4

080002f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f4:	d3f9      	bcc.n	80002ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002f6:	4a0a      	ldr	r2, [pc, #40]	; (8000320 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f8:	4c0a      	ldr	r4, [pc, #40]	; (8000324 <LoopForever+0x16>)
  movs r3, #0
 80002fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002fc:	e001      	b.n	8000302 <LoopFillZerobss>

080002fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000300:	3204      	adds	r2, #4

08000302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000304:	d3fb      	bcc.n	80002fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000306:	f000 fbcb 	bl	8000aa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800030a:	f7ff ffb5 	bl	8000278 <main>

0800030e <LoopForever>:

LoopForever:
    b LoopForever
 800030e:	e7fe      	b.n	800030e <LoopForever>
  ldr   r0, =_estack
 8000310:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000318:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800031c:	08000b14 	.word	0x08000b14
  ldr r2, =_sbss
 8000320:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000324:	2000001c 	.word	0x2000001c

08000328 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000328:	e7fe      	b.n	8000328 <ADC_IRQHandler>
	...

0800032c <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	460b      	mov	r3, r1
 8000336:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000338:	78fb      	ldrb	r3, [r7, #3]
 800033a:	2b01      	cmp	r3, #1
 800033c:	d162      	bne.n	8000404 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4a64      	ldr	r2, [pc, #400]	; (80004d4 <GPIO_PeriClockControl+0x1a8>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d106      	bne.n	8000354 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000346:	4b64      	ldr	r3, [pc, #400]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 8000348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034a:	4a63      	ldr	r2, [pc, #396]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 800034c:	f043 0301 	orr.w	r3, r3, #1
 8000350:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOI_PCLK_DI();
		}
	}

}
 8000352:	e0b9      	b.n	80004c8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	4a61      	ldr	r2, [pc, #388]	; (80004dc <GPIO_PeriClockControl+0x1b0>)
 8000358:	4293      	cmp	r3, r2
 800035a:	d106      	bne.n	800036a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800035c:	4b5e      	ldr	r3, [pc, #376]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 800035e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000360:	4a5d      	ldr	r2, [pc, #372]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 8000362:	f043 0302 	orr.w	r3, r3, #2
 8000366:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000368:	e0ae      	b.n	80004c8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4a5c      	ldr	r2, [pc, #368]	; (80004e0 <GPIO_PeriClockControl+0x1b4>)
 800036e:	4293      	cmp	r3, r2
 8000370:	d106      	bne.n	8000380 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000372:	4b59      	ldr	r3, [pc, #356]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 8000374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000376:	4a58      	ldr	r2, [pc, #352]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 8000378:	f043 0304 	orr.w	r3, r3, #4
 800037c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800037e:	e0a3      	b.n	80004c8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4a58      	ldr	r2, [pc, #352]	; (80004e4 <GPIO_PeriClockControl+0x1b8>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d106      	bne.n	8000396 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000388:	4b53      	ldr	r3, [pc, #332]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 800038a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038c:	4a52      	ldr	r2, [pc, #328]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 800038e:	f043 0308 	orr.w	r3, r3, #8
 8000392:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000394:	e098      	b.n	80004c8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4a53      	ldr	r2, [pc, #332]	; (80004e8 <GPIO_PeriClockControl+0x1bc>)
 800039a:	4293      	cmp	r3, r2
 800039c:	d106      	bne.n	80003ac <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800039e:	4b4e      	ldr	r3, [pc, #312]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 80003a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a2:	4a4d      	ldr	r2, [pc, #308]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 80003a4:	f043 0310 	orr.w	r3, r3, #16
 80003a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003aa:	e08d      	b.n	80004c8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	4a4f      	ldr	r2, [pc, #316]	; (80004ec <GPIO_PeriClockControl+0x1c0>)
 80003b0:	4293      	cmp	r3, r2
 80003b2:	d106      	bne.n	80003c2 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80003b4:	4b48      	ldr	r3, [pc, #288]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 80003b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b8:	4a47      	ldr	r2, [pc, #284]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 80003ba:	f043 0320 	orr.w	r3, r3, #32
 80003be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c0:	e082      	b.n	80004c8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4a4a      	ldr	r2, [pc, #296]	; (80004f0 <GPIO_PeriClockControl+0x1c4>)
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d106      	bne.n	80003d8 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80003ca:	4b43      	ldr	r3, [pc, #268]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 80003cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ce:	4a42      	ldr	r2, [pc, #264]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 80003d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003d4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d6:	e077      	b.n	80004c8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	4a46      	ldr	r2, [pc, #280]	; (80004f4 <GPIO_PeriClockControl+0x1c8>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	d106      	bne.n	80003ee <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80003e0:	4b3d      	ldr	r3, [pc, #244]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 80003e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e4:	4a3c      	ldr	r2, [pc, #240]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 80003e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ec:	e06c      	b.n	80004c8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4a41      	ldr	r2, [pc, #260]	; (80004f8 <GPIO_PeriClockControl+0x1cc>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d168      	bne.n	80004c8 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80003f6:	4b38      	ldr	r3, [pc, #224]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 80003f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fa:	4a37      	ldr	r2, [pc, #220]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 80003fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000400:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000402:	e061      	b.n	80004c8 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	4a33      	ldr	r2, [pc, #204]	; (80004d4 <GPIO_PeriClockControl+0x1a8>)
 8000408:	4293      	cmp	r3, r2
 800040a:	d106      	bne.n	800041a <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 800040c:	4b32      	ldr	r3, [pc, #200]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 800040e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000410:	4a31      	ldr	r2, [pc, #196]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 8000412:	f023 0301 	bic.w	r3, r3, #1
 8000416:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000418:	e056      	b.n	80004c8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4a2f      	ldr	r2, [pc, #188]	; (80004dc <GPIO_PeriClockControl+0x1b0>)
 800041e:	4293      	cmp	r3, r2
 8000420:	d106      	bne.n	8000430 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 8000422:	4b2d      	ldr	r3, [pc, #180]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 8000424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000426:	4a2c      	ldr	r2, [pc, #176]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 8000428:	f023 0302 	bic.w	r3, r3, #2
 800042c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800042e:	e04b      	b.n	80004c8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4a2b      	ldr	r2, [pc, #172]	; (80004e0 <GPIO_PeriClockControl+0x1b4>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d106      	bne.n	8000446 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000438:	4b27      	ldr	r3, [pc, #156]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 800043a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800043c:	4a26      	ldr	r2, [pc, #152]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 800043e:	f023 0304 	bic.w	r3, r3, #4
 8000442:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000444:	e040      	b.n	80004c8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4a26      	ldr	r2, [pc, #152]	; (80004e4 <GPIO_PeriClockControl+0x1b8>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d106      	bne.n	800045c <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 800044e:	4b22      	ldr	r3, [pc, #136]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 8000450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000452:	4a21      	ldr	r2, [pc, #132]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 8000454:	f023 0308 	bic.w	r3, r3, #8
 8000458:	6313      	str	r3, [r2, #48]	; 0x30
}
 800045a:	e035      	b.n	80004c8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4a22      	ldr	r2, [pc, #136]	; (80004e8 <GPIO_PeriClockControl+0x1bc>)
 8000460:	4293      	cmp	r3, r2
 8000462:	d106      	bne.n	8000472 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000464:	4b1c      	ldr	r3, [pc, #112]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 8000466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000468:	4a1b      	ldr	r2, [pc, #108]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 800046a:	f023 0310 	bic.w	r3, r3, #16
 800046e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000470:	e02a      	b.n	80004c8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	4a1d      	ldr	r2, [pc, #116]	; (80004ec <GPIO_PeriClockControl+0x1c0>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d106      	bne.n	8000488 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 800047a:	4b17      	ldr	r3, [pc, #92]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 800047c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047e:	4a16      	ldr	r2, [pc, #88]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 8000480:	f023 0320 	bic.w	r3, r3, #32
 8000484:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000486:	e01f      	b.n	80004c8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4a19      	ldr	r2, [pc, #100]	; (80004f0 <GPIO_PeriClockControl+0x1c4>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d106      	bne.n	800049e <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000490:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 8000492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000494:	4a10      	ldr	r2, [pc, #64]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 8000496:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800049a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800049c:	e014      	b.n	80004c8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4a14      	ldr	r2, [pc, #80]	; (80004f4 <GPIO_PeriClockControl+0x1c8>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d106      	bne.n	80004b4 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 80004a6:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 80004a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004aa:	4a0b      	ldr	r2, [pc, #44]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 80004ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004b0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004b2:	e009      	b.n	80004c8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	4a10      	ldr	r2, [pc, #64]	; (80004f8 <GPIO_PeriClockControl+0x1cc>)
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d105      	bne.n	80004c8 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 80004bc:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 80004be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c0:	4a05      	ldr	r2, [pc, #20]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 80004c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004c6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004c8:	bf00      	nop
 80004ca:	370c      	adds	r7, #12
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr
 80004d4:	40020000 	.word	0x40020000
 80004d8:	40023800 	.word	0x40023800
 80004dc:	40020400 	.word	0x40020400
 80004e0:	40020800 	.word	0x40020800
 80004e4:	40020c00 	.word	0x40020c00
 80004e8:	40021000 	.word	0x40021000
 80004ec:	40021400 	.word	0x40021400
 80004f0:	40021800 	.word	0x40021800
 80004f4:	40021c00 	.word	0x40021c00
 80004f8:	40022000 	.word	0x40022000

080004fc <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8000504:	2300      	movs	r3, #0
 8000506:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	2101      	movs	r1, #1
 800050e:	4618      	mov	r0, r3
 8000510:	f7ff ff0c 	bl	800032c <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	795b      	ldrb	r3, [r3, #5]
 8000518:	2b03      	cmp	r3, #3
 800051a:	d820      	bhi.n	800055e <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	795b      	ldrb	r3, [r3, #5]
 8000520:	461a      	mov	r2, r3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	791b      	ldrb	r3, [r3, #4]
 8000526:	005b      	lsls	r3, r3, #1
 8000528:	fa02 f303 	lsl.w	r3, r2, r3
 800052c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	791b      	ldrb	r3, [r3, #4]
 8000538:	005b      	lsls	r3, r3, #1
 800053a:	2103      	movs	r1, #3
 800053c:	fa01 f303 	lsl.w	r3, r1, r3
 8000540:	43db      	mvns	r3, r3
 8000542:	4619      	mov	r1, r3
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	400a      	ands	r2, r1
 800054a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	6819      	ldr	r1, [r3, #0]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	697a      	ldr	r2, [r7, #20]
 8000558:	430a      	orrs	r2, r1
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	e0cb      	b.n	80006f6 <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	795b      	ldrb	r3, [r3, #5]
 8000562:	2b04      	cmp	r3, #4
 8000564:	d117      	bne.n	8000596 <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000566:	4b4b      	ldr	r3, [pc, #300]	; (8000694 <GPIO_Init+0x198>)
 8000568:	68db      	ldr	r3, [r3, #12]
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	7912      	ldrb	r2, [r2, #4]
 800056e:	4611      	mov	r1, r2
 8000570:	2201      	movs	r2, #1
 8000572:	408a      	lsls	r2, r1
 8000574:	4611      	mov	r1, r2
 8000576:	4a47      	ldr	r2, [pc, #284]	; (8000694 <GPIO_Init+0x198>)
 8000578:	430b      	orrs	r3, r1
 800057a:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800057c:	4b45      	ldr	r3, [pc, #276]	; (8000694 <GPIO_Init+0x198>)
 800057e:	689b      	ldr	r3, [r3, #8]
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	7912      	ldrb	r2, [r2, #4]
 8000584:	4611      	mov	r1, r2
 8000586:	2201      	movs	r2, #1
 8000588:	408a      	lsls	r2, r1
 800058a:	43d2      	mvns	r2, r2
 800058c:	4611      	mov	r1, r2
 800058e:	4a41      	ldr	r2, [pc, #260]	; (8000694 <GPIO_Init+0x198>)
 8000590:	400b      	ands	r3, r1
 8000592:	6093      	str	r3, [r2, #8]
 8000594:	e035      	b.n	8000602 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	795b      	ldrb	r3, [r3, #5]
 800059a:	2b05      	cmp	r3, #5
 800059c:	d117      	bne.n	80005ce <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800059e:	4b3d      	ldr	r3, [pc, #244]	; (8000694 <GPIO_Init+0x198>)
 80005a0:	689b      	ldr	r3, [r3, #8]
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	7912      	ldrb	r2, [r2, #4]
 80005a6:	4611      	mov	r1, r2
 80005a8:	2201      	movs	r2, #1
 80005aa:	408a      	lsls	r2, r1
 80005ac:	4611      	mov	r1, r2
 80005ae:	4a39      	ldr	r2, [pc, #228]	; (8000694 <GPIO_Init+0x198>)
 80005b0:	430b      	orrs	r3, r1
 80005b2:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005b4:	4b37      	ldr	r3, [pc, #220]	; (8000694 <GPIO_Init+0x198>)
 80005b6:	68db      	ldr	r3, [r3, #12]
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	7912      	ldrb	r2, [r2, #4]
 80005bc:	4611      	mov	r1, r2
 80005be:	2201      	movs	r2, #1
 80005c0:	408a      	lsls	r2, r1
 80005c2:	43d2      	mvns	r2, r2
 80005c4:	4611      	mov	r1, r2
 80005c6:	4a33      	ldr	r2, [pc, #204]	; (8000694 <GPIO_Init+0x198>)
 80005c8:	400b      	ands	r3, r1
 80005ca:	60d3      	str	r3, [r2, #12]
 80005cc:	e019      	b.n	8000602 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	795b      	ldrb	r3, [r3, #5]
 80005d2:	2b06      	cmp	r3, #6
 80005d4:	d115      	bne.n	8000602 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005d6:	4b2f      	ldr	r3, [pc, #188]	; (8000694 <GPIO_Init+0x198>)
 80005d8:	689b      	ldr	r3, [r3, #8]
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	7912      	ldrb	r2, [r2, #4]
 80005de:	4611      	mov	r1, r2
 80005e0:	2201      	movs	r2, #1
 80005e2:	408a      	lsls	r2, r1
 80005e4:	4611      	mov	r1, r2
 80005e6:	4a2b      	ldr	r2, [pc, #172]	; (8000694 <GPIO_Init+0x198>)
 80005e8:	430b      	orrs	r3, r1
 80005ea:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ec:	4b29      	ldr	r3, [pc, #164]	; (8000694 <GPIO_Init+0x198>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	7912      	ldrb	r2, [r2, #4]
 80005f4:	4611      	mov	r1, r2
 80005f6:	2201      	movs	r2, #1
 80005f8:	408a      	lsls	r2, r1
 80005fa:	4611      	mov	r1, r2
 80005fc:	4a25      	ldr	r2, [pc, #148]	; (8000694 <GPIO_Init+0x198>)
 80005fe:	430b      	orrs	r3, r1
 8000600:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	791b      	ldrb	r3, [r3, #4]
 8000606:	089b      	lsrs	r3, r3, #2
 8000608:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	791b      	ldrb	r3, [r3, #4]
 800060e:	f003 0303 	and.w	r3, r3, #3
 8000612:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a1f      	ldr	r2, [pc, #124]	; (8000698 <GPIO_Init+0x19c>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d04e      	beq.n	80006bc <GPIO_Init+0x1c0>
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a1e      	ldr	r2, [pc, #120]	; (800069c <GPIO_Init+0x1a0>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d032      	beq.n	800068e <GPIO_Init+0x192>
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a1c      	ldr	r2, [pc, #112]	; (80006a0 <GPIO_Init+0x1a4>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d02b      	beq.n	800068a <GPIO_Init+0x18e>
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a1b      	ldr	r2, [pc, #108]	; (80006a4 <GPIO_Init+0x1a8>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d024      	beq.n	8000686 <GPIO_Init+0x18a>
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a19      	ldr	r2, [pc, #100]	; (80006a8 <GPIO_Init+0x1ac>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d01d      	beq.n	8000682 <GPIO_Init+0x186>
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a18      	ldr	r2, [pc, #96]	; (80006ac <GPIO_Init+0x1b0>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d016      	beq.n	800067e <GPIO_Init+0x182>
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a16      	ldr	r2, [pc, #88]	; (80006b0 <GPIO_Init+0x1b4>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d00f      	beq.n	800067a <GPIO_Init+0x17e>
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a15      	ldr	r2, [pc, #84]	; (80006b4 <GPIO_Init+0x1b8>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d008      	beq.n	8000676 <GPIO_Init+0x17a>
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a13      	ldr	r2, [pc, #76]	; (80006b8 <GPIO_Init+0x1bc>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d101      	bne.n	8000672 <GPIO_Init+0x176>
 800066e:	2308      	movs	r3, #8
 8000670:	e025      	b.n	80006be <GPIO_Init+0x1c2>
 8000672:	2300      	movs	r3, #0
 8000674:	e023      	b.n	80006be <GPIO_Init+0x1c2>
 8000676:	2307      	movs	r3, #7
 8000678:	e021      	b.n	80006be <GPIO_Init+0x1c2>
 800067a:	2306      	movs	r3, #6
 800067c:	e01f      	b.n	80006be <GPIO_Init+0x1c2>
 800067e:	2305      	movs	r3, #5
 8000680:	e01d      	b.n	80006be <GPIO_Init+0x1c2>
 8000682:	2304      	movs	r3, #4
 8000684:	e01b      	b.n	80006be <GPIO_Init+0x1c2>
 8000686:	2303      	movs	r3, #3
 8000688:	e019      	b.n	80006be <GPIO_Init+0x1c2>
 800068a:	2302      	movs	r3, #2
 800068c:	e017      	b.n	80006be <GPIO_Init+0x1c2>
 800068e:	2301      	movs	r3, #1
 8000690:	e015      	b.n	80006be <GPIO_Init+0x1c2>
 8000692:	bf00      	nop
 8000694:	40013c00 	.word	0x40013c00
 8000698:	40020000 	.word	0x40020000
 800069c:	40020400 	.word	0x40020400
 80006a0:	40020800 	.word	0x40020800
 80006a4:	40020c00 	.word	0x40020c00
 80006a8:	40021000 	.word	0x40021000
 80006ac:	40021400 	.word	0x40021400
 80006b0:	40021800 	.word	0x40021800
 80006b4:	40021c00 	.word	0x40021c00
 80006b8:	40022000 	.word	0x40022000
 80006bc:	2300      	movs	r3, #0
 80006be:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80006c0:	4b59      	ldr	r3, [pc, #356]	; (8000828 <GPIO_Init+0x32c>)
 80006c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c4:	4a58      	ldr	r2, [pc, #352]	; (8000828 <GPIO_Init+0x32c>)
 80006c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ca:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 80006cc:	7c7a      	ldrb	r2, [r7, #17]
 80006ce:	7cbb      	ldrb	r3, [r7, #18]
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	fa02 f103 	lsl.w	r1, r2, r3
 80006d6:	4a55      	ldr	r2, [pc, #340]	; (800082c <GPIO_Init+0x330>)
 80006d8:	7cfb      	ldrb	r3, [r7, #19]
 80006da:	3302      	adds	r3, #2
 80006dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80006e0:	4b53      	ldr	r3, [pc, #332]	; (8000830 <GPIO_Init+0x334>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	7912      	ldrb	r2, [r2, #4]
 80006e8:	4611      	mov	r1, r2
 80006ea:	2201      	movs	r2, #1
 80006ec:	408a      	lsls	r2, r1
 80006ee:	4611      	mov	r1, r2
 80006f0:	4a4f      	ldr	r2, [pc, #316]	; (8000830 <GPIO_Init+0x334>)
 80006f2:	430b      	orrs	r3, r1
 80006f4:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	799b      	ldrb	r3, [r3, #6]
 80006fa:	461a      	mov	r2, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	791b      	ldrb	r3, [r3, #4]
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	fa02 f303 	lsl.w	r3, r2, r3
 8000706:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	689a      	ldr	r2, [r3, #8]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	791b      	ldrb	r3, [r3, #4]
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	2103      	movs	r1, #3
 8000716:	fa01 f303 	lsl.w	r3, r1, r3
 800071a:	43db      	mvns	r3, r3
 800071c:	4619      	mov	r1, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	400a      	ands	r2, r1
 8000724:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	6899      	ldr	r1, [r3, #8]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	697a      	ldr	r2, [r7, #20]
 8000732:	430a      	orrs	r2, r1
 8000734:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	79db      	ldrb	r3, [r3, #7]
 800073a:	461a      	mov	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	791b      	ldrb	r3, [r3, #4]
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	fa02 f303 	lsl.w	r3, r2, r3
 8000746:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	68da      	ldr	r2, [r3, #12]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	791b      	ldrb	r3, [r3, #4]
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	2103      	movs	r1, #3
 8000756:	fa01 f303 	lsl.w	r3, r1, r3
 800075a:	43db      	mvns	r3, r3
 800075c:	4619      	mov	r1, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	400a      	ands	r2, r1
 8000764:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	68d9      	ldr	r1, [r3, #12]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	697a      	ldr	r2, [r7, #20]
 8000772:	430a      	orrs	r2, r1
 8000774:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	7a1b      	ldrb	r3, [r3, #8]
 800077a:	461a      	mov	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	791b      	ldrb	r3, [r3, #4]
 8000780:	fa02 f303 	lsl.w	r3, r2, r3
 8000784:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	685a      	ldr	r2, [r3, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	791b      	ldrb	r3, [r3, #4]
 8000790:	4619      	mov	r1, r3
 8000792:	2301      	movs	r3, #1
 8000794:	408b      	lsls	r3, r1
 8000796:	43db      	mvns	r3, r3
 8000798:	4619      	mov	r1, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	400a      	ands	r2, r1
 80007a0:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	6859      	ldr	r1, [r3, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	697a      	ldr	r2, [r7, #20]
 80007ae:	430a      	orrs	r2, r1
 80007b0:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	795b      	ldrb	r3, [r3, #5]
 80007b6:	2b02      	cmp	r3, #2
 80007b8:	d131      	bne.n	800081e <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	791b      	ldrb	r3, [r3, #4]
 80007be:	08db      	lsrs	r3, r3, #3
 80007c0:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	791b      	ldrb	r3, [r3, #4]
 80007c6:	f003 0307 	and.w	r3, r3, #7
 80007ca:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	7c3a      	ldrb	r2, [r7, #16]
 80007d2:	3208      	adds	r2, #8
 80007d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	220f      	movs	r2, #15
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	43db      	mvns	r3, r3
 80007e4:	4618      	mov	r0, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	7c3a      	ldrb	r2, [r7, #16]
 80007ec:	4001      	ands	r1, r0
 80007ee:	3208      	adds	r2, #8
 80007f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	7c3a      	ldrb	r2, [r7, #16]
 80007fa:	3208      	adds	r2, #8
 80007fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	7a5b      	ldrb	r3, [r3, #9]
 8000804:	461a      	mov	r2, r3
 8000806:	7bfb      	ldrb	r3, [r7, #15]
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	fa02 f303 	lsl.w	r3, r2, r3
 800080e:	4618      	mov	r0, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	7c3a      	ldrb	r2, [r7, #16]
 8000816:	4301      	orrs	r1, r0
 8000818:	3208      	adds	r2, #8
 800081a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 800081e:	bf00      	nop
 8000820:	3718      	adds	r7, #24
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800
 800082c:	40013800 	.word	0x40013800
 8000830:	40013c00 	.word	0x40013c00

08000834 <SPI_PeriClockControl>:
 *
 * @Note              -

 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	460b      	mov	r3, r1
 800083e:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 8000840:	78fb      	ldrb	r3, [r7, #3]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d120      	bne.n	8000888 <SPI_PeriClockControl+0x54>
	{
		if(pSPIx == SPI1)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4a22      	ldr	r2, [pc, #136]	; (80008d4 <SPI_PeriClockControl+0xa0>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d106      	bne.n	800085c <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 800084e:	4b22      	ldr	r3, [pc, #136]	; (80008d8 <SPI_PeriClockControl+0xa4>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000852:	4a21      	ldr	r2, [pc, #132]	; (80008d8 <SPI_PeriClockControl+0xa4>)
 8000854:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000858:	6453      	str	r3, [r2, #68]	; 0x44
        }else if (pSPIx == SPI3)
        {
            SPI3_PCLK_DI();
        }
	}
}
 800085a:	e035      	b.n	80008c8 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI2)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4a1f      	ldr	r2, [pc, #124]	; (80008dc <SPI_PeriClockControl+0xa8>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d106      	bne.n	8000872 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000864:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <SPI_PeriClockControl+0xa4>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000868:	4a1b      	ldr	r2, [pc, #108]	; (80008d8 <SPI_PeriClockControl+0xa4>)
 800086a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800086e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000870:	e02a      	b.n	80008c8 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI3)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4a1a      	ldr	r2, [pc, #104]	; (80008e0 <SPI_PeriClockControl+0xac>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d126      	bne.n	80008c8 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 800087a:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <SPI_PeriClockControl+0xa4>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	4a16      	ldr	r2, [pc, #88]	; (80008d8 <SPI_PeriClockControl+0xa4>)
 8000880:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000884:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000886:	e01f      	b.n	80008c8 <SPI_PeriClockControl+0x94>
        if(pSPIx == SPI1)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4a12      	ldr	r2, [pc, #72]	; (80008d4 <SPI_PeriClockControl+0xa0>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d106      	bne.n	800089e <SPI_PeriClockControl+0x6a>
            SPI1_PCLK_DI();
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <SPI_PeriClockControl+0xa4>)
 8000892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000894:	4a10      	ldr	r2, [pc, #64]	; (80008d8 <SPI_PeriClockControl+0xa4>)
 8000896:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800089a:	6453      	str	r3, [r2, #68]	; 0x44
}
 800089c:	e014      	b.n	80008c8 <SPI_PeriClockControl+0x94>
        }else if (pSPIx == SPI2)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4a0e      	ldr	r2, [pc, #56]	; (80008dc <SPI_PeriClockControl+0xa8>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d106      	bne.n	80008b4 <SPI_PeriClockControl+0x80>
            SPI2_PCLK_DI();
 80008a6:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <SPI_PeriClockControl+0xa4>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	4a0b      	ldr	r2, [pc, #44]	; (80008d8 <SPI_PeriClockControl+0xa4>)
 80008ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80008b0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008b2:	e009      	b.n	80008c8 <SPI_PeriClockControl+0x94>
        }else if (pSPIx == SPI3)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a0a      	ldr	r2, [pc, #40]	; (80008e0 <SPI_PeriClockControl+0xac>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d105      	bne.n	80008c8 <SPI_PeriClockControl+0x94>
            SPI3_PCLK_DI();
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <SPI_PeriClockControl+0xa4>)
 80008be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c0:	4a05      	ldr	r2, [pc, #20]	; (80008d8 <SPI_PeriClockControl+0xa4>)
 80008c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008c6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008c8:	bf00      	nop
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	40013000 	.word	0x40013000
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40003800 	.word	0x40003800
 80008e0:	40003c00 	.word	0x40003c00

080008e4 <SPI_Init>:
 *
 * @Note              -

 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]

	//peripheral clock enable

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2101      	movs	r1, #1
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff ff9e 	bl	8000834 <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR ;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	791b      	ldrb	r3, [r3, #4]
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	461a      	mov	r2, r3
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	4313      	orrs	r3, r2
 8000908:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	795b      	ldrb	r3, [r3, #5]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d104      	bne.n	800091c <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	e014      	b.n	8000946 <SPI_Init+0x62>

	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	795b      	ldrb	r3, [r3, #5]
 8000920:	2b02      	cmp	r3, #2
 8000922:	d104      	bne.n	800092e <SPI_Init+0x4a>
	{
		//bidi mode should be set
		tempreg |= ( 1 << SPI_CR1_BIDIMODE);
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	e00b      	b.n	8000946 <SPI_Init+0x62>
	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	795b      	ldrb	r3, [r3, #5]
 8000932:	2b03      	cmp	r3, #3
 8000934:	d107      	bne.n	8000946 <SPI_Init+0x62>
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800093c:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= ( 1 << SPI_CR1_RXONLY);
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000944:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	799b      	ldrb	r3, [r3, #6]
 800094a:	00db      	lsls	r3, r3, #3
 800094c:	461a      	mov	r2, r3
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	4313      	orrs	r3, r2
 8000952:	60fb      	str	r3, [r7, #12]

	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	79db      	ldrb	r3, [r3, #7]
 8000958:	02db      	lsls	r3, r3, #11
 800095a:	461a      	mov	r2, r3
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	4313      	orrs	r3, r2
 8000960:	60fb      	str	r3, [r7, #12]

	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	7a1b      	ldrb	r3, [r3, #8]
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	461a      	mov	r2, r3
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	4313      	orrs	r3, r2
 800096e:	60fb      	str	r3, [r7, #12]

	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	7a5b      	ldrb	r3, [r3, #9]
 8000974:	461a      	mov	r2, r3
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	4313      	orrs	r3, r2
 800097a:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	7a9b      	ldrb	r3, [r3, #10]
 8000980:	025b      	lsls	r3, r3, #9
 8000982:	461a      	mov	r2, r3
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	4313      	orrs	r3, r2
 8000988:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	68fa      	ldr	r2, [r7, #12]
 8000990:	601a      	str	r2, [r3, #0]

}
 8000992:	bf00      	nop
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <SPI_SendData>:
 *
 * @Note              - This is blocking call

 */
void SPI_SendData(SPI_RegDef_t *pSPIx,uint8_t *pTxBuffer, uint32_t Len)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	b084      	sub	sp, #16
 800099e:	af00      	add	r7, sp, #0
 80009a0:	60f8      	str	r0, [r7, #12]
 80009a2:	60b9      	str	r1, [r7, #8]
 80009a4:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 80009a6:	e027      	b.n	80009f8 <SPI_SendData+0x5e>
	{
		//1. wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG)  == FLAG_RESET );
 80009a8:	bf00      	nop
 80009aa:	2102      	movs	r1, #2
 80009ac:	68f8      	ldr	r0, [r7, #12]
 80009ae:	f000 f863 	bl	8000a78 <SPI_GetFlagStatus>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d0f8      	beq.n	80009aa <SPI_SendData+0x10>

		//2. check the DFF bit in CR1
		if( (pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) )
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d00e      	beq.n	80009e2 <SPI_SendData+0x48>
		{
			//16 bit DFF
			//1. load the data in to the DR
			pSPIx->DR =   *((uint16_t*)pTxBuffer);
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	461a      	mov	r2, r3
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	60da      	str	r2, [r3, #12]
			Len--;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	3b01      	subs	r3, #1
 80009d2:	607b      	str	r3, [r7, #4]
			Len--;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3b01      	subs	r3, #1
 80009d8:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	3301      	adds	r3, #1
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	e00a      	b.n	80009f8 <SPI_SendData+0x5e>
		}else
		{
			//8 bit DFF
			pSPIx->DR =   *pTxBuffer;
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	461a      	mov	r2, r3
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	60da      	str	r2, [r3, #12]
			Len--;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3b01      	subs	r3, #1
 80009f0:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	3301      	adds	r3, #1
 80009f6:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d1d4      	bne.n	80009a8 <SPI_SendData+0xe>
		}
	}

}
 80009fe:	bf00      	nop
 8000a00:	bf00      	nop
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <SPI_PeripheralControl>:
 *
 * @Note              -

 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	460b      	mov	r3, r1
 8000a12:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000a14:	78fb      	ldrb	r3, [r7, #3]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d106      	bne.n	8000a28 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SPE);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
	}


}
 8000a26:	e005      	b.n	8000a34 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	601a      	str	r2, [r3, #0]
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <SPI_SSIConfig>:
 *
 * @Note              -

 */
void  SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	460b      	mov	r3, r1
 8000a4a:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000a4c:	78fb      	ldrb	r3, [r7, #3]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d106      	bne.n	8000a60 <SPI_SSIConfig+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SSI);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SSI);
	}


}
 8000a5e:	e005      	b.n	8000a6c <SPI_SSIConfig+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SSI);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	601a      	str	r2, [r3, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <SPI_GetFlagStatus>:

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx , uint32_t FlagName)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	689a      	ldr	r2, [r3, #8]
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	4013      	ands	r3, r2
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e000      	b.n	8000a94 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000a92:	2300      	movs	r3, #0
 8000a94:	4618      	mov	r0, r3
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <__libc_init_array>:
 8000aa0:	b570      	push	{r4, r5, r6, lr}
 8000aa2:	4d0d      	ldr	r5, [pc, #52]	; (8000ad8 <__libc_init_array+0x38>)
 8000aa4:	4c0d      	ldr	r4, [pc, #52]	; (8000adc <__libc_init_array+0x3c>)
 8000aa6:	1b64      	subs	r4, r4, r5
 8000aa8:	10a4      	asrs	r4, r4, #2
 8000aaa:	2600      	movs	r6, #0
 8000aac:	42a6      	cmp	r6, r4
 8000aae:	d109      	bne.n	8000ac4 <__libc_init_array+0x24>
 8000ab0:	4d0b      	ldr	r5, [pc, #44]	; (8000ae0 <__libc_init_array+0x40>)
 8000ab2:	4c0c      	ldr	r4, [pc, #48]	; (8000ae4 <__libc_init_array+0x44>)
 8000ab4:	f000 f818 	bl	8000ae8 <_init>
 8000ab8:	1b64      	subs	r4, r4, r5
 8000aba:	10a4      	asrs	r4, r4, #2
 8000abc:	2600      	movs	r6, #0
 8000abe:	42a6      	cmp	r6, r4
 8000ac0:	d105      	bne.n	8000ace <__libc_init_array+0x2e>
 8000ac2:	bd70      	pop	{r4, r5, r6, pc}
 8000ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ac8:	4798      	blx	r3
 8000aca:	3601      	adds	r6, #1
 8000acc:	e7ee      	b.n	8000aac <__libc_init_array+0xc>
 8000ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ad2:	4798      	blx	r3
 8000ad4:	3601      	adds	r6, #1
 8000ad6:	e7f2      	b.n	8000abe <__libc_init_array+0x1e>
 8000ad8:	08000b0c 	.word	0x08000b0c
 8000adc:	08000b0c 	.word	0x08000b0c
 8000ae0:	08000b0c 	.word	0x08000b0c
 8000ae4:	08000b10 	.word	0x08000b10

08000ae8 <_init>:
 8000ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aea:	bf00      	nop
 8000aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aee:	bc08      	pop	{r3}
 8000af0:	469e      	mov	lr, r3
 8000af2:	4770      	bx	lr

08000af4 <_fini>:
 8000af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000af6:	bf00      	nop
 8000af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000afa:	bc08      	pop	{r3}
 8000afc:	469e      	mov	lr, r3
 8000afe:	4770      	bx	lr
